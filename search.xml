<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>53k star! 高颜值的开源相册工具 —— immich</title>
    <url>/article/immich-docker.html</url>
    <content><![CDATA[<p>  最早之前使用的是百度网盘备份视频和照片，近两年用的是不怎么限速的阿里网盘。近期想从百度网盘下载点东西，限速后太过费劲，所以准备弃用，开了个 SVIP，将所有文件全部下载到了硬盘。同理，担心后续阿里网盘限速，虽然视频照片这类资源备份后基本不怎么再次下载，但本着我不下载但你不能限速的原则，找到了一个开源的相册备份应用 <code>immich</code>。</p>
<a id="more"></a>
<p>  也对比过一些其他的开源软件，比如 NextCloud，但是个人觉得还是 immich 更好用。最近用了一段时间，体验还不错，内网下上传照片极快，也有对应手机平台的 APP 支持，体验较好。这里记录下通过 docker compose 安装 immich 的过程和一些改动。</p>
<h3 id="一-环境与链接"><a class="header-anchor" href="#一-环境与链接">¶</a>一、环境与链接</h3>
<p>  <strong>最好能有科学上网</strong>，<a href="https://liuxianyu.cn/article/http-proxy.html">远程服务器使用本地代理</a></p>
<ul>
<li>硬件：中柏 n100 pro Ⅱ 16G + 512G</li>
<li>系统：Ubuntu 24.04</li>
<li>官网：<a href="https://immich.app/" target="_blank" rel="noopener">https://immich.app/</a></li>
</ul>
<h3 id="二-安装"><a class="header-anchor" href="#二-安装">¶</a>二、安装</h3>
<h4 id="2-1-安装-docker"><a class="header-anchor" href="#2-1-安装-docker">¶</a>2.1 安装 docker</h4>
<p>  我是通过 docker compose 安装的，简单记录下如何安装 docker compose：</p>
<figure class="highlight shell"><figcaption><span>安装 docker</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Add Docker<span class="string">'s official GPG key:</span></span></span><br><span class="line">sudo apt update -y</span><br><span class="line">sudo apt install ca-certificates curl -y</span><br><span class="line">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class="line">sudo chmod a+r /etc/apt/keyrings/docker.asc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Add the repository to Apt sources:</span></span><br><span class="line">echo \</span><br><span class="line">  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span><br><span class="line"><span class="meta">  $</span><span class="bash">(. /etc/os-release &amp;&amp; <span class="built_in">echo</span> <span class="string">"<span class="variable">$VERSION_CODENAME</span>"</span>) stable<span class="string">" | \</span></span></span><br><span class="line">  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line">sudo apt update -y</span><br><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y</span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>安装 docker compose</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo apt update -y</span><br><span class="line">sudo apt install docker-compose-plugin -y</span><br><span class="line">docker compose version</span><br></pre></td></tr></table></figure>
<h4 id="2-2-docker-compose-yml"><a class="header-anchor" href="#2-2-docker-compose-yml">¶</a>2.2 docker-compose.yml</h4>
<figure class="highlight shell"><figcaption><span>存储相关文件</span></figcaption><table><tr><td class="code"><pre><span class="line">mkdir -p /mnt/docker/immich-app</span><br><span class="line">cd /mnt/docker/immich-app</span><br></pre></td></tr></table></figure>
<p>  官网的安装步骤在这里：<a href="https://immich.app/docs/install/docker-compose/%E3%80%82" target="_blank" rel="noopener">https://immich.app/docs/install/docker-compose/。</a> 下载 <code>docker-compose.yml</code> 和配置文件 <code>.env</code>，如果有硬件加速的能力（N 卡之类的硬件）可以点开官网文档查看，这里不进行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -O docker-compose.yml https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml</span><br><span class="line">wget -O .env https://github.com/immich-app/immich/releases/latest/download/example.env</span><br></pre></td></tr></table></figure>
<p>  <code>vim .env</code> 追加时区：<code>TZ=Asia/Shanghai</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker compose -p immich up -d</span><br></pre></td></tr></table></figure>
<p>  稍等片刻即可访问，默认端口是 <code>2283</code>。我这里是在局域网其他电脑访问的：<a href="http://192.168.31.101:2283" target="_blank" rel="noopener">http://192.168.31.101:2283</a>。第一次进入会有一些初始化的设置。</p>
<h4 id="2-3-大模型"><a class="header-anchor" href="#2-3-大模型">¶</a>2.3 大模型</h4>
<p>  immich 强大在可以支持大模型处理，能够标注人脸和按文字搜索照片。上传一定量图片后，如果左侧 探索 功能中还是没有人脸，可能是由于服务器端存在网络问题，此时需要在服务器端准备好大模型。在 <code>docker-compose.yaml</code> 文件同级新建 <code>model_cache</code> 文件夹，然后执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /mnt/docker/immich-app</span><br><span class="line">mkdir -p model-cache/clip model-cache/facial-recognition</span><br></pre></td></tr></table></figure>
<p>  这里我们会用到两个大模型 <a href="https://huggingface.co/immich-app/XLM-Roberta-Large-Vit-B-16Plus/tree/main" target="_blank" rel="noopener">XLM-Roberta-Large-Vit-B-16Plus</a> 和 <a href="https://huggingface.co/immich-app/buffalo_l/tree/main" target="_blank" rel="noopener">buffalo_l</a>，分布用于中文搜索（以文搜图）和人脸识别。用到的的相关文件我都放到了 <a href="https://pan.quark.cn/s/f623f75acd2a" target="_blank" rel="noopener">夸克云盘 immich-docker</a>，也可以自行下载。</p>
<p>  我们需要分别下载并解压到 <code>model-cache/clip</code> 和 <code>model-cache/facial-recognition</code> 目录下。因为仓库文件较大，需要借助 <a href="https://github.com/git-lfs/git-lfs/releases" target="_blank" rel="noopener">git-fls</a>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf git-lfs-linux-amd64-v3.6.0.tar.gz</span><br><span class="line">cd git-lfs-3.6.0</span><br><span class="line">sudo ./install.sh</span><br><span class="line">git lfs install</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong> 大模型的路径是有讲究的。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /mnt/docker/immich-app/model-cache/clip</span><br><span class="line">git clone https://huggingface.co/immich-app/XLM-Roberta-Large-Vit-B-16Plus</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /mnt/docker/immich-app/model-cache/facial-recognition</span><br><span class="line">git clone https://huggingface.co/immich-app/buffalo_l</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/immich-docker/1.png" alt></p>
<p>   <code>vim .env</code> 定义大模型的路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># model cache path</span><br><span class="line">MODEL_CACHE=./model-cache</span><br></pre></td></tr></table></figure>
<p>  <code>vim docker-compose.yml</code> 使用大模型的路径：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/immich-docker/2.png" alt></p>
<p>  分别使用两个大模型，然后 <a href="https://liuxianyu.cn/article/immich-docker.html#2-4-%E9%87%8D%E5%90%AF-immich">在服务器端重启 immich</a>。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/immich-docker/3.png" alt><br>
<img src="https://images-hosting.liuxianyu.cn/posts/immich-docker/4.png" alt></p>
<h4 id="2-4-重启-immich"><a class="header-anchor" href="#2-4-重启-immich">¶</a>2.4 重启 immich</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop immich_server immich_machine_learning immich_redis immich_postgres</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>
<p>  重启完成后，重新拉起相关的任务。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/immich-docker/5.png" alt></p>
<p>  等待运行完成，搜索功能就有人脸分组了。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/immich-docker/6.png" alt></p>
<h4 id="2-5-更新-immich"><a class="header-anchor" href="#2-5-更新-immich">¶</a>2.5 更新 immich</h4>
<p>  进入 immich 时如果有更新提示，可以在服务器端执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker compose pull &amp;&amp; docker compose up -d</span><br></pre></td></tr></table></figure>
<h3 id="三-卸载"><a class="header-anchor" href="#三-卸载">¶</a>三、卸载</h3>
<p>  如果体验后不想使用，可以按以下方式卸载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop immich_server immich_machine_learning immich_redis immich_postgres</span><br></pre></td></tr></table></figure>
<p>  自行清理对应的容器和镜像，可以酌情删除 <code>/mnt/docker/immich-app</code> 文件夹。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>远程服务器使用本地代理</title>
    <url>/article/http-proxy.html</url>
    <content><![CDATA[<p>  在服务器端经常遇到下载速度慢的问题，在服务端安装 clash 或者 v2ray 等又比较麻烦，可以临时使用本地的代理达到科学上网的目的。这里<strong>需要区分 <code>局域网内服务器</code> 和 <code>公网服务器</code></strong>，记录下细节。</p>
<a id="more"></a>
<h3 id="一-局域网内服务器"><a class="header-anchor" href="#一-局域网内服务器">¶</a>一、局域网内服务器</h3>
<p>  之前将一台放在家里旧笔记本电脑安装了 CentOS 作为服务器学习用，属于局域网内的机器，原则上公网无法访问。家里还有一台 Windows 台式机，可以通过 clash 科学上网，安装了远程开机卡和 ToDesk 自启动，方便在公司远程开机。笔记本和 Windows 台式机都是通过 WiFi 接入网络的，因此处于同一个局域网。公司的 Mac 偶尔带回家，这里也设置下。需要开启 clash 的 <code>允许局域网连接</code>：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/http-proxy/1.png" alt></p>
<p>  将旧笔记本电脑的别名改为 <code>lenovo</code>，在 <code>lenovo</code> 上 <code>vim ~/.zshrc</code> 添加以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MACIP='192.168.31.23'</span><br><span class="line">WINIP='192.168.31.108'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用代理服务器(MacOS)</span></span><br><span class="line">alias proxym='export https_proxy=http://$MACIP:7890;export http_proxy=http://$MACIP:7890;export all_proxy=socks5://$MACIP:7890'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用代理服务器(Windows)</span></span><br><span class="line">alias proxyw='export https_proxy=http://$WINIP:7890;export http_proxy=http://$WINIP:7890;export all_proxy=socks5://$WINIP:7890'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消使用代理服务器</span></span><br><span class="line">alias unproxy='unset http_proxy;unset https_proxy;unset all_proxy'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试服务器是否可用</span></span><br><span class="line">alias proxy_test='curl -v google.com'</span><br></pre></td></tr></table></figure>
<p>  在 <code>lenovo</code> 上添加完上述命令后执行 <code>source ~/.zshrc</code> 就可以生效了。此时可以执行 <code>proxy_test</code> 测试代理是否可用，发现一直是 Trying；执行 <code>proxy</code> 后再执行 <code>proxy_test</code> 就发现有具体内容返回了；可以通过执行 <code>unproxy</code> 取消代理。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/http-proxy/2.png" alt></p>
<h3 id="二-公网服务器"><a class="header-anchor" href="#二-公网服务器">¶</a>二、公网服务器</h3>
<p>  公网服务器可以借助 <code>ssh -R</code> 命令创建一个反向代理通道（<strong>下方 ssh 命令在本地机器执行，本地机器需要科学上网</strong>）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -R 6990:localhost:7890 root@47.65.55.62 -N</span><br></pre></td></tr></table></figure>
<ul>
<li><code>ssh -R</code> 表示建立一个反向 SSH 隧道</li>
<li><code>6990</code> 是在公网服务器上监听的端口</li>
<li><code>localhost</code> 本地机器的地址</li>
<li><code>7890</code> 本地机器代理服务的地址，这里使用的是 clash</li>
<li><code>root@47.65.55.62</code> 公网服务器的用户名和 IP 地址</li>
<li><code>-N</code> 表示不执行远程命令，仅建立隧道连接，这里必需</li>
</ul>
<p>  因此上述命令的作用是：将本地的 <code>7890</code> 端口映射到公网服务器 <code>47.65.55.62</code> 的 <code>6990</code> 端口，当公网服务器有请求发送到公网服务器的 <code>6990</code> 端口时，它会通过 SSH 隧道转发到本地机器的 <code>7890</code> 端口。</p>
<p>  在本地机器执行上述命令前先在公网服务器上确认配置了允许端口转发，我这里的机器是 CentOS7.6，使用 <code>cat /etc/os-release</code> 可以查看系统信息。<code>vim /etc/ssh/sshd_config</code> 后找到 <code>AllowTcpForwarding</code> 和 <code>GatewayPorts</code>，这两个配置需要都设置为 <code>yes</code>，一般是注释了，可以在这两者的下方添加如下配置，并执行 <code>systemctl restart sshd</code> 命令重启 SSH 服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">AllowTcpForwarding yes</span><br><span class="line">GatewayPorts yes</span><br></pre></td></tr></table></figure>
<p>  类似的，在公网服务器上也添加下方的 <code>proxy</code> 命令，然后执行 <code>source ~/.zshrc</code> 就可以生效了。在公网服务器执行 <code>proxy_test</code> 测试代理是否可用，发现一直是 Trying；执行 <code>proxy</code> 后再执行 <code>proxy_test</code> 就发现有具体内容返回了；可以通过执行 <code>unproxy</code> 取消代理。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 代理到本机的指定端口（公网服务器）</span></span><br><span class="line">alias proxy='export https_proxy=http://localhost:6990;export http_proxy=http://localhost:6990;export all_proxy=socks5://localhost:6990'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消使用代理服务器</span></span><br><span class="line">alias unproxy='unset http_proxy;unset https_proxy;unset all_proxy'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试服务器是否可用</span></span><br><span class="line">alias proxy_test='curl -v google.com'</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/http-proxy/3.png" alt></p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>先在本地机器执行 <code>ssh -R</code> 命令，再在公网服务器执行 <code>proxy</code> 使用代理</strong></li>
<li><strong><code>ssh -R</code> 命令的 <code>-N</code> 参数需要有，否则就会直接登录公网服务器的终端了</strong></li>
<li><strong><code>ssh -R</code> 命令执行后会要求终端活跃，关闭终端或停止 <code>ssh -R</code> 命令都会停止代理</strong></li>
<li><strong>当公网服务器上的端口被占用时，<code>ssh -R</code> 命令执行会有 Warning 提示，代理会失败</strong></li>
</ul>
</blockquote>
<h3 id="三-其他"><a class="header-anchor" href="#三-其他">¶</a>三、其他</h3>
<ul>
<li>当 <code>ssh</code> 连接断开后，<code>proxy</code> 也就失效了，自启动或全局生效等可以自行研究；</li>
<li><code>ssh -R</code> 命令的作用是将远程服务器的端口映射到本地机器的端口，这也可以实现局域网内的服务在公网访问，不仅仅是代理的作用；</li>
</ul>
]]></content>
      <categories>
        <category>Cent OS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Cent OS</tag>
      </tags>
  </entry>
  <entry>
    <title>用 inquirer 写交互式的脚本</title>
    <url>/article/inquirer-script.html</url>
    <content><![CDATA[<p>  最近开发 npm 包，发现基于 <a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener">inquirer.js</a> 写交互式脚本很方便，尤其是一些部署脚本和打版本号之类的脚步，记录一下。</p>
<a id="more"></a>
<h3 id="一-打版本号"><a class="header-anchor" href="#一-打版本号">¶</a>一、打版本号</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/inquirer-script/1.gif" alt></p>
<p>  前置依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i inquirer standard-version -D</span><br></pre></td></tr></table></figure>
<p>  参考 package.json：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"release-script"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.3"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"release"</span>: <span class="string">"node ./scripts/release.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"cz-conventional-changelog"</span>: <span class="string">"^3.3.0"</span>,</span><br><span class="line">    <span class="attr">"inquirer"</span>: <span class="string">"^9.2.22"</span>,</span><br><span class="line">    <span class="attr">"standard-version"</span>: <span class="string">"^9.5.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"module"</span>,</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"commitizen"</span>: &#123;</span><br><span class="line">      <span class="attr">"path"</span>: <span class="string">"./node_modules/cz-conventional-changelog"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/inquirer-script/2.png" alt></p>
<p>  对应的 <a href="https://gitee.com/liuxy0551/release-script/blob/master/scripts/release.js" target="_blank" rel="noopener">release.js</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> inquirer <span class="keyword">from</span> <span class="string">"inquirer"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; spawn &#125; <span class="keyword">from</span> <span class="string">"child_process"</span>;</span><br><span class="line"><span class="comment">// const inquirer = require('inquirer');</span></span><br><span class="line"><span class="comment">// const &#123; spawn &#125; = require('child_process');</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> runCommand = <span class="function">(<span class="params">command, args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> executedCommand = spawn(command, args, &#123;</span><br><span class="line">            stdio: <span class="string">"inherit"</span>,</span><br><span class="line">            shell: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        executedCommand.on(<span class="string">"error"</span>, (error) =&gt; &#123;</span><br><span class="line">            reject(&#123; error, <span class="attr">message</span>: <span class="literal">null</span>, <span class="attr">code</span>: <span class="literal">null</span> &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        executedCommand.on(<span class="string">"exit"</span>, (code) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (code === <span class="number">0</span>) &#123;</span><br><span class="line">                resolve(&#123; <span class="attr">error</span>: <span class="literal">null</span>, <span class="attr">message</span>: <span class="literal">null</span>, code &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(&#123; <span class="attr">error</span>: <span class="literal">null</span>, <span class="attr">message</span>: <span class="literal">null</span>, code &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        executedCommand.on(<span class="string">"message"</span>, (message) =&gt; &#123;</span><br><span class="line">            resolve(&#123; <span class="attr">error</span>: <span class="literal">null</span>, <span class="attr">message</span>: message, <span class="attr">code</span>: <span class="literal">null</span> &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execStandardVersion</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; bumpType, isPrerelease, prereleaseType, tagPrefix &#125; = res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cmd = <span class="string">`standard-version --release-as <span class="subst">$&#123;bumpType&#125;</span> `</span>;</span><br><span class="line">    <span class="keyword">if</span> (isPrerelease) &#123;</span><br><span class="line">        cmd += <span class="string">` --prerelease <span class="subst">$&#123;prereleaseType&#125;</span> `</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cmd += <span class="string">` --tag-prefix <span class="subst">$&#123;tagPrefix&#125;</span> `</span>;</span><br><span class="line">    cmd += <span class="string">" --infile CHANGELOG.md "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`\nExecuting: <span class="subst">$&#123;cmd&#125;</span> \n`</span>);</span><br><span class="line"></span><br><span class="line">    runCommand(cmd)</span><br><span class="line">        .then(<span class="function">(<span class="params">&#123; message &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.info(<span class="string">"\nPlease checkout recent commit, and then"</span>);</span><br><span class="line">            <span class="built_in">console</span>.info(<span class="string">"Push branch and new tag to git repository, publish package to npm"</span>);</span><br><span class="line">            <span class="comment">// message &amp;&amp; console.info(message)</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">&#123; error, code &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">            code &amp;&amp; <span class="built_in">console</span>.error(<span class="string">"Error: process exit code"</span> + code);</span><br><span class="line">            error &amp;&amp; <span class="built_in">console</span>.error(error);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inquirer</span><br><span class="line">    .prompt([</span><br><span class="line">        &#123;</span><br><span class="line">            type: <span class="string">"list"</span>,</span><br><span class="line">            name: <span class="string">"bumpType"</span>,</span><br><span class="line">            message: <span class="string">"Which type you want bump"</span>,</span><br><span class="line">            choices: [<span class="string">"major"</span>, <span class="string">"minor"</span>, <span class="string">"patch"</span>],</span><br><span class="line">            loop: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            type: <span class="string">"confirm"</span>,</span><br><span class="line">            name: <span class="string">"isPrerelease"</span>,</span><br><span class="line">            message: <span class="string">"Is a prerelease? Default is no"</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">            loop: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            type: <span class="string">"list"</span>,</span><br><span class="line">            name: <span class="string">"prereleaseType"</span>,</span><br><span class="line">            message: <span class="string">"What is the current stage"</span>,</span><br><span class="line">            choices: [<span class="string">"alpha"</span>, <span class="string">"beta"</span>],</span><br><span class="line">            when: <span class="function">(<span class="params">answer</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> answer.isPrerelease;</span><br><span class="line">            &#125;,</span><br><span class="line">            loop: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            type: <span class="string">"input"</span>,</span><br><span class="line">            name: <span class="string">"tagPrefix"</span>,</span><br><span class="line">            message: <span class="string">"Input git tag prefix, default is v"</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"v"</span>,</span><br><span class="line">            loop: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    ])</span><br><span class="line">    .then(execStandardVersion);</span><br></pre></td></tr></table></figure>
<h3 id="二-部署脚步"><a class="header-anchor" href="#二-部署脚步">¶</a>二、部署脚步</h3>
<p>  待补充</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 pnpm pack 命令本地调试 npm 包</title>
    <url>/article/pnpm-pack.html</url>
    <content><![CDATA[<p>  最近本地开发 npm 包，发现 <code>pnpm pack</code> 可以很方便的验证效果，比 <code>pnpm link</code> 好用点，不需要频繁的发 beta 包，记录一下。</p>
<a id="more"></a>
<h3 id="一-npm-包"><a class="header-anchor" href="#一-npm-包">¶</a>一、npm 包</h3>
<p>  在 npm 包的根目录<strong>先执行构建命令</strong>，一般是 <code>pnpm build</code>，再执行 <code>pnpm pack</code> 命令，会出现一个包名加版本号的 tgz 压缩文件，压缩包的内容和 npm publish 发布的包内容一致，这样就可以更准确的验证效果了。建议执行命令前修改下 npm 包 <code>package.json</code> 文件的 <code>version</code> 属性，方便区分。</p>
<h3 id="二-目标项目"><a class="header-anchor" href="#二-目标项目">¶</a>二、目标项目</h3>
<p>  删除 node_modules，复制上述 tgz 压缩文件的绝对路径，在目标项目的根目录执行下方命令，建议执行后再补一次 <code>pnpm i</code>。<code>-w</code> 是 workspace 的标识，可以忽略。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pnpm install /Users/liuyi/Desktop/Projects/dtstack/monaco-sql-languages/monaco-sql-languages-0.12.3-beta.0.tgz -w</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/pnpm-pack/1.png" alt></p>
<h3 id="三-其他"><a class="header-anchor" href="#三-其他">¶</a>三、其他</h3>
<p>  推荐一个好用的 VSCode 插件 <code>Search node_modules</code>，自行设置快捷键后，可以快速的找到 node_modules 中依赖的目录结构和路径。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/pnpm-pack/2.png" alt></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>pnpm</tag>
      </tags>
  </entry>
  <entry>
    <title>ProxyNT 安装与使用</title>
    <url>/article/proxynt.html</url>
    <content><![CDATA[<p>  记录一下如何将闲置电脑借助 <a href="https://github.com/sazima/proxynt" target="_blank" rel="noopener">ProxyNT</a> 改造成可以公网访问的服务器，原理是反向代理。</p>
<a id="more"></a>
<p>  ProxyNT：<a href="https://github.com/sazima/proxynt" target="_blank" rel="noopener">https://github.com/sazima/proxynt</a> 。后续操作需要有公网服务器，假设公网 IP 为 <code>43.25.35.231</code>。</p>
<h3 id="公网服务器-服务端"><a class="header-anchor" href="#公网服务器-服务端">¶</a>公网服务器（服务端）</h3>
<p>  1. 先安装 python pip：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install python3-pip -y</span><br></pre></td></tr></table></figure>
<p>  2. 然后通过清华源安装 <code>proxynt</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install -U -i https://pypi.tuna.tsinghua.edu.cn/simple proxynt</span><br></pre></td></tr></table></figure>
<p>  3. 在常用目录下新建 <code>nt_server_config.json</code> 配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /mnt/proxynt</span><br><span class="line">cd /mnt/proxynt</span><br><span class="line">vim nt_server_config.json</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">6999</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/proxynt"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"helloworld"</span>,</span><br><span class="line">    <span class="attr">"log_file"</span>: <span class="string">"/mnt/proxynt/logs/nt_server.log"</span>,</span><br><span class="line">    <span class="attr">"admin"</span>: &#123;</span><br><span class="line">        <span class="attr">"enable"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"admin_password"</span>: <span class="string">"new_password"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  4. 在公网服务器提供方的控制台页面新增安全组：6990-7010 范围端口备用。</p>
<p>  5. 执行以下命令在前台运行服务端程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nt_server -c nt_server_config.json</span><br></pre></td></tr></table></figure>
<h3 id="闲置电脑-客户端"><a class="header-anchor" href="#闲置电脑-客户端">¶</a>闲置电脑（客户端）</h3>
<p>  安装 CentOS 系统的方式自行搜索，这里用的是 <code>CentOS 7.9</code>。</p>
<p>  1. 先安装 python pip：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install python3-pip -y</span><br></pre></td></tr></table></figure>
<p>  2. 然后通过清华源安装 proxynt：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install -U -i https://pypi.tuna.tsinghua.edu.cn/simple proxynt</span><br></pre></td></tr></table></figure>
<p>  3. 在常用目录下新建 <code>nt_client_config.json</code> 配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /mnt/proxynt</span><br><span class="line">cd /mnt/proxynt</span><br><span class="line">vim nt_client_config.json</span><br></pre></td></tr></table></figure>
<p>  注意下方 URL 中的 IP 为公网服务器 IP，端口为 <code>proxynt</code> 服务端配置文件设置的端口：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"server"</span>: &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"ws://43.25.35.231:6999/proxynt"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"helloworld"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"client_name"</span>: <span class="string">"home_pc"</span>,</span><br><span class="line">  <span class="attr">"log_file"</span>: <span class="string">"/mnt/proxynt/logs/nt_client.log"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  4. 执行以下命令在前台运行客户端程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nt_client -c nt_client_config.json</span><br></pre></td></tr></table></figure>
<p>  如果安全组设置正确并且服务端已经正常启动，则可以看到 <code>success</code> 提示。</p>
<h3 id="新增配置"><a class="header-anchor" href="#新增配置">¶</a>新增配置</h3>
<p>  在浏览器访问以下地址，输入上方服务端配置文件中设置的 admin 密码（<code>new_password</code>）即可进入管理页面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://43.25.35.231:6999/proxynt/admin</span><br></pre></td></tr></table></figure>
<p>  可以在已经有的 nginx 配置里添加一段，以通过域名访问管理页面：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /proxynt &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://127.0.0.1:6999;</span><br><span class="line">  <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  如果服务端和客户端服务都正常运行，则可以看到 <code>online</code>：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/proxynt/1.png" alt></p>
<p>  后续闲置电脑上启服务新增配置时，远程端口为公网服务器刚刚设置范围安全组的一个值，可以递增的转发出去，闲置电脑上启动的服务端口填在本地端口，本地 ip 默认 <code>127.0.0.1</code> 即可。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/proxynt/2.png" alt></p>
<h3 id="ssh-连接"><a class="header-anchor" href="#ssh-连接">¶</a>SSH 连接</h3>
<p>  按上述新增配置的截图添加一个闲置电脑的 22 端口用于 SSH 远程连接。</p>
<p>  使用以下命令在输入密码后即可远程连接到闲置电脑，后续在公司也可以远程连家里的闲置电脑。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh root@43.25.35.231 -p 7000</span><br></pre></td></tr></table></figure>
<p>  添加秘钥到闲置电脑，后续 ssh 连接时不再需要输入密码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -oPort=7001 root@43.25.35.231</span><br></pre></td></tr></table></figure>
<h3 id="服务自启动"><a class="header-anchor" href="#服务自启动">¶</a>服务自启动</h3>
<p>  接下来的内容涉及到 <code>Linux systemd</code> 的知识，可以自行搜索补充。</p>
<p>  由于刚刚都是在前台运行验证效果，日常使用中我们可以将刚刚启动服务端和客户端程序的命令设置为自启动。</p>
<h4 id="公网服务器-服务端-v2"><a class="header-anchor" href="#公网服务器-服务端-v2">¶</a>公网服务器（服务端）</h4>
<p>  1. 使用以下命令查看 <code>nt_server</code> 的路径，要和下方的 <code>ExecStart</code> 开头保持一致。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">which nt_server</span><br></pre></td></tr></table></figure>
<p>  2. 进入自启动脚本的默认目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /lib/systemd/system</span><br><span class="line">vim proxynt_server.service</span><br></pre></td></tr></table></figure>
<p>  3. 填入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nat_traversal server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5s</span><br><span class="line">ExecStart=/usr/local/bin/nt_server -c /mnt/proxynt/nt_server_config.json</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>  4. 加载上述自启动文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<p>  5. 允许开机自启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable proxynt_server.service</span><br></pre></td></tr></table></figure>
<p>  6. 立即启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start proxynt_server.service</span><br></pre></td></tr></table></figure>
<h4 id="闲置电脑-客户端-v2"><a class="header-anchor" href="#闲置电脑-客户端-v2">¶</a>闲置电脑（客户端）</h4>
<p>  1. 使用以下命令查看 <code>nt_client</code> 的路径，要和下方的 <code>ExecStart</code> 开头保持一致。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">which nt_client</span><br></pre></td></tr></table></figure>
<p>  2. 进入自启动脚本的默认目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /lib/systemd/system</span><br><span class="line">vim proxynt_client.service</span><br></pre></td></tr></table></figure>
<p>  3. 填入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nat_traversal client</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5s</span><br><span class="line">ExecStart=/usr/local/bin/nt_client -c /mnt/proxynt/nt_client_config.json</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>  4. 加载上述自启动文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<p>  5. 允许开机自启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable proxynt_client.service</span><br></pre></td></tr></table></figure>
<p>  6. 立即启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start proxynt_client.service</span><br></pre></td></tr></table></figure>
<h3 id="更新"><a class="header-anchor" href="#更新">¶</a>更新</h3>
<p>  有更新时，服务端和客户端都需要进行升级：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install -U -i https://pypi.tuna.tsinghua.edu.cn/simple proxynt</span><br></pre></td></tr></table></figure>
<h3 id="写在最后"><a class="header-anchor" href="#写在最后">¶</a>写在最后</h3>
<p>  至此，你又有了一台公网服务器，性能用于学习足够了。</p>
]]></content>
      <categories>
        <category>Cent OS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Cent OS</tag>
      </tags>
  </entry>
  <entry>
    <title>React 中使用 AntD Upload 组件时手动触发文件选择框</title>
    <url>/article/react-antd-upload.html</url>
    <content><![CDATA[<p>  最近有个需求，需要在点击上传按钮时先调用接口判断是否满足上传的条件，而不是在上传后校验失败后进行报错，将校验前置。过程中没查到其他有用的资料，这里记录下。</p>
<a id="more"></a>
<h3 id="一-实现效果"><a class="header-anchor" href="#一-实现效果">¶</a>一、实现效果</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/react-antd-upload/1.gif" alt></p>
<h3 id="二-实现代码"><a class="header-anchor" href="#二-实现代码">¶</a>二、实现代码</h3>
<h4 id="html"><a class="header-anchor" href="#html">¶</a>html</h4>
<p>  先将 <code>Upload</code> 组件的 <code>openFileDialogOnClick</code> 属性置为 false，点击不打开文件对话框；<code>Upload</code> 的父级 div 加上 ref。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;(el:</span> <span class="attr">any</span>) =&gt;</span> (this.uploadEle = el)&#125;&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">Upload</span> &#123;<span class="attr">...upLoadProps</span>&#125; <span class="attr">openFileDialogOnClick</span>=<span class="string">&#123;false&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">loading</span>=<span class="string">&#123;loading&#125;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">onClick</span>=<span class="string">&#123;this.handleImport&#125;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">          导入文件</span><br><span class="line">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="javascript"><a class="header-anchor" href="#javascript">¶</a>JavaScript</h4>
<p>  点击按钮，先进行接口校验，校验成功则弹出文件选择框，失败则弹提示。通过父级 div 去拿文件上传 input 的 dom，然后手动触发 <code>click</code> 事件。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">handleImport = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; loading: <span class="literal">true</span> &#125;);</span><br><span class="line">    API.checkImport().then(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data) &#123;</span><br><span class="line">            (<span class="keyword">this</span>.uploadEle <span class="keyword">as</span> <span class="built_in">any</span>)?.querySelector(<span class="string">'input[type=file]'</span>)?.click?.();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            message.warning(<span class="string">'校验失败'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; loading: <span class="literal">false</span> &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 定时备份 MySQL (内有 docker 版)</title>
    <url>/article/linux-crontab.html</url>
    <content><![CDATA[<p>  Linux 中的定时任务一般通过 <code>crontab</code> 命令来管理，这里记录下常用的一些任务。</p>
<a id="more"></a>
<h3 id="一-常用命令"><a class="header-anchor" href="#一-常用命令">¶</a>一、常用命令</h3>
<ul>
<li><code>crontab -l</code> 查看当前用户的定时任务列表</li>
<li><code>crontab -e</code> 编辑当前用户的定时任务列表</li>
<li><code>service crond status</code>  查看服务状态</li>
<li><code>service crond start</code>   启动服务</li>
<li><code>service crond stop</code>    关闭服务</li>
<li><code>service crond restart</code> 重启服务</li>
<li><code>service crond reload</code>  重新载入配置</li>
</ul>
<h3 id="二-命令脚本"><a class="header-anchor" href="#二-命令脚本">¶</a>二、命令脚本</h3>
<p>  先创建存放脚本的文件夹：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /mnt/mysqldump</span><br></pre></td></tr></table></figure>
<p>  再编辑脚本文件(<code>docker 版</code> 在下方)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /mnt/mysqldump/my-database.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库用户名</span></span><br><span class="line">username=root</span><br><span class="line"><span class="comment"># 数据库密码</span></span><br><span class="line">password=123456</span><br><span class="line"><span class="comment"># 要备份的数据库名称</span></span><br><span class="line">database_name=my-database</span><br><span class="line"><span class="comment"># 保存备份个数，备份30天数据</span></span><br><span class="line">number=30</span><br><span class="line"><span class="comment"># 日期格式</span></span><br><span class="line">day=`date +%Y%m%d`</span><br><span class="line"><span class="comment"># 备份保存路径</span></span><br><span class="line">backup_dir=/mnt/mysqldump/<span class="variable">$day</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果文件夹不存在则创建</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$backup_dir</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    mkdir -p <span class="variable">$backup_dir</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单写法 mysqldump -uroot -p123456 my-database &gt; /mnt/my-database.sql</span></span><br><span class="line">mysqldump -u<span class="variable">$username</span> -p<span class="variable">$password</span> <span class="variable">$database_name</span> &gt; <span class="variable">$backup_dir</span>/<span class="variable">$database_name</span>.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写创建备份日志</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"create <span class="variable">$backup_dir</span>/<span class="variable">$database_name</span>.dump"</span> &gt;&gt; <span class="variable">$backup_dir</span>/log.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除超期的备份</span></span><br><span class="line">delfile=`ls -l -crt <span class="variable">$backup_dir</span>/*.sql | awk <span class="string">'&#123;print $9 &#125;'</span> | head -1`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断现在的备份数量是否大于 $number</span></span><br><span class="line">count=`ls -l -crt <span class="variable">$backup_dir</span>/*.sql | awk <span class="string">'&#123;print $9 &#125;'</span> | wc -l`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$count</span> -gt <span class="variable">$number</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="comment"># 删除更早生成的备份，只保留 $number 数量的备份</span></span><br><span class="line">  rm <span class="variable">$delfile</span></span><br><span class="line">  <span class="comment"># 写删除文件日志</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"delete <span class="variable">$delfile</span>"</span> &gt;&gt; <span class="variable">$backup_dir</span>/log.txt</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>  上述脚本仅需关注 <code>username</code>、<code>password</code>、<code>database_name</code>、<code>number</code> 等变量；通过 ls 命令获取第 9 列（文件名列），再通过实现定义操作时间最晚的那个需要删除的文件。</p>
<blockquote>
<p><strong>注意</strong><br>
　　执行命令可能提示 <code>You have new mail.</code>，输入 <code>mail</code> 查看 crontab 返回的信息，输入数字查看对应的信息</p>
</blockquote>
<p>  <code>mail</code> 交互式界面中的常用命令：</p>
<ul>
<li><code>n</code> 查看下一封邮件</li>
<li><code>p</code> 查看上一封邮件</li>
<li><code>d 1 2</code> 按编号删除邮件，不填编号时删除当前邮件</li>
<li><code>d *</code> 删除所有邮件</li>
<li><code>u 1 2</code> 按编号恢复删除的邮件</li>
<li><code>q</code> 退出 mail 界面</li>
<li><code>h</code> 显示邮件列表的头部信息，包括邮件的发件人、主题等</li>
<li><code>?</code> 显示帮助信息</li>
</ul>
<p><img src="https://images-hosting.liuxianyu.cn/posts/linux-crontab/1.png" alt></p>
<p>  给脚本文件授权，否则会在 mail 中看到 <code>Permission denied</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /mnt/mysqldump/*.sh</span><br></pre></td></tr></table></figure>
<h3 id="crontab"><a class="header-anchor" href="#crontab">¶</a>crontab</h3>
<p>  cron 读取一个或多个配置文件，这些配置文件中包含了命令行及其调用时间。cron 的配置文件称为 <code>crontab</code>，是 <code>cron table</code> 的简写。</p>
<h4 id="crontab-语法"><a class="header-anchor" href="#crontab-语法">¶</a>crontab 语法</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        minute  hour   day-of-month  month-of-year  day-of-week commands</span><br><span class="line">合法值   00-59  00-23      01-31          01-12         0-6     (0 is sunday)</span><br></pre></td></tr></table></figure>
<p>  除了数字还有几个个特殊的符号就是 <code>*</code> <code>/</code> 和 <code>-</code> <code>,</code>，<code>*</code> 代表所有的取值范围内的数字，<code>/</code> 代表每的意思，<code>/5</code> 表示每 5 个单位，<code>-</code> 代表从某个数字到某个数字，<code>,</code> 分开几个离散的数字。</p>
<h4 id="添加-cron-定时任务"><a class="header-anchor" href="#添加-cron-定时任务">¶</a>添加 cron 定时任务</h4>
<p>  <code>crontab -e</code> 编辑任务文件，添加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">50 23 * * * /mnt/mysqldump/my-database.sh</span><br></pre></td></tr></table></figure>
<p>  可以使用 <code>crontab -l</code> 查看任务是否已添加成功。</p>
<h3 id="docker-版"><a class="header-anchor" href="#docker-版">¶</a>docker 版</h3>
<p>  当通过 docker 安装 MySQL 时，也可以进行备份，比常规版新增了 <code>container_name</code>、<code>container_tmp_dir</code> 参数，需要注意 <code>container_name</code> 的值。使用下方脚本：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库用户名</span></span><br><span class="line">username=root</span><br><span class="line"><span class="comment"># 数据库密码</span></span><br><span class="line">password=123456</span><br><span class="line"><span class="comment"># 要备份的数据库名称</span></span><br><span class="line">database_name=my-database</span><br><span class="line"><span class="comment"># docker 容器名</span></span><br><span class="line">container_name=mysql-5.7</span><br><span class="line"><span class="comment"># 容器内临时存放的路径</span></span><br><span class="line">container_tmp_dir=/tmp</span><br><span class="line"><span class="comment"># 保存备份个数，备份30天数据</span></span><br><span class="line">number=30</span><br><span class="line"><span class="comment"># 日期格式</span></span><br><span class="line">day=`date +%Y%m%d`</span><br><span class="line"><span class="comment"># 宿主机备份保存路径</span></span><br><span class="line">backup_dir=/mnt/mysqldump/<span class="variable">$day</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果文件夹不存在则创建</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$backup_dir</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    mkdir -p <span class="variable">$backup_dir</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">container_sql_path=<span class="variable">$container_tmp_dir</span>/<span class="variable">$database_name</span>.sql</span><br><span class="line"><span class="comment"># docker exec mysql-5.7 bash -c "mysqldump -uroot -pMysql..1234 $database_name &gt; /tmp/my-database.sql"</span></span><br><span class="line">docker <span class="built_in">exec</span> <span class="variable">$container_name</span> bash -c <span class="string">"mysqldump -u<span class="variable">$username</span> -p<span class="variable">$password</span> <span class="variable">$database_name</span> &gt; <span class="variable">$container_sql_path</span>"</span></span><br><span class="line"><span class="comment"># 将容器内的文件挪到宿主机</span></span><br><span class="line">docker cp <span class="variable">$container_name</span>:<span class="variable">$container_sql_path</span> <span class="variable">$backup_dir</span></span><br><span class="line"><span class="comment"># 删除容器内的临时文件</span></span><br><span class="line">docker <span class="built_in">exec</span> <span class="variable">$container_name</span> rm -rf <span class="variable">$container_sql_path</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写创建备份日志</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"create <span class="variable">$backup_dir</span>/<span class="variable">$database_name</span>-<span class="variable">$dd</span>.dump"</span> &gt;&gt; <span class="variable">$backup_dir</span>/log.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除超期的备份</span></span><br><span class="line">delfile=`ls -l -crt <span class="variable">$backup_dir</span>/*.sql | awk <span class="string">'&#123;print $9 &#125;'</span> | head -1`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断现在的备份数量是否大于 $number</span></span><br><span class="line">count=`ls -l -crt <span class="variable">$backup_dir</span>/*.sql | awk <span class="string">'&#123;print $9 &#125;'</span> | wc -l`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$count</span> -gt <span class="variable">$number</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="comment"># 删除更早生成的备份，只保留 $number 数量的备份</span></span><br><span class="line">  rm <span class="variable">$delfile</span></span><br><span class="line">  <span class="comment"># 写删除文件日志</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"delete <span class="variable">$delfile</span>"</span> &gt;&gt; <span class="variable">$backup_dir</span>/log.txt</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h3 id="参考资料："><a class="header-anchor" href="#参考资料：">¶</a>参考资料：</h3>
<p>  <a href="https://segmentfault.com/a/1190000040642688#item-4" target="_black">编写BASH维护固定数量备份文件</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 备份 —— 导出导入 sql 文件</title>
    <url>/article/mysqldump.html</url>
    <content><![CDATA[<p>  最近在学习 MySQL 的备份和恢复，我的实际应用场景是正式服数据同步到测试服用于测试、备份生产环境的数据库。</p>
<a id="more"></a>
<p>  我的 MySQL 是通过 docker 安装的，非容器的可以执行双引号中的命令；可以通过 <code>ls -lhS</code> 命令在目录下查看是否已存在文件。下方实例中的 <code>123456</code> 为数据库密码，<code>my-database</code> 是数据库名。</p>
<h3 id="一-数据备份"><a class="header-anchor" href="#一-数据备份">¶</a>一、数据备份</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec mysql-5.7-backup bash -c "mysqldump -uroot -p123456 my-database &gt; /tmp/my-database.sql"</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong><br>
　　<code>-p</code> 后面跟密码，加空格会被识别为 database；也可以不跟密码，回车后输入密码</p>
</blockquote>
<p>  导出后的文件还在 docker 容器中，可以通过 <code>docker cp</code> 命令将备份的 sql 文件拷贝到宿主机，便于后面在其他 docker 容器内使用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp mysql-5.7:/tmp/my-database.sql /opt/</span><br></pre></td></tr></table></figure>
<p>  同时备份多个数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec mysql-5.7-backup bash -c "mysqldump -uroot -p123456 --databases dbname2 dbname2 &gt; Backup.sql"</span><br></pre></td></tr></table></figure>
<h3 id="二-数据还原"><a class="header-anchor" href="#二-数据还原">¶</a>二、数据还原</h3>
<p>  还原使用 <code>mysqldump</code> 命令备份的数据库，先将导出的 sql 文件通过 <code>docker cp</code> 命令拷贝到备份的 mysql 容器内。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp /opt/my-database.sql mysql-5.7-backup:/tmp/</span><br></pre></td></tr></table></figure>
<p>  再进行导入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec mysql-5.7-backup bash -c "mysql -uroot -p123456 my-database &lt; /tmp/my-database.sql"</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 包相关命令</title>
    <url>/article/npm-commands.html</url>
    <content><![CDATA[<p>  整理下 <code>npm</code> 包相关的一些命令，主要包括 <code>npm</code>、<code>yarn</code>、<code>pnpm</code>。</p>
<a id="more"></a>
<h3 id="一-npm"><a class="header-anchor" href="#一-npm">¶</a>一、npm</h3>
<h4 id="npm-publish"><a class="header-anchor" href="#npm-publish">¶</a>npm publish</h4>
<p>  可以通过 `nrm`` 管理源，方便切换。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm whoami</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure>
<p>  npm 包可以带上 tag 标识</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm publish --tag=beta</span><br></pre></td></tr></table></figure>
<p>  当发布私有包（如 <code>@liuxy0551/dt-sql-parser</code>）时，npm 会要求付费，报错：<code>You must sign up for private package</code>，此时需要带上 <code>--access public</code> 标识</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm publish --tag=beta --access public</span><br></pre></td></tr></table></figure>
<p>  npm 包版本切换 tag</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm dist-tag add my-package-demo@1.0.0 latest</span><br></pre></td></tr></table></figure>
<p>  npm 包撤销某个版本，仅在发布 24 小时内有效，撤销后该版本不可再用。如果非必须撤销，可以考虑废弃该版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm unpublish my-package-demo@1.0.0</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm deprecate my-package-demo@1.0.0 'This version is deprecated. Please upgrade to later.'</span><br></pre></td></tr></table></figure>
<p>  npm 撤销某个包，也可以废弃某个包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm unpublish my-package-demo -f</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm deprecate my-package-demo 'This version is deprecated. Please use other packages to instead.'</span><br></pre></td></tr></table></figure>
<h4 id="npm-link"><a class="header-anchor" href="#npm-link">¶</a>npm link</h4>
<p>  被依赖的包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm link</span><br></pre></td></tr></table></figure>
<p>  使用依赖的包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm link my-package-demo</span><br></pre></td></tr></table></figure>
<p>  去除依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm unlink</span><br></pre></td></tr></table></figure>
<p>  发布后的包可以同步到淘宝源，建议页面上点击 <code>进行同步</code> 按钮：<code>https://npmmirror.com/package/my-package-demo</code></p>
<h3 id="yarn"><a class="header-anchor" href="#yarn">¶</a>yarn</h3>
<p>  待补充</p>
<h3 id="pnpm"><a class="header-anchor" href="#pnpm">¶</a>pnpm</h3>
<h4 id="pnpm-link"><a class="header-anchor" href="#pnpm-link">¶</a>pnpm link</h4>
<p>  被依赖的包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pnpm link --global</span><br></pre></td></tr></table></figure>
<p>  使用依赖的包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pnpm link --global my-package-demo</span><br></pre></td></tr></table></figure>
<p>  去除依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pnpm unlink</span><br></pre></td></tr></table></figure>
<p><a href="https://pnpm.io/zh/cli/link" target="_blank" rel="noopener">官方文档</a></p>
<blockquote>
<p><strong>注意</strong><br>
　　如果使用的是 clashx pro，出现连接不上 npm 官方源时可以打开增强模式，如果本地联调中，记得开关增强模式前后重启联调服务</p>
</blockquote>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>在服务器上自建图床</title>
    <url>/article/images-hosting.html</url>
    <content><![CDATA[<p>  至此，博客的图片资源已经经历 github -&gt; 阿里云服务器(1M 带宽) -&gt; 七牛云 -&gt; gitee -&gt; 腾讯云服务器(4M 带宽)，一直没有一个稳定的方案，上一次使用的还是 Gitee 图床，可以点击 <a href="https://liuxianyu.cn/article/gitee-image-hosting.html" target="_black">Gitee 图床【已不可用】</a> 查看当时的过程。</p>
<a id="more"></a>
<p>  接下来通过把图片等静态资源放到服务器上，再通过 nginx 转发 + 域名生成固定格式的图片链接，记录下过程。</p>
<h4 id="1-解析域名"><a class="header-anchor" href="#1-解析域名">¶</a>1、解析域名</h4>
<p>  在对应的服务器控制台解析域名，我这里使用的是 <code>images-hosting.liuxianyu.cn</code>。</p>
<h4 id="2-申请并下载-ssl-证书"><a class="header-anchor" href="#2-申请并下载-ssl-证书">¶</a>2、申请并下载 SSL 证书</h4>
<p>  因为博客使用的是 <code>https</code>，所以需要申请一个 SSL 证书，我的域名是在阿里云购买的，每年赠送 20个 免费的证书。申请完成后下载 Nginx 版本的 SSL 证书，重命名并放到服务器指定路径下。</p>
<h4 id="3-服务器创建文件夹"><a class="header-anchor" href="#3-服务器创建文件夹">¶</a>3、服务器创建文件夹</h4>
<p>  需要进行的操作：创建 deploy 用户、添加本机的 SSH 公钥到服务器、创建文件夹等</p>
<ul>
<li>
<p>创建 deploy 用户并设置密码，把 deploy 用户添加到 sudo 用户组中 - 参考 <a href="https://liuxianyu.cn/article/cent-os-base.html#%E4%BA%8C-%E6%B7%BB%E5%8A%A0%E6%9C%AC%E6%9C%BA%E7%9A%84-ssh-%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8">Cent OS 基础环境搭建 - 添加 deploy 用户</a></p>
</li>
<li>
<p>添加本机的 SSH 公钥到服务器 - 参考 <a href="https://liuxianyu.cn/article/cent-os-base.html#%E4%BA%8C-%E6%B7%BB%E5%8A%A0%E6%9C%AC%E6%9C%BA%E7%9A%84-ssh-%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8">Cent OS 基础环境搭建 - 添加本机的 SSH 到服务器</a></p>
</li>
<li>
<p>在服务器上新建一个 <code>images-hosting</code> 文件夹，用来存储图片等静态资源，并授权给 deploy 用户。</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /mnt/projects/images-hosting</span><br><span class="line">cd /mnt/projects/</span><br><span class="line">sudo chown -R deploy:deploy images-hosting</span><br></pre></td></tr></table></figure>
<h4 id="4-本地环境变量"><a class="header-anchor" href="#4-本地环境变量">¶</a>4、本地环境变量</h4>
<p>  在本地添加远程服务器的环境变量，避免服务器 IP 暴露在公网。<code>vim ~/.zshrc</code> 添加以下内容后执行 <code>source ~/.zshrc</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 腾讯云服务器</span><br><span class="line">export tencent=&quot;43.139.139.139&quot;</span><br></pre></td></tr></table></figure>
<h4 id="5-本地图床仓库"><a class="header-anchor" href="#5-本地图床仓库">¶</a>5、本地图床仓库</h4>
<p>  在 gitee 新建了一个仓库用来做备份，但是由于包含图床内容，gitee 不允许公开仓库。在本地图床仓库中添加 <code>deploy.command</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo -e &apos;1、本地压缩资源中...&apos;</span><br><span class="line">gtar -czf images-hosting.tar.gz *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo -e &apos;2、上传压缩包到远程服务器&apos;</span><br><span class="line">scp -P 22 -r images-hosting.tar.gz deploy@$tencent:/mnt/projects/images-hosting/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo -e &apos;3、在远程服务器解压中...&apos;</span><br><span class="line">ssh deploy@$tencent &quot;cd /mnt/projects/images-hosting/; tar -xzf images-hosting.tar.gz; rm -rf images-hosting.tar.gz; ls&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo -e &apos;4、删除本地压缩包&apos;</span><br><span class="line">rm -rf images-hosting.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo -e &apos;\n资源已经成功上传到远程服务器啦~&apos;</span><br></pre></td></tr></table></figure>
<p>  在本地图床仓库中添加 <code>package.json</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;images-hosting&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;在服务器上自建图床 https://liuxianyu.cn/article/images-hosting.html&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;deploy&quot;: &quot;bash deploy.command&quot;,</span><br><span class="line">    &quot;push&quot;: &quot;git add . &amp;&amp; git commit -m &apos;new images&apos; &amp;&amp; git push&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行 <code>npm run deploy</code> 可将本地图床仓库中的图片等静态资源上传到远程服务器指定的地址了。<br>
执行 <code>npm run push</code> 可以提交到远程 git 仓库。</p>
<h4 id="6-配置-nginx"><a class="header-anchor" href="#6-配置-nginx">¶</a>6、配置 nginx</h4>
<p>  配置完成后重启 nginx。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># images-hosting 的 nginx 配置</span><br><span class="line"># http</span><br><span class="line">#server &#123;</span><br><span class="line">#    listen          80;</span><br><span class="line">#    server_name     images-hosting.liuxianyu.cn;</span><br><span class="line">#    root            /mnt/projects/images-hosting;</span><br><span class="line">#</span><br><span class="line">#    location / &#123;</span><br><span class="line">#        try_files $uri $uri/ /index.html;</span><br><span class="line">#    &#125;</span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line"># https</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  images-hosting.liuxianyu.cn;</span><br><span class="line">    root         /mnt/projects/images-hosting;</span><br><span class="line">    ssl_certificate cert/images-hosting.liuxianyu.cn.pem;</span><br><span class="line">    ssl_certificate_key cert/images-hosting.liuxianyu.cn.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>图片资源可以访问啦</strong><br>
<img src="https://images-hosting.liuxianyu.cn/comment-bg.png" alt></p>
<h4 id="7-替换博客原有的链接地址"><a class="header-anchor" href="#7-替换博客原有的链接地址">¶</a>7、替换博客原有的链接地址</h4>
<p>  全局替换 <code>https://gitee.com/liuxy0551/image-hosting/</code> -&gt; <code>https://images-hosting.liuxianyu.cn/</code>，重新部署博客即可恢复图片资源的访问啦。</p>
<h4 id="8-缺点"><a class="header-anchor" href="#8-缺点">¶</a>8、缺点</h4>
<ul>
<li>每次都是上传全量资源，耗时较长</li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 最小化安装</title>
    <url>/article/centos7-minimal.html</url>
    <content><![CDATA[<p>  记录一下将闲置电脑改造成远程服务器的过程。记录一下将闲置电脑改造成远程服务器的过程。</p>
<a id="more"></a>
<h3 id="连接网络"><a class="header-anchor" href="#连接网络">¶</a>连接网络</h3>
<p>  开机后登录，输入以下命令测试网络情况，会报错：<code>Name or service not know</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure>
<h4 id="有线网络"><a class="header-anchor" href="#有线网络">¶</a>有线网络</h4>
<p>  建议笔记本电脑使用下方 <code>WiFi 设置的第一种方案</code> 先连上网络。</p>
<p>  **请插上网线，执行 <code>reboot</code> 命令重启设备。**执行以下命令查看网卡状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmcli d</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/centos7-minimal/1.png" alt></p>
<p>  一般会显示已经连接上网络，此时执行 <code>ip addr</code> 或 <code>ip route</code> 命令查看 IP 地址：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/centos7-minimal/2.png" alt></p>
<h4 id="wifi"><a class="header-anchor" href="#wifi">¶</a>WiFi</h4>
<p>  后续会通过 WIFI 连接网络，输入以下命令连接 WiFi：</p>
<h5 id="第一种-不推荐"><a class="header-anchor" href="#第一种-不推荐">¶</a>第一种（不推荐）</h5>
<p>  以下命令重启设备时不会主动再次连接 WiFi，建议仅在初次使用时进行联网，联网后按照第二种方案设置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip link set wlp2s0 up</span><br><span class="line">wpa_supplicant -B -i wlp2s0 -c &lt;(wpa_passphrase your_wifi_name your_wifi_password)</span><br><span class="line">dhclient wlp2s0</span><br></pre></td></tr></table></figure>
<p>  <code>wlp2s0</code> 是上述 <code>nmcli d</code> 命令查询出来的 WiFi 网卡名称，完成后 ping 网络测试。</p>
<h5 id="第二种-推荐"><a class="header-anchor" href="#第二种-推荐">¶</a>第二种（推荐）</h5>
<p>  输入以下命令连接 WiFi：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmcli --ask dev wifi connect your_wifi_name password your_wifi_password</span><br></pre></td></tr></table></figure>
<p>  会报错：<code>No Wi-Fi device found</code>，执行 <code>yum install NetworkManager-wifi -y</code> 后执行 <code>reboot</code> 命令重启设备。</p>
<p>  然后再执行上述命令即可连接成功，查看 WIFI 自动分配的局域网 IP，可以通过 SSH 工具连接设备了（如果连不上可以重启下设备）。</p>
<h3 id="忽略合盖-电源键"><a class="header-anchor" href="#忽略合盖-电源键">¶</a>忽略合盖、电源键</h3>
<p>  闲置设备可能是笔记本，此时忽略笔记本的合盖休眠很有必要，同时将电源键忽略。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/logind.conf</span><br></pre></td></tr></table></figure>
<p>  将其中的 <code>HandlePowerKey</code> 的值改为 <code>ignore</code>，<code>HandleLidSwitch</code> 的值改为 <code>lock</code> 并去除两者最前方的 <code>#</code> 注释。</p>
<p>  执行 <code>reboot</code> 命令重启生效，这样就可以忽略电源键，并且合盖时仅锁屏，设备不会休眠。</p>
<h3 id="常用工具"><a class="header-anchor" href="#常用工具">¶</a>常用工具</h3>
<p><a href="https://liuxianyu.cn/article/cent-os-base.html">Cent OS 基础环境搭建 | 刘先玉</a></p>
<h4 id="更新所有包"><a class="header-anchor" href="#更新所有包">¶</a>更新所有包</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum update -y</span><br></pre></td></tr></table></figure>
<h4 id="ifconfig"><a class="header-anchor" href="#ifconfig">¶</a>ifconfig</h4>
<p>  执行 <code>yum search ifconfig</code>，然后安装查询到的结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install net-tools.x86_64 -y</span><br></pre></td></tr></table></figure>
<h4 id="其他常用工具"><a class="header-anchor" href="#其他常用工具">¶</a>其他常用工具</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install wget vim lsof -y</span><br></pre></td></tr></table></figure>
<h4 id="git"><a class="header-anchor" href="#git">¶</a>git</h4>
<p>  通过 yum 安装 git <code>yum install git -y</code>，版本会比较老（不推荐）。</p>
<p>  <strong>通过下载最新版的源文件并编译（推荐）</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /mnt</span><br><span class="line">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.44.0.tar.gz</span><br><span class="line">tar -zxvf git-2.44.0.tar.gz</span><br><span class="line">cd git-2.44.0</span><br><span class="line">yum install -y gcc-c++ curl-devel zlib-devel autoconf</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
<h3 id="查看电池状态"><a class="header-anchor" href="#查看电池状态">¶</a>查看电池状态</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install upower -y</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upower -i $(upower -e | grep BAT) | grep --color=never -E "state|to\ full|to\ empty|percentage"</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Cent OS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Cent OS</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 on-my-zsh 和常用插件，配置常用命令</title>
    <url>/article/on-my-zsh.html</url>
    <content><![CDATA[<p>  最近之前买的三年服务器到期了，新买了腾讯云的服务器，Cent OS 7.6，记录下安装<code>oh-my-zsh</code>及常用插件的过程，MacOS 通用。</p>
<a id="more"></a>
<h3 id="一-安装"><a class="header-anchor" href="#一-安装">¶</a>一、安装</h3>
<h4 id="1-查看当前-shell"><a class="header-anchor" href="#1-查看当前-shell">¶</a>1、查看当前 shell</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure>
<h4 id="2-安装-zsh"><a class="header-anchor" href="#2-安装-zsh">¶</a>2、安装 zsh</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install zsh -y</span><br></pre></td></tr></table></figure>
<h4 id="3-查看已经安装的-shell"><a class="header-anchor" href="#3-查看已经安装的-shell">¶</a>3、查看已经安装的 shell</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure>
<h4 id="4-切换-zsh"><a class="header-anchor" href="#4-切换-zsh">¶</a>4、切换 zsh</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>
<h4 id="5-安装-git"><a class="header-anchor" href="#5-安装-git">¶</a>5、安装 git</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install git -y</span><br></pre></td></tr></table></figure>
<h4 id="6-安装-oh-my-zsh"><a class="header-anchor" href="#6-安装-oh-my-zsh">¶</a>6、安装 oh-my-zsh</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</span><br></pre></td></tr></table></figure>
<p>  由于网络原因，上述命令可能无法执行，此时新建一个<code>install.sh</code>脚本文件，复制 <a href="https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh" target="_blank" rel="noopener">ohmyzsh/install.sh</a> 的内容，然后执行<code>bash install.sh</code>命令即可。</p>
<h3 id="二-配置"><a class="header-anchor" href="#二-配置">¶</a>二、配置</h3>
<h4 id="1-下载插件"><a class="header-anchor" href="#1-下载插件">¶</a>1、下载插件</h4>
<p>  <code>oh-my-zsh</code> 有很多的插件：<a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins" target="_blank" rel="noopener">plugins</a>，我常用的有 z、cp、zsh-autosuggestions、zsh-syntax-highlighting，它们的功能分别是跳转常用目录、cp 通过<code>rsync</code>命令提供带进度条的复制文件命令、自动提示、错误命令高亮。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting $ZSH_CUSTOM/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>
<p>  自带的插件：git、<a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/z" target="_blank" rel="noopener">z</a>、<a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/cp" target="_blank" rel="noopener">cp</a></p>
<blockquote>
<p>z 查看历史记录<br>
–add 添加目录到记录里<br>
-c 只查看当前目录<br>
-t 按最近使用的匹配</p>
</blockquote>
<blockquote>
<p>rsync<br>
-r 递归文件夹<br>
-h 显示常见的文件大小单位<br>
-P 显示进度条</p>
</blockquote>
<h4 id="2-编辑配置文件"><a class="header-anchor" href="#2-编辑配置文件">¶</a>2、编辑配置文件</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>  我常用的主题是 ys，日常配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export ZSH=&quot;$HOME/.oh-my-zsh&quot;</span><br><span class="line"></span><br><span class="line">ZSH_THEME=&quot;ys&quot;</span><br><span class="line">plugins=(git z cp zsh-autosuggestions zsh-syntax-highlighting)</span><br><span class="line"></span><br><span class="line">source $ZSH/oh-my-zsh.sh</span><br><span class="line">source ~/.bash_profile</span><br><span class="line"></span><br><span class="line"># node n 第三方镜像</span><br><span class="line">export N_NODE_MIRROR=https://npmmirror.com/mirrors/node</span><br><span class="line"></span><br><span class="line"># pnpm</span><br><span class="line">alias p=&quot;pnpm&quot;</span><br><span class="line"></span><br><span class="line"># 腾讯云服务器地址</span><br><span class="line">tencent=&quot;122.122.122.122&quot;</span><br><span class="line"></span><br><span class="line"># 删除当前目录的 node_modules</span><br><span class="line">alias remove=&quot;pwd; echo &apos;Deleting all node_modules in the current directory ...&apos;; find . -name &apos;node_modules&apos; -type d -prune -exec rm -rf &apos;&#123;&#125;&apos; +; echo &apos;Delete done!&apos;; &quot;</span><br></pre></td></tr></table></figure>
<p>  可能执行<code>source ~/.zshrc</code>后会报错：<code>/etc/bashrc &quot;command not found: shopt&quot;</code>，编辑<code>~/.bashrc</code>，将<code>. /etc/bashrc</code>替换成<code>bash -c &quot;. /etc/bashrc&quot;</code>，保存后退出，再次执行<code>source ~/.zshrc</code>即可。</p>
<h4 id="3-卸载-oh-my-zsh"><a class="header-anchor" href="#3-卸载-oh-my-zsh">¶</a>3、卸载 oh-my-zsh</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uninstall_oh_my_zsh</span><br></pre></td></tr></table></figure>
<h3 id="三-常用别名"><a class="header-anchor" href="#三-常用别名">¶</a>三、常用别名</h3>
<h4 id="1-查看电池状态"><a class="header-anchor" href="#1-查看电池状态">¶</a>1、查看电池状态</h4>
<p>  笔记本电脑安装了 CentOS 7.6，使用 <code>upower</code> 命令可以查看电池状态，这里配置一个 <code>power</code> 快捷命令，方便查看电池状态。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看笔记本电脑电量</span></span><br><span class="line">alias power='upower -i $(upower -e | grep BAT) | grep --color=never -E "state|to\ full|to\ empty|percentage"'</span><br></pre></td></tr></table></figure>
<h4 id="2-删除-node-modules"><a class="header-anchor" href="#2-删除-node-modules">¶</a>2、删除 node_modules</h4>
<p>  使用 Monorepo 架构后，工程内很多地方都有了 <code>node_modules</code> 文件夹，在不希望有缓存干扰调试时，快速清理所有 node_modules 是有必要的，可以借助 <code>npkill</code> 这类工具包，可以配置下方的命令，通过执行 <code>remove</code> 命令快速删除当前路径下所有 node_modules。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除当前目录的 node_modules</span></span><br><span class="line">alias remove="pwd; echo 'Deleting all node_modules in the current directory ...'; find . -name 'node_modules' -type d -prune -exec rm -rf '&#123;&#125;' +; echo 'Delete done!'; "</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -name 'node_modules' -type d -prune -exec rm -rf '&#123;&#125;' +</span><br></pre></td></tr></table></figure>
<ul>
<li><code>find .</code> 表示从当前目录（<code>.</code>）开始搜索</li>
<li><code>-name 'node_modules'</code> 表示搜索名为 <code>node_modules</code> 的文件或目录</li>
<li><code>-type d</code> 限定查找类型为目录 (<code>d</code>)</li>
<li><code>-prune</code> 跳过当前目录下的匹配项及其子目录。这意味着当 <code>find</code> 发现一个名为 <code>node_modules</code> 的目录时，不会再进入这个目录递归查找</li>
<li><code>-exec</code> 对匹配到的每一个文件或目录执行指定的命令</li>
<li><code>rm -rf</code> 递归强制删除文件或目录</li>
<li><code>{}</code> 代表当前匹配到的文件或目录</li>
<li><code>+</code> 表示以批处理方式执行命令，而不是对每个匹配项分别执行一次 <code>rm -rf</code>，这在有大量匹配项时可以提高效率</li>
</ul>
<h3 id="四-自定义主题"><a class="header-anchor" href="#四-自定义主题">¶</a>四、自定义主题</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/themes</span><br><span class="line">cp ys.zsh-theme ys1.zsh-theme</span><br><span class="line">vim ys1.zsh-theme</span><br></pre></td></tr></table></figure>
<p>  进入 <code>~/.oh-my-zsh/themes</code> 目录，以 <code>ys</code> 主题为模板复制一个自定义的主题文件，暂且命名为 <code>ys1</code>，文件名以<code>.zsh-theme</code>结尾，内容如下：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/on-my-zsh/1.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Clean, simple, compatible and meaningful.</span><br><span class="line"># Tested on Linux, Unix and Windows under ANSI colors.</span><br><span class="line"># It is recommended to use with a dark background.</span><br><span class="line"># Colors: black, red, green, yellow, *blue, magenta, cyan, and white.</span><br><span class="line">#</span><br><span class="line"># Mar 2013 Yad Smood</span><br><span class="line"></span><br><span class="line"># VCS</span><br><span class="line">YS_VCS_PROMPT_PREFIX1=&quot; %&#123;$reset_color%&#125;on%&#123;$fg[blue]%&#125; &quot;</span><br><span class="line">YS_VCS_PROMPT_PREFIX2=&quot;:%&#123;$fg[cyan]%&#125;&quot;</span><br><span class="line">YS_VCS_PROMPT_SUFFIX=&quot;%&#123;$reset_color%&#125;&quot;</span><br><span class="line">YS_VCS_PROMPT_DIRTY=&quot; %&#123;$fg[red]%&#125;x&quot;</span><br><span class="line"># YS_VCS_PROMPT_CLEAN=&quot; %&#123;$fg[green]%&#125;o&quot;</span><br><span class="line">YS_VCS_PROMPT_CLEAN=&quot;&quot;</span><br><span class="line"></span><br><span class="line"># node version</span><br><span class="line">local node_info=&apos;$(ys_node_prompt_info)&apos;</span><br><span class="line">ys_node_prompt_info() &#123;</span><br><span class="line">	if command -v node &amp;&gt;/dev/null; then</span><br><span class="line">		echo &quot; %&#123;$fg[green]%&#125;$(node -v)&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Git info</span><br><span class="line">local git_info=&apos;$(git_prompt_info)&apos;</span><br><span class="line">ZSH_THEME_GIT_PROMPT_PREFIX=&quot;$&#123;YS_VCS_PROMPT_PREFIX1&#125;%&#123;$fg[cyan]%&#125;&quot;</span><br><span class="line">ZSH_THEME_GIT_PROMPT_SUFFIX=&quot;$YS_VCS_PROMPT_SUFFIX&quot;</span><br><span class="line">ZSH_THEME_GIT_PROMPT_DIRTY=&quot;$YS_VCS_PROMPT_DIRTY&quot;</span><br><span class="line">ZSH_THEME_GIT_PROMPT_CLEAN=&quot;$YS_VCS_PROMPT_CLEAN&quot;</span><br><span class="line"></span><br><span class="line"># SVN info</span><br><span class="line">local svn_info=&apos;$(svn_prompt_info)&apos;</span><br><span class="line">ZSH_THEME_SVN_PROMPT_PREFIX=&quot;$&#123;YS_VCS_PROMPT_PREFIX1&#125;svn$&#123;YS_VCS_PROMPT_PREFIX2&#125;&quot;</span><br><span class="line">ZSH_THEME_SVN_PROMPT_SUFFIX=&quot;$YS_VCS_PROMPT_SUFFIX&quot;</span><br><span class="line">ZSH_THEME_SVN_PROMPT_DIRTY=&quot;$YS_VCS_PROMPT_DIRTY&quot;</span><br><span class="line">ZSH_THEME_SVN_PROMPT_CLEAN=&quot;$YS_VCS_PROMPT_CLEAN&quot;</span><br><span class="line"></span><br><span class="line"># HG info</span><br><span class="line">local hg_info=&apos;$(ys_hg_prompt_info)&apos;</span><br><span class="line">ys_hg_prompt_info() &#123;</span><br><span class="line">	# make sure this is a hg dir</span><br><span class="line">	if [ -d &apos;.hg&apos; ]; then</span><br><span class="line">		echo -n &quot;$&#123;YS_VCS_PROMPT_PREFIX1&#125;hg$&#123;YS_VCS_PROMPT_PREFIX2&#125;&quot;</span><br><span class="line">		echo -n $(hg branch 2&gt;/dev/null)</span><br><span class="line">		if [[ &quot;$(hg config oh-my-zsh.hide-dirty 2&gt;/dev/null)&quot; != &quot;1&quot; ]]; then</span><br><span class="line">			if [ -n &quot;$(hg status 2&gt;/dev/null)&quot; ]; then</span><br><span class="line">				echo -n &quot;$YS_VCS_PROMPT_DIRTY&quot;</span><br><span class="line">			else</span><br><span class="line">				echo -n &quot;$YS_VCS_PROMPT_CLEAN&quot;</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line">		echo -n &quot;$YS_VCS_PROMPT_SUFFIX&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Virtualenv</span><br><span class="line">local venv_info=&apos;$(virtenv_prompt)&apos;</span><br><span class="line">YS_THEME_VIRTUALENV_PROMPT_PREFIX=&quot; %&#123;$fg[green]%&#125;&quot;</span><br><span class="line">YS_THEME_VIRTUALENV_PROMPT_SUFFIX=&quot; %&#123;$reset_color%&#125;%&quot;</span><br><span class="line">virtenv_prompt() &#123;</span><br><span class="line">	[[ -n &quot;$&#123;VIRTUAL_ENV:-&#125;&quot; ]] || return</span><br><span class="line">	echo &quot;$&#123;YS_THEME_VIRTUALENV_PROMPT_PREFIX&#125;$&#123;VIRTUAL_ENV:t&#125;$&#123;YS_THEME_VIRTUALENV_PROMPT_SUFFIX&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">local time=&quot; %&#123;$reset_color%&#125;[%*]&quot;</span><br><span class="line">local exit_code=&quot;%(?,,C:%&#123;$fg[red]%&#125;%?%&#123;$reset_color%&#125;)&quot;</span><br><span class="line"></span><br><span class="line"># Prompt format:</span><br><span class="line">#</span><br><span class="line"># PRIVILEGES USER @ MACHINE in DIRECTORY on git:BRANCH STATE [TIME] C:LAST_EXIT_CODE</span><br><span class="line"># $ COMMAND</span><br><span class="line">#</span><br><span class="line"># For example:</span><br><span class="line">#</span><br><span class="line"># % ys @ ys-mbp in ~/.oh-my-zsh on git:master x [21:47:42] C:0</span><br><span class="line"># $</span><br><span class="line">PROMPT=&quot;</span><br><span class="line">%&#123;$terminfo[bold]$fg[blue]%&#125;#%&#123;$reset_color%&#125; \</span><br><span class="line">%(#,%&#123;$bg[yellow]%&#125;%&#123;$fg[black]%&#125;%n%&#123;$reset_color%&#125;,%&#123;$fg[cyan]%&#125;%n) \</span><br><span class="line">%&#123;$reset_color%&#125;@ \</span><br><span class="line">%&#123;$fg[green]%&#125;%m \</span><br><span class="line">%&#123;$reset_color%&#125;in \</span><br><span class="line">%&#123;$terminfo[bold]$fg[yellow]%&#125;%~%&#123;$reset_color%&#125;\</span><br><span class="line">$&#123;hg_info&#125;\</span><br><span class="line">$&#123;git_info&#125;\</span><br><span class="line">$&#123;svn_info&#125;\</span><br><span class="line">$&#123;venv_info&#125;\</span><br><span class="line">$&#123;node_info&#125;\</span><br><span class="line">$&#123;time&#125;\</span><br><span class="line"> \</span><br><span class="line">$exit_code</span><br><span class="line">%&#123;$terminfo[bold]$fg[red]%&#125;$ %&#123;$reset_color%&#125;&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习 Docker 之旅（七）—— Docker 中安装 MongoDB</title>
    <url>/article/docker-f.html</url>
    <content><![CDATA[<p>  最近在公司中，有个项目需要用到数据库，选择了尝试下 MongoDB，记录下在 Docker 中安装 MongoDB 的过程。</p>
<a id="more"></a>
<h3 id="一-安装-mongodb"><a class="header-anchor" href="#一-安装-mongodb">¶</a>一、安装 MongoDB</h3>
<h4 id="1-查找镜像"><a class="header-anchor" href="#1-查找镜像">¶</a>1、查找镜像</h4>
<p>  在 Docker Hub 官网查找自己需要的版本 <a href="https://hub.docker.com/_/mongo?tab=tags" target="_blank" rel="noopener">https://hub.docker.com/_/mongo?tab=tags</a></p>
<h4 id="2-下载镜像"><a class="header-anchor" href="#2-下载镜像">¶</a>2、下载镜像</h4>
<p>  我选择的是 6.0.2：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mongo:6.0.2</span><br></pre></td></tr></table></figure>
<h4 id="3-创建挂载文件夹"><a class="header-anchor" href="#3-创建挂载文件夹">¶</a>3、创建挂载文件夹</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /mnt/docker/mongo</span><br><span class="line">cd /mnt/docker/mongo</span><br></pre></td></tr></table></figure>
<h3 id="二-运行-mongodb"><a class="header-anchor" href="#二-运行-mongodb">¶</a>二、运行 MongoDB</h3>
<h4 id="1-使用镜像创建容器并运行"><a class="header-anchor" href="#1-使用镜像创建容器并运行">¶</a>1、使用镜像创建容器并运行</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -v /mnt/docker/mongo:/data/db --name mongodb -p 27019:27017 -e MONGO_INITDB_ROOT_USERNAME=root -e MONGO_INITDB_ROOT_PASSWORD='123456' -d mongo:6.0.2 --auth</span><br></pre></td></tr></table></figure>
<p>指令解释：</p>
<ul>
<li><code>-v</code> 挂载本地文件夹，存储数据</li>
<li><code>--name</code> 表示给容器指定的名称</li>
<li><code>-p</code> 表示端口映射，<code>-p 宿主机port:容器port</code>，这里不使用相同端口是为了防止攻击</li>
<li><code>-e</code> 携带密码等参数</li>
<li><code>-d</code> 表示后台启动</li>
<li><code>--auth</code> MongoDB 进行权限校验</li>
</ul>
<h4 id="2-进入容器"><a class="header-anchor" href="#2-进入容器">¶</a>2、进入容器</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mongodb mongosh admin</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong><br>
使用 <code>docker exec -it mongodb mongo admin</code> 可能如果出现以下报错，mongodb 5.0 以上的版本需要使用<code>mongosh</code>来代替<code>mongo</code><br>
rpc error: code = 2 desc = oci runtime error: exec failed: container_linux.go:235: starting container process caused “exec: “mongo”: executable file not found in $PATH”</p>
</blockquote>
<h4 id="3-验证用户名密码登录"><a class="header-anchor" href="#3-验证用户名密码登录">¶</a>3、验证用户名密码登录</h4>
<p>  返回 1 代表登录成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.auth('root', '123456')</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/docker-f/1.png" alt></p>
<h4 id="4-使用数据库"><a class="header-anchor" href="#4-使用数据库">¶</a>4、使用数据库</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use landingDB</span><br></pre></td></tr></table></figure>
<h4 id="5-创建数据库的管理员"><a class="header-anchor" href="#5-创建数据库的管理员">¶</a>5、创建数据库的管理员</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.createUser(&#123; user: "landing-user", pwd: "landing-admin.1234", roles: [&#123; role: "readWrite", db: "landingDB" &#125;] &#125;)</span><br></pre></td></tr></table></figure>
<p>  MongoDB 不允许同一窗口有多个用户登录，退出再次进入终端：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use landingDB</span><br><span class="line">db.auth('landing-user', 'landing-admin.1234')</span><br></pre></td></tr></table></figure>
<h4 id="6-创建表"><a class="header-anchor" href="#6-创建表">¶</a>6、创建表</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.createCollection('article')</span><br><span class="line">db.createCollection('tag')</span><br></pre></td></tr></table></figure>
<h4 id="7-测试插入数据"><a class="header-anchor" href="#7-测试插入数据">¶</a>7、测试插入数据</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.article.insert(&#123; id: 1, title: '测试文章标题' &#125;)</span><br></pre></td></tr></table></figure>
<h4 id="8-通过-mongodb-compass-连接数据库"><a class="header-anchor" href="#8-通过-mongodb-compass-连接数据库">¶</a>8、通过 MongoDB Compass 连接数据库</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongodb://landing-user:landing-admin.1234@127.0.0.1:27019/landingDB</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/docker-f/2.png" alt><br>
<img src="https://images-hosting.liuxianyu.cn/posts/docker-f/3.png" alt></p>
<h3 id="三-在-node-中使用"><a class="header-anchor" href="#三-在-node-中使用">¶</a>三、在 node 中使用</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; MongoClient &#125; = <span class="built_in">require</span>(<span class="string">'mongodb'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; host, port, dbName, username, password &#125; = configObj</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">`mongodb://<span class="subst">$&#123;username&#125;</span>:<span class="subst">$&#123;password&#125;</span>@<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>/<span class="subst">$&#123;dbName&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> MongoClient(url)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化数据库链接</span></span><br><span class="line"><span class="keyword">const</span> initDB = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> client.connect()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Connected successfully to mongodb'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增查询到的标签列表</span></span><br><span class="line"><span class="keyword">const</span> insertTags = <span class="keyword">async</span> (tagList) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> db = client.db(dbName)</span><br><span class="line">    <span class="keyword">const</span> collection = db.collection(<span class="string">'tag'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> updateResult = <span class="keyword">await</span> collection.updateMany(&#123; <span class="attr">isDelete</span>: <span class="number">0</span> &#125;, &#123; <span class="attr">$set</span>: &#123; <span class="attr">isDelete</span>: <span class="number">1</span>, <span class="attr">updateTime</span>: getDateStr() &#125; &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'updateTags documents =&gt;'</span>, updateResult)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> insertResult = <span class="keyword">await</span> collection.insertMany(tagList)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'insertTags documents =&gt;'</span>, insertResult)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询标签列表</span></span><br><span class="line"><span class="keyword">const</span> getTagList = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> db = client.db(dbName)</span><br><span class="line">    <span class="keyword">const</span> collection = db.collection(<span class="string">'tag'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> collection.find(&#123; <span class="attr">isDelete</span>: <span class="number">0</span> &#125;).toArray()</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        code: <span class="number">200</span>,</span><br><span class="line">        data,</span><br><span class="line">        message: <span class="string">'成功'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    initDB,</span><br><span class="line">    insertTags,</span><br><span class="line">    getTagList,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>附：<a href="https://liuxianyu.cn/article/docker-b.html" target="_black">前端学习 Docker 之旅（二）—— 常用指令</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>规范 git commit、设置版本号、自动生成 changelog</title>
    <url>/article/git-commit-version-changelog.html</url>
    <content><![CDATA[<p>  在开源项目中，规范的 commit message 可以让修改记录更简洁明了，记录下借助工具实现规范的 git commit。这里主要介绍 <a href="https://github.com/commitizen/cz-cli" target="_black">commitizen</a>、<a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli" target="_black">conventional-changelog-cli</a>、<a href="https://github.com/conventional-changelog/standard-version" target="_black">standard-version</a> 这三款工具。</p>
<a id="more"></a>
<p>  全局安装是为了本地方便运行，<code>-D</code> 安装是为了方便 CI。</p>
<h3 id="一-commitizen"><a class="header-anchor" href="#一-commitizen">¶</a>一、commitizen</h3>
<h4 id="1-1-安装"><a class="header-anchor" href="#1-1-安装">¶</a>1.1、安装</h4>
<p>  <a href="https://github.com/commitizen/cz-cli" target="_black">commitizen</a> 是一款标准化 git commit 的工具，在没有规范的情况下，开发人员的 commit message 通常是随意的，这就导致 commit message 显得有些无用。可是当你在做git log、code review、编写 changelog 等情况时，良好的 commit 规范就显得尤为重要。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install commitizen -g</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install commitizen -D</span><br></pre></td></tr></table></figure>
<p>  使用 commitizen 来安装<code>cz-conventional-changelog</code>，commitizen 安装 cz-conventional-changelog 后会自动在 package.json 中添加如下配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">commitizen init cz-conventional-changelog --save-dev --save-exact</span><br></pre></td></tr></table></figure>
<figure class="highlight"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line">"config": &#123;</span><br><span class="line">  "commitizen": &#123;</span><br><span class="line">    "path": "./node_modules/cz-conventional-changelog"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  安装并添加完成后，便可以使用<code>git cz</code>命令来替换<code>git commit</code>了。修改一个文件并<code>git add</code>后，通过<code>git cz</code>试一下：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/git-commit-version-changelog/1.png" alt></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>feat</td>
<td>新增功能</td>
</tr>
<tr>
<td>fix</td>
<td>bug 修复</td>
</tr>
<tr>
<td>docs</td>
<td>文档更新</td>
</tr>
<tr>
<td>style</td>
<td>不影响程序逻辑的代码修改(修改空白字符，格式缩进，补全缺失的分号等，没有改变代码逻辑)</td>
</tr>
<tr>
<td>refactor</td>
<td>重构代码(既没有新增功能，也没有修复 bug)</td>
</tr>
<tr>
<td>perf</td>
<td>性能, 体验优化</td>
</tr>
<tr>
<td>test</td>
<td>新增测试用例或是更新现有测试</td>
</tr>
<tr>
<td>build</td>
<td>主要目的是修改项目构建系统(例如 glup，webpack，rollup 的配置等)的提交</td>
</tr>
<tr>
<td>ci</td>
<td>主要目的是修改项目继续集成流程(例如 Travis，Jenkins，GitLab CI，Circle等)的提交</td>
</tr>
<tr>
<td>chore</td>
<td>不属于以上类型的其他类型</td>
</tr>
<tr>
<td>revert</td>
<td>回滚某个更早之前的提交</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>注意</strong><br>
如果想修改已经打好的 commit message，我们可以通过<code>git reset HEAD~</code>命令来修改</p>
</blockquote>
<h4 id="1-2-commit-message-的格式规范"><a class="header-anchor" href="#1-2-commit-message-的格式规范">¶</a>1.2、commit message 的格式规范</h4>
<p>  commit message 包含三个部分：Header、Body、Footer，一般 Header 是必需的，Body 和 Footer 可以省略。<code>Header</code>部分只有一行，包括三个字段：<code>type</code>（必需）、<code>scope</code>（可选，用于定义 type 的影响范围）和<code>subject</code>（必需，commit 的简短描述）。</p>
<h3 id="二-conventional-changelog-cli"><a class="header-anchor" href="#二-conventional-changelog-cli">¶</a>二、conventional-changelog-cli</h3>
<h4 id="2-1-安装"><a class="header-anchor" href="#2-1-安装">¶</a>2.1、安装</h4>
<p>  <a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli" target="_black">conventional-changelog-cli</a> 默认推荐的 commit 标准是来自 angular，还有其他可选值：atom, codemirror, ember, eslint, express, jquery。可用来生成<code>CHANGELOG.md</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install conventional-changelog-cli -g</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install conventional-changelog-cli -D</span><br></pre></td></tr></table></figure>
<p>  在项目根目录执行以下命令，不会覆盖以前的<code>CHANGELOG.md</code>，只会在<code>CHANGELOG.md</code>的头部加上自从上次<code>git push</code>以来的变动。<code>-s</code>表示读写同一文件，<code>-r</code>表示生成 changelog 所需要使用的发布版本数量，默认为 1，全部则是 0。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conventional-changelog -p angular -i CHANGELOG.md -s -r 0</span><br></pre></td></tr></table></figure>
<h4 id="2-2-自定义参数"><a class="header-anchor" href="#2-2-自定义参数">¶</a>2.2、自定义参数</h4>
<p>  生成的 changelog 中有些常用内容可以通过自定义参数来根据需求更改，例如版本号、commit 地址等等。</p>
<ul>
<li>版本号是从 package.json 中获取的 version 字段值；</li>
<li>commit 地址是从 package.json 中获取的 repository 字段值；</li>
<li>issue 地址是从 package.json 中获取的 repository 字段值；</li>
</ul>
<p>  如果你使用了第三方的协作系统，那么在生成 changelog 后可以使用 replace 工具（<code>--quiet</code> 表示不输出 replace 日志）来处理文本中的原有地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">replace <span class="string">'https://github.com/myproject/issues/'</span> <span class="string">'https://redmine.example.com'</span> CHANGELOG.md --quiet</span><br></pre></td></tr></table></figure>
<p>  <a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-core" target="_black">点此查看</a> 更多配置选项。</p>
<h3 id="三-standard-version"><a class="header-anchor" href="#三-standard-version">¶</a>三、standard-version</h3>
<h4 id="3-1-安装"><a class="header-anchor" href="#3-1-安装">¶</a>3.1、安装</h4>
<p>  <a href="https://github.com/conventional-changelog/standard-version" target="_black">standard-version</a> 是一款遵循语义化版本 <a href="https://semver.org/" target="_black">semver</a> 和 <a href="https://conventionalcommits.org/" target="_black">commit message 标准规范</a> 的版本和 changelog 自动化工具。通常情况下，我们会在 master 分支进行如下的版本发布操作：</p>
<blockquote>
<p>1、git pull origin master<br>
2、根据 package.json 中的 version 更新版本号，更新 changelog<br>
3、git add ., 然后 git commit<br>
4、git tag 打版本操作<br>
5、push 版本 tag 和 master 分支到仓库</p>
</blockquote>
<p>  其中 2，3，4 是 standard-version 工具会自动完成的工作，配合本地的 shell 脚本，就可以完成一系列版本发布的工作了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install standard-version -g</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install standard-version -D</span><br></pre></td></tr></table></figure>
<h4 id="3-2-命令"><a class="header-anchor" href="#3-2-命令">¶</a>3.2、命令</h4>
<p>  在项目根目录执行 standard-version 命令，可以在控制台看到整个执行流程的 log 信息，在这里几个常用的参数需要注意下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">standard-version</span><br></pre></td></tr></table></figure>
<p>1、<strong>–release-as, -r 指定版本号</strong></p>
<p>  默认情况下，工具会自动根据 主版本（major）、次版本（ minor）、修订版（patch）规则生成版本号，例如如果你 package.json 中的 version 为 1.0.0, 那么执行后版本号则是：1.0.1。自定义可以通过：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">standard-version -r minor // 1.1.0</span><br><span class="line">standard-version -r 2.0.0 // 2.0.0</span><br><span class="line">standard-version -r 2.0.0-test // 2.0.0-test</span><br></pre></td></tr></table></figure>
<p>2、<strong>–prerelease, -p 预发版本命名</strong></p>
<p>  用来生成预发版本, 如果当期的版本号是 2.0.0，例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">standard-version --prerelease alpha // 2.0.0-alpha.0</span><br></pre></td></tr></table></figure>
<p>3、<strong>–tag-prefix, -t 版本 tag 前缀</strong></p>
<p>  用来给生成 tag 标签添加前缀，例如如果前版本号为 2.0.0，则：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">standard-version --tag-prefix <span class="string">"stable-"</span> // tag: stable-v2.0.0</span><br></pre></td></tr></table></figure>
<p>  以上几个参数用得会多一些，还有其他选项可以通过<code>standard-version --help</code>查看。</p>
<h4 id="3-3-集成-npm"><a class="header-anchor" href="#3-3-集成-npm">¶</a>3.3、集成 npm</h4>
<p>  把命令集成到 package.json 的 scripts 中, 并配合 shell 脚本使用, 如下：</p>
<figure class="highlight"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "release": "./scripts/release.sh",</span><br><span class="line">  "changelog": "conventional-changelog -p angular -i CHANGELOG.md -s -r 0 &amp;&amp; git add CHANGELOG.md &amp;&amp; npm run change-issue-url",</span><br><span class="line">  "change-issue-url": "replace 'https://github.com/myproject/issues/' 'https://redmine.example.com/' CHANGELOG.md"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><figcaption><span>release.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Release branch</span></span><br><span class="line">branch=<span class="string">"master"</span></span><br><span class="line">prefix=<span class="string">"v"</span></span><br><span class="line"></span><br><span class="line">git pull origin <span class="variable">$branch</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Current pull origin <span class="variable">$branch</span>."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Auto generate version number and tag</span></span><br><span class="line">standard-version -r <span class="variable">$release</span> --tag-prefix <span class="variable">$prefix</span></span><br><span class="line"></span><br><span class="line">git push --follow-tags origin <span class="variable">$branch</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Git push origin <span class="variable">$branch</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Release finished."</span></span><br></pre></td></tr></table></figure>
<h3 id="四-使用-husky-校验"><a class="header-anchor" href="#四-使用-husky-校验">¶</a>四、使用 husky 校验</h3>
<p>  <a href="https://github.com/typicode/husky" target="_black">husky</a> 主用功能是为 git 添加钩子，它允许我们在 git 的一些重要动作发生时触发动作(npm script), 比如我们可以在 git push 之前执行特定的自定义脚本对代码进行单元测试、又或者在 git commit 之前执行 eslint 校验。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install husky -D</span><br></pre></td></tr></table></figure>
<figure class="highlight"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line">"husky": &#123;</span><br><span class="line">  "hooks": &#123;</span><br><span class="line">    "pre-commit": "echo commit 之前的动作",</span><br><span class="line">    "commit-msg": "echo $HUSKY_GIT_PARAMS $HUSKY_GIT_STDIN",</span><br><span class="line">    "pre-push": "echo push 之前的动作"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 Lerna 创建自己的 eslint 配置包</title>
    <url>/article/my-eslint-config-by-lerna.html</url>
    <content><![CDATA[<p>  最近在写一个<code>eslint config</code>的整合包，因为有不同语言，会发多个 npm 包，通过 <a href="https://github.com/lerna/lerna" target="_black">Lerna</a> 来管理多包发布，它优化了使用 git 和 npm 管理多包存储库的工作流，Vue、Babel、React 都有使用 Lerna。这里记录下使用过程中的一些点。</p>
<a id="more"></a>
<h3 id="一-两种工作模式"><a class="header-anchor" href="#一-两种工作模式">¶</a>一、两种工作模式</h3>
<h4 id="1-1-固定模式"><a class="header-anchor" href="#1-1-固定模式">¶</a>1.1、固定模式</h4>
<p>  Fixed/Locked mode，Vue，Babel 都是用这种，在 publish 的时候，会依据<code>lerna.json</code>文件里面的<code>&quot;version&quot;: &quot;0.0.1&quot;</code>进行增加，只选择一次，其他有改动的包自动更新版本号。</p>
<h4 id="1-2-独立模式"><a class="header-anchor" href="#1-2-独立模式">¶</a>1.2、独立模式</h4>
<p>  Independent mode，执行<code>lerna init --independent</code>命令初始化项目，<code>lerna.json</code>文件里面会设置<code>&quot;version&quot;: &quot;independent&quot;</code>。每次 publish 时，会得到一个提示符，提示每个已更改的包，以指定是补丁、次要更改、主要更改还是自定义更改(<code>x.y.z</code>)。</p>
<h3 id="二-初始化"><a class="header-anchor" href="#二-初始化">¶</a>二、初始化</h3>
<p>  新建一个文件夹<code>eslint-config-liuxy0551</code>，并进入该文件夹；为了方便 github action，安装 lerna 到开发环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">yarn add lerna -D</span><br></pre></td></tr></table></figure>
<p>  因为 lerna 经常需要用到，我们全局安装下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn global add lerna</span><br></pre></td></tr></table></figure>
<p>  安装完成后输入<code>lerna -v</code>查看版本号：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/my-eslint-config-by-lerna/1.png" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lerna init</span><br></pre></td></tr></table></figure>
<p>  我们使用固定模式，然后进入<code>packages</code>文件夹初始化几个不同语言对应的 eslint config 包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> packages</span><br><span class="line">mkdir basic prettier typescript</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> basic</span><br><span class="line">npm init -y</span><br><span class="line"><span class="built_in">cd</span> ../prettier</span><br><span class="line">npm init -y</span><br><span class="line"><span class="built_in">cd</span> ../react</span><br><span class="line">npm init -y</span><br><span class="line"><span class="built_in">cd</span> ../typescript</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>
<p>  项目结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eslint-config-liuxy0551</span><br><span class="line">├─lerna.json</span><br><span class="line">├─package.json</span><br><span class="line">├─result.txt</span><br><span class="line">├─yarn.lock</span><br><span class="line">├─packages</span><br><span class="line">|    ├─typescript</span><br><span class="line">|    |     └package.json</span><br><span class="line">|    ├─react</span><br><span class="line">|    |   └package.json</span><br><span class="line">|    ├─prettier</span><br><span class="line">|    |    └package.json</span><br><span class="line">|    ├─basic</span><br><span class="line">|    |   └package.json</span><br></pre></td></tr></table></figure>
<p>  按照约定 <a href="https://eslint.org/docs/developer-guide/shareable-configs" target="_black">Shareable Configs</a>，包名应该以<code>eslint-config-</code>开头，例如：<code>eslint-config-liuxy0551-basic</code>。依次将 packages 下的几个 package.json 中的 name 改成如：@liuxy0551/eslint-config-liuxy0551-basic，version 改成 0.0.0。</p>
<p>  每个子 package 都有自己的 node_modules，通过如下设置，就可以只在根目录创建 node_modules，只有开启了 private 的项目才能使用 workspaces。依次修改根目录的 package.json 和 lerna.json，添加以下配置项：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"private": true,</span><br><span class="line">"workspaces": [</span><br><span class="line">  <span class="string">"packages/*"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"useWorkspaces": true,</span><br><span class="line">"npmClient": "yarn"</span><br></pre></td></tr></table></figure>
<h3 id="三-绑定-git-和-npm"><a class="header-anchor" href="#三-绑定-git-和-npm">¶</a>三、绑定 git 和 npm</h3>
<p>  接下来与远程仓库绑定，并登录 npm：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:liuxy0551/eslint-config-liuxy0551.git</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm whoami</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong><br>
如果上述命令报错，排查 npm 源: <code>npm config ls</code><br>
设置 npm 官方源: <code>npm config set registry https://registry.npmjs.org/</code><br>
如果未登录则执行<code>npm login</code>登录</p>
</blockquote>
<h3 id="四-配置内容"><a class="header-anchor" href="#四-配置内容">¶</a>四、配置内容</h3>
<p>  在 packages/basic 文件夹下新建 index.js，内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  extends: [</span><br><span class="line">    <span class="string">'airbnb'</span>,</span><br><span class="line">    <span class="string">'plugin:import/errors'</span>,</span><br><span class="line">    <span class="string">'plugin:import/warnings'</span>,</span><br><span class="line">    <span class="string">'plugin:eslint-comments/recommended'</span>,</span><br><span class="line">    <span class="string">'plugin:yml/recommended'</span>,</span><br><span class="line">    <span class="string">'prettier'</span>,</span><br><span class="line">  ],</span><br><span class="line">  plugins: [<span class="string">'html'</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <code>rules</code>对象就是我们可以自己改动的配置项，在<code>Airbnb/JavaScript</code>仓库中的 <a href="https://github.com/airbnb/javascript/issues/1089" target="_black">https://github.com/airbnb/javascript/issues/1089</a>，告诉了我们有哪些规则可以被修改。</p>
<h3 id="五-lerna-命令"><a class="header-anchor" href="#五-lerna-命令">¶</a>五、lerna 命令</h3>
<h4 id="5-1-创建一个包"><a class="header-anchor" href="#5-1-创建一个包">¶</a>5.1、创建一个包</h4>
<p><code>lerna create &lt;包名&gt; [存放的目录]</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lerna create packageName</span><br></pre></td></tr></table></figure>
<h4 id="5-2-查看当前列表"><a class="header-anchor" href="#5-2-查看当前列表">¶</a>5.2、查看当前列表</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lerna list</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/my-eslint-config-by-lerna/2.png" alt></p>
<h4 id="5-3-增加本地或者远程-package-作为当前项目-packages-里面的依赖"><a class="header-anchor" href="#5-3-增加本地或者远程-package-作为当前项目-packages-里面的依赖">¶</a>5.3、增加本地或者远程 package 作为当前项目 packages 里面的依赖</h4>
<p><code>lerna add [@version] [--scope=localPackageName] [-D] [--exact]</code></p>
<ul>
<li>-D 表示安装到 devDependencies</li>
<li>–exact 表示安装准确版本，不带 ^</li>
</ul>
<blockquote>
<p><strong>注意</strong><br>
以下基于<code>node 12</code>版本安装插件，需要兼容低版本的可以在插件后加上版本号</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lerna add eslint</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-basic eslint-loader</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-basic eslint-config-airbnb</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-basic eslint-plugin-eslint-comments</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-basic eslint-plugin-html</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-basic eslint-plugin-import</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-basic eslint-plugin-node</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-basic eslint-plugin-promise</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-basic eslint-plugin-sort-requires</span><br></pre></td></tr></table></figure>
<p>  加上<code>--scope=</code>表示给本地指定的包安装依赖，也可以 cd 到这个包的文件夹下安装，就不用加<code>--scope=</code>了；不加则是给所有子包都安装该依赖。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-typescript @liuxy0551/eslint-config-liuxy0551-basic</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-typescript @typescript-eslint/eslint-plugin</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-typescript @typescript-eslint/parser</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-react @liuxy0551/eslint-config-liuxy0551-typescript</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-react eslint-plugin-jest</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-react eslint-plugin-jsx-a11y</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-react eslint-plugin-react</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-react eslint-plugin-react-hooks</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-prettier @liuxy0551/eslint-config-liuxy0551-react</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-prettier prettier</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-prettier prettier-plugin-jsdoc</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-prettier eslint-config-prettier</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-prettier eslint-plugin-prettier</span><br></pre></td></tr></table></figure>
<h4 id="5-4-安装依赖"><a class="header-anchor" href="#5-4-安装依赖">¶</a>5.4、安装依赖</h4>
<p>  因为我们指定过使用 yarn，直接执行<code>yarn install</code>就会把所有包的依赖安装到根目录的 node_modules。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lerna bootstrap</span><br></pre></td></tr></table></figure>
<h4 id="5-5-删除依赖"><a class="header-anchor" href="#5-5-删除依赖">¶</a>5.5、删除依赖</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lerna clean --scope=特定的某个包</span><br></pre></td></tr></table></figure>
<p>  和<code>rm -rf node_modules</code>功能一致，<code>--scope=</code>表示指定包，不会移除根目录的 node_modules。</p>
<h4 id="5-6-建立软链接"><a class="header-anchor" href="#5-6-建立软链接">¶</a>5.6、建立软链接</h4>
<p><code>lerna link [--force-local]</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lerna link --force-local</span><br></pre></td></tr></table></figure>
<p>  类似<code>npm link</code>的使用，–force-local 表示不论本地的版本是否符合，都使用本地的版本。</p>
<h4 id="5-7-列出更新的包"><a class="header-anchor" href="#5-7-列出更新的包">¶</a>5.7、列出更新的包</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lerna changed</span><br></pre></td></tr></table></figure>
<p>  列出改动过的包，发布时只更新改动过的包。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/my-eslint-config-by-lerna/3.png" alt></p>
<h4 id="5-8-指定版本号"><a class="header-anchor" href="#5-8-指定版本号">¶</a>5.8、指定版本号</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lerna version 0.0.2 -y</span><br></pre></td></tr></table></figure>
<p>  需要本地分支和远程分支无差别。</p>
<h4 id="5-9-发布"><a class="header-anchor" href="#5-9-发布">¶</a>5.9、发布</h4>
<p><code>lerna publish [--conventional-commits -y]</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lerna publish</span><br></pre></td></tr></table></figure>
<p>  需要先执行 git commit，会打 tag，<code>--conventional-commits</code>表示生成 changelog。如果包名是带 scope 的格式，如：@liuxy0551/eslint-config-liuxy0551，则需要在 package.json 中添加配置项，packages 下的每个包都需要加：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"publishConfig": &#123;</span><br><span class="line">  "access": "public"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/my-eslint-config-by-lerna/4.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/my-eslint-config-by-lerna/5.png" alt></div></div><div class="group-picture-row"></div></div></div>
<h3 id="六-发布整合包"><a class="header-anchor" href="#六-发布整合包">¶</a>六、发布整合包</h3>
<blockquote>
<p>lerna publish 只会发布 packages 下的包，当前文件夹并不会作为一个包发布</p>
</blockquote>
<p>  在 packages 文件夹下新建一个<code>main</code>，作为入口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> packages</span><br><span class="line">mkdir main</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> main</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>
<p>  将 main 下 package.json 中的 name 改成如：@liuxy0551/eslint-config-liuxy0551，version 改成 0.0.0。添加依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551 eslint@^7.0.0</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551 @liuxy0551/eslint-config-liuxy0551-react</span><br></pre></td></tr></table></figure>
<p>  在 packages/main 文件夹下新建 index.js，内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Export all */</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  extends: [</span><br><span class="line">    <span class="string">'@liuxy0551/eslint-config-liuxy0551-react'</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  lerna 不会发布标记私有的项目，需要修改根目录 package.json 中的配置<code>&quot;private&quot;: false</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm whoami</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lerna publish</span><br></pre></td></tr></table></figure>
<p>  访问<a href="https://www.npmjs.com/search?q=@liuxy0551/eslint-config-liuxy0551" target="_black">https://www.npmjs.com/search?q=@liuxy0551/eslint-config-liuxy0551</a> 可以看到发布的包。</p>
<blockquote>
<p><strong>常见错误</strong><br>
第一次发布失败后出现 Current HEAD is already released<br>
执行<code>lerna publish from-package</code></p>
</blockquote>
<p>  <code>可选步骤</code>删除测试发布的 npm 包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm unpublish @liuxy0551/eslint-config-liuxy0551-react --force</span><br><span class="line">npm unpublish @liuxy0551/eslint-config-liuxy0551-typescript --force</span><br><span class="line">npm unpublish @liuxy0551/eslint-config-liuxy0551-prettier --force</span><br><span class="line">npm unpublish @liuxy0551/eslint-config-liuxy0551-basic --force</span><br><span class="line">npm unpublish @liuxy0551/eslint-config-liuxy0551 --force</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p>1、<a href="https://juejin.cn/post/6844903856153821198" target="_black">Lerna 中文教程详解</a><br>
2、<a href="https://www.ahwgs.cn/ruhechuangjianzijideeslintpeizhibao.html" target="_black">如何创建自己的ESLint配置包</a><br>
3、<a href="https://segmentfault.com/a/1190000023954051" target="_black">Lerna --多包存储管理工具（一）</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 中操作 Redis</title>
    <url>/article/node-redis.html</url>
    <content><![CDATA[<p>  之前写了个爬取 Github Trending 的服务 <a href="https://github.com/liuxy0551/github-trending-api" target="_black">github-trending-api</a>，因为网络原因，失败率比较高，最近在进行优化，会每个小时请求一次 Github，失败则重试5次，然后把成功的结果存到 Redis 中。记录下 Node.js 中操作 Redis 的一些方法。</p>
<a id="more"></a>
<h3 id="一-安装-redis"><a class="header-anchor" href="#一-安装-redis">¶</a>一、安装 Redis</h3>
<p>  我这里是通过 Docker 来安装 Redis 的，具体可参考：<a href="https://liuxianyu.cn/article/docker-d.html" target="_black">前端学习 Docker 之旅（五）—— 安装 Redis 并启动、连接</a>。</p>
<h3 id="二-缓存类型"><a class="header-anchor" href="#二-缓存类型">¶</a>二、缓存类型</h3>
<p>  主要分为三种：数据库、本地应用缓存（内存等）、远程缓存（Redis），这里不展开细讲。</p>
<h3 id="三-缓存模式"><a class="header-anchor" href="#三-缓存模式">¶</a>三、缓存模式</h3>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/node-redis/1.png" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/node-redis/2.png" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/node-redis/3.png" alt></div></div><div class="group-picture-row"></div></div></div>
<h3 id="四-node-js-与-redis"><a class="header-anchor" href="#四-node-js-与-redis">¶</a>四、Node.js 与 Redis</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createClient &#125; <span class="keyword">from</span> <span class="string">'redis'</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> client = createClient(&#123;</span><br><span class="line">        url: <span class="string">'redis://username:password@host:port/db-number'</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    client.on(<span class="string">'error'</span>, (err) =&gt; <span class="built_in">console</span>.log(<span class="string">'Redis Client Error'</span>, err));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> client.connect();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> client.set(<span class="string">'key'</span>, <span class="string">'value'</span>);</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">await</span> client.get(<span class="string">'key'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>  语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">createClient(&#123;</span><br><span class="line">    url: <span class="string">'redis://alice:foobared@awesome.redis.server:6380'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="五-redis-value-类型"><a class="header-anchor" href="#五-redis-value-类型">¶</a>五、Redis value 类型</h3>
<p>  Redis 的 key 是唯一的，如果 key 所对应的 value 是 string 类型，则不能再次覆盖修改为 hash 类型。<a href="https://github.com/redis/node-redis/blob/be51abe347/packages/client/lib/client/commands.ts#L85" target="_black">点此查看其他方法</a></p>
<h4 id="5-1-string"><a class="header-anchor" href="#5-1-string">¶</a>5.1、string</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> redis.set(<span class="string">'key'</span>, <span class="string">'value'</span>)</span><br><span class="line"><span class="keyword">const</span> value = <span class="keyword">await</span> redis.get(<span class="string">'key'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> redis.setEx(<span class="string">'key'</span>, <span class="number">60</span>, <span class="string">'value'</span>) <span class="comment">// 设置缓存，单位秒</span></span><br></pre></td></tr></table></figure>
<p>  不建议赋值后再设置过期时间，这样不能保证原子性。</p>
<h4 id="5-2-hash"><a class="header-anchor" href="#5-2-hash">¶</a>5.2、hash</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">'Tom'</span> &#125;</span><br><span class="line"><span class="comment">// await redis.hSet('key', obj, 'EX', 60)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">await</span> redis.hGetAll(<span class="string">'key'</span>) <span class="comment">// &#123; name: 'Tom' &#125;</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="keyword">await</span> redis.hGet(<span class="string">'key'</span>, <span class="string">'name'</span>) <span class="comment">// 'Tom'</span></span><br><span class="line"><span class="keyword">const</span> value = <span class="keyword">await</span> redis.hVals(<span class="string">'key'</span>) <span class="comment">// ['Tom']</span></span><br></pre></td></tr></table></figure>
<p>  取出存入 Redis 的对象时，每个 key 的值会被转成 string。</p>
<h4 id="5-3-lists"><a class="header-anchor" href="#5-3-lists">¶</a>5.3、lists</h4>
<h4 id="5-4-sets"><a class="header-anchor" href="#5-4-sets">¶</a>5.4、sets</h4>
<h4 id="5-4-事务"><a class="header-anchor" href="#5-4-事务">¶</a>5.4、事务</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">redis.multi()</span><br><span class="line">    .set(<span class="string">'key'</span>, <span class="string">'value'</span>)</span><br><span class="line">    .get(<span class="string">'key'</span>)</span><br><span class="line">    .exec(<span class="function">(<span class="params">error, replies</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(replies) <span class="comment">// ['OK', 'value']</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p>1、<a href="https://www.cnblogs.com/zhaowinter/p/10776868.html" target="_black">nodejs操作redis总结</a><br>
2、<a href="https://github.com/redis/node-redis" target="_black">node-redis</a><br>
3、<a href="https://redis.js.org/" target="_black">https://redis.js.org/</a><br>
4、涉及代码：<a href="https://github.com/liuxy0551/github-trending-api" target="_black">https://github.com/liuxy0551/github-trending-api</a></p>
]]></content>
      <categories>
        <category>node</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>iframe 跨域时的通信方式 postMessage</title>
    <url>/article/iframe-postMessage.html</url>
    <content><![CDATA[<p>  最近有个公司客户对接了公司的用户中心，客户期望自己的系统在退出登录时，公司的用户中心也退出登录。提出了 iframe 的技术方案，并给出了实现方式。<br>
  因为客户系统和公司的用户中心必然跨域，这里只记录一下跨域时的处理方法。</p>
<a id="more"></a>
<h3 id="一-如何实现"><a class="header-anchor" href="#一-如何实现">¶</a>一、如何实现</h3>
<h4 id="postmessage"><a class="header-anchor" href="#postmessage">¶</a>postMessage</h4>
<blockquote>
<p>window.postMessage() 方法可以安全地实现跨源通信。通常，对于两个不同页面的脚本，只有当执行它们的页面位于具有相同的协议（通常为https），端口号（443为https的默认值），以及主机  (两个页面的模数 Document.domain设置为相同的值) 时，这两个脚本才能相互通信。window.postMessage() 方法提供了一种受控机制来规避此限制，只要正确的使用，这种方法就很安全。</p>
</blockquote>
<p>  以上是摘自 MDN 的原文，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_black">window.postMessage</a></p>
<p><strong>语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">otherWindow.postMessage(message, targetOrigin, [transfer]);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>otherWindow</code> 其他窗口的引用对象</li>
<li><code>message</code> 将要传递的消息，字符串或对象</li>
<li><code>targetOrigin</code> 目标窗口，* 代表所有</li>
<li><code>transfer</code> 可选，是一串和 message 同时传递的对象</li>
</ul>
<p>  <code>postMessage</code>非常强大，既可以父传子，也可以子传父，并且是可以跨域传输的。</p>
<h4 id="业务场景"><a class="header-anchor" href="#业务场景">¶</a>业务场景</h4>
<p>  客户的系统退出登录后，公司的用户中心前端页面无法感知到已经退出登录，也就无法清除 cookie，如果此时进入公司的用户中心页面，依旧可以访问，所以需要实现同步退出登录。而且因为客户的系统和公司的用户中心不同源，存在跨域，这里通过<code>postMessage</code>来解决。</p>
<h4 id="父传子"><a class="header-anchor" href="#父传子">¶</a>父传子</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 子页面</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, (e) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'这里是公司的用户中心，客户系统发来消息: '</span>, e.data)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (e.data !== <span class="string">'logout'</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// TODO 清除 cookie</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 父页面</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"子页面"</span> <span class="attr">id</span>=<span class="string">"dtstack-logout"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"logoutFunc()"</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">logoutFunc</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'dtstack-logout'</span>).contentWindow.postMessage(<span class="string">'logout'</span>, <span class="string">'*'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>  上面的代码表示：在父页面引入 iframe，src 指向子页面，父页面点击<code>退出登录</code>按钮时，向子页面发送一个消息，子页面监听到事先和父页面约定好的信息后，清除 cookie，并给父页面一个反馈。</p>
<h4 id="子传父"><a class="header-anchor" href="#子传父">¶</a>子传父</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 子页面</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, (e) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'这里是公司的用户中心，客户系统发来消息: '</span>, e.data)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (e.data !== <span class="string">'logout'</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// TODO 清除 cookie</span></span></span><br><span class="line"><span class="javascript">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 向父页面传递消息</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.parent.postMessage(<span class="string">'clear done'</span>, <span class="string">'*'</span>)</span></span><br><span class="line">        &#125;, 2500)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 父页面</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"子页面"</span> <span class="attr">id</span>=<span class="string">"dtstack-logout"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"logoutFunc()"</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, (e) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'这里是客户系统，公司的用户中心发来消息: '</span>, e.data)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!e.data.includes(<span class="string">'clear'</span>)) <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// TODO 清除公司用户中心的 cookie 后需要进行的动作</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>  上面的代码表示：在父页面引入 iframe，src 指向子页面，子页面在接收到父页面清除 cookie 的消息后，清除 cookie，并在完成后给父页面发送消息，父页面接收到后进行下一步动作。</p>
<h3 id="二-实现效果"><a class="header-anchor" href="#二-实现效果">¶</a>二、实现效果</h3>
<p align="center">
    <img src="https://images-hosting.liuxianyu.cn/posts/iframe-postMessage/1.gif">
</p>
<img src="https://images-hosting.liuxianyu.cn/posts/iframe-postMessage/2.png">
<img src="https://images-hosting.liuxianyu.cn/posts/iframe-postMessage/3.png">
<p>  以上截图的代码是临时 demo。</p>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p>  1、<a href="https://www.runoob.com/tags/tag-iframe.html" target="_black">HTML iframe 标签</a></p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 中的进程和线程</title>
    <url>/article/node-process-thread.html</url>
    <content><![CDATA[<p>  线程和进程是计算机操作系统的基础概念，在程序员中属于高频词汇，那如何理解呢？Node.js 中的进程和线程又是怎样的呢？</p>
<a id="more"></a>
<p align="center">
    <img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/1.png">
</p>
<h3 id="一-进程和线程"><a class="header-anchor" href="#一-进程和线程">¶</a>一、进程和线程</h3>
<h4 id="1-1-专业性文字定义"><a class="header-anchor" href="#1-1-专业性文字定义">¶</a>1.1、专业性文字定义</h4>
<ul>
<li>进程（Process），进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础，进程是线程的容器。</li>
<li>线程（Thread），线程是操作系统能够进行运算调度的最小单位，被包含在进程之中，是进程中的实际运作单位。</li>
</ul>
<h4 id="1-2-通俗理解"><a class="header-anchor" href="#1-2-通俗理解">¶</a>1.2、通俗理解</h4>
<p>  以上描述比较硬，看完可能也没看懂，还不利于理解记忆。那么我们举个简单的例子：</p>
<p>  假设你是某个快递站点的一名小哥，起初这个站点负责的区域住户不多，收取件都是你一个人。给张三家送完件，再去李四家取件，事情得一件件做，这叫单线程，所有的工作都得按顺序执行。</p>
<p>  后来这个区域住户多了，站点给这个区域分配了多个小哥，还有个小组长，你们可以为更多的住户服务了，这叫多线程，小组长是主线程，每个小哥都是一个线程。</p>
<p>  快递站点使用的小推车等工具，是站点提供的，小哥们都可以使用，并不仅供某一个人，这叫多线程资源共享。</p>
<p>  站点小推车目前只有一个，大家都需要使用，这叫冲突。解决的方法有很多，排队等待或者等其他小哥用完后的通知，这叫线程同步。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/2.png" alt></p>
<p>  总公司有很多站点，各个站点的运营模式几乎一模一样，这叫多进程。总公司叫主进程，各个站点叫子进程。</p>
<p>  总公司和站点之间，以及各个站点互相之间，小推车都是相互独立的，不能混用，这叫进程间不共享资源。各站点间可以通过电话等方式联系，这叫管道。各站点间还有其他协同手段，便于完成更大的计算任务，这叫进程间同步。</p>
<p>  还可以看看阮一峰对 <a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_black">进程与线程的一个简单解释</a>。</p>
<h3 id="二-node-js-中的进程和线程"><a class="header-anchor" href="#二-node-js-中的进程和线程">¶</a>二、Node.js 中的进程和线程</h3>
<p>  Node.js 是单线程服务，事件驱动和非阻塞 I/O 模型的语言特性，使得 Node.js 高效和轻量。优势在于免去了频繁切换线程和资源冲突；擅长 I/O 密集型操作（底层模块 libuv 通过多线程调用操作系统提供的异步 I/O 能力进行多任务的执行），但是对于服务端的 Node.js，可能每秒有上百个请求需要处理，当面对 CPU 密集型请求时，因为是单线程模式，难免会造成阻塞。</p>
<h4 id="2-1-node-js-阻塞"><a class="header-anchor" href="#2-1-node-js-阻塞">¶</a>2.1、Node.js 阻塞</h4>
<p>  我们利用 Koa 简单地搭建一个 Web 服务，用斐波那契数列方法来模拟一下 Node.js 处理 CPU 密集型的计算任务：</p>
<blockquote>
<p>斐波那契数列，也称黄金分割数列，这个数列从第三项开始，每一项都等于前两项只和：0、1、1、2、3、5、8、13、21、…</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)()</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来测试是否被阻塞</span></span><br><span class="line">router.get(<span class="string">'/test'</span>, (ctx) =&gt; &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        pid: process.pid,</span><br><span class="line">        msg: <span class="string">'Hello World'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/fibo'</span>, (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; num = <span class="number">38</span> &#125; = ctx.query</span><br><span class="line">    <span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="comment">// 斐波那契数列</span></span><br><span class="line">    <span class="keyword">const</span> fibo = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">1</span> ? fibo(n - <span class="number">1</span>) + fibo(n - <span class="number">2</span>) : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    fibo(num)</span><br><span class="line"></span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        pid: process.pid,</span><br><span class="line">        duration: <span class="built_in">Date</span>.now() - start</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(router.routes())</span><br><span class="line">app.listen(<span class="number">9000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server is running on 9000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>  执行<code>node app.js</code>启动服务，用 Postman 发送请求，可以看到，计算 38 次耗费了 617ms，换而言之，因为执行了一个 CPU 密集型的计算任务，所以 Node.js 主线程被阻塞了六百多毫秒。如果同时处理更多的请求，或者计算任务更复杂，那么在这些请求之后的所有请求都会被延迟执行。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/3.png" alt></p>
<p>  我们再新建一个 axios.js 用来模拟发送多次请求，此时将 app.js 中的 fibo 计算次数改为 43，用来模拟更复杂的计算任务：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// axios.js</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.get(<span class="string">`http://127.0.0.1:9000/<span class="subst">$&#123; url &#125;</span>`</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.data, <span class="string">`耗时: <span class="subst">$&#123; <span class="built_in">Date</span>.now() - start &#125;</span>ms`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="string">'test'</span>)</span><br><span class="line">fn(<span class="string">'fibo?num=43'</span>)</span><br><span class="line">fn(<span class="string">'test'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/4.png" alt></p>
<p>  可以看到，当请求需要执行 CPU 密集型的计算任务时，后续的请求都被阻塞等待，这类请求一多，服务基本就阻塞卡死了。对于这种不足，Node.js 一直在弥补。</p>
<h4 id="2-2-master-worker"><a class="header-anchor" href="#2-2-master-worker">¶</a>2.2、master-worker</h4>
<p>  master-worker 模式是一种并行模式，核心思想是：系统有两个及以上的进程或线程协同工作时，master 负责接收和分配并整合任务，worker 负责处理任务。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/5.png" alt></p>
<h4 id="2-3-多线程"><a class="header-anchor" href="#2-3-多线程">¶</a>2.3、多线程</h4>
<p>  线程是 CPU 调度的一个基本单位，只能同时执行一个线程的任务，同一个线程也只能被一个 CPU 调用。如果使用的是多核 CPU，那么将无法充分利用 CPU 的性能。</p>
<p>  多线程带给我们灵活的编程方式，但是需要学习更多的 Api 知识，在编写更多代码的同时也存在着更多的风险，线程的切换和锁也会增加系统资源的开销。</p>
<ul>
<li><a href="http://nodejs.cn/api-v14/worker_threads.html" target="_black">worker_threads 工作线程</a>，给 Node.js 提供了真正的多线程能力。</li>
</ul>
<p>  worker_threads 是 Node.js 提供的一种多线程 Api。对于执行 CPU 密集型的计算任务很有用，对 I/O 密集型的操作帮助不大，因为 Node.js 内置的异步 I/O 操作比 worker_threads 更高效。worker_threads 中的 Worker，parentPort 主要用于子线程和主线程的消息交互。</p>
<p>  将 app.js 稍微改动下，将 CPU 密集型的计算任务交给子线程计算：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)()</span><br><span class="line"><span class="keyword">const</span> &#123; Worker &#125; = <span class="built_in">require</span>(<span class="string">'worker_threads'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来测试是否被阻塞</span></span><br><span class="line">router.get(<span class="string">'/test'</span>, (ctx) =&gt; &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        pid: process.pid,</span><br><span class="line">        msg: <span class="string">'Hello World'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/fibo'</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; num = <span class="number">38</span> &#125; = ctx.query</span><br><span class="line">    ctx.body = <span class="keyword">await</span> asyncFibo(num)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asyncFibo = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 worker 线程并传递数据</span></span><br><span class="line">        <span class="keyword">const</span> worker = <span class="keyword">new</span> Worker(<span class="string">'./fibo.js'</span>, &#123; <span class="attr">workerData</span>: &#123; num &#125; &#125;)</span><br><span class="line">        <span class="comment">// 主线程监听子线程发送的消息</span></span><br><span class="line">        worker.on(<span class="string">'message'</span>, resolve)</span><br><span class="line">        worker.on(<span class="string">'error'</span>, reject)</span><br><span class="line">        worker.on(<span class="string">'exit'</span>, (code) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (code !== <span class="number">0</span>) reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Worker stopped with exit code <span class="subst">$&#123;code&#125;</span>`</span>))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(router.routes())</span><br><span class="line">app.listen(<span class="number">9000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server is running on 9000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>  新增 fibo.js 文件，用来处理复杂计算任务：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; workerData, parentPort &#125; = <span class="built_in">require</span>(<span class="string">'worker_threads'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; num &#125; = workerData</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line"><span class="comment">// 斐波那契数列</span></span><br><span class="line"><span class="keyword">const</span> fibo = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">1</span> ? fibo(n - <span class="number">1</span>) + fibo(n - <span class="number">2</span>) : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fibo(num)</span><br><span class="line"></span><br><span class="line">parentPort.postMessage(&#123;</span><br><span class="line">    pid: process.pid,</span><br><span class="line">    duration: <span class="built_in">Date</span>.now() - start</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>  执行上文的 axios.js，此时将 app.js 中的 fibo 计算次数改为 43，用来模拟更复杂的计算任务：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/6.png" alt></p>
<p>  可以看到，将 CPU 密集型的计算任务交给子线程处理时，主线程不再被阻塞，只需等待子线程处理完成后，主线程接收子线程返回的结果即可，其他请求不再受影响。<br>
  上述代码是演示创建 worker 线程的过程和效果，实际开发中，请使用线程池来代替上述操作，因为频繁创建线程也会有资源的开销。</p>
<blockquote>
<p>线程是 CPU 调度的一个基本单位，只能同时执行一个线程的任务，同一个线程也只能被一个 CPU 调用。</p>
</blockquote>
<p>  我们再回味下，本小节开头提到的线程和 CPU 的描述，此时由于是新的线程，可以在其他 CPU 核心上执行，可以更充分的利用多核 CPU。</p>
<h4 id="2-4-多进程"><a class="header-anchor" href="#2-4-多进程">¶</a>2.4、多进程</h4>
<p>  Node.js 为了能充分利用 CPU 的多核能力，提供了 cluster 模块，cluster 可以通过一个父进程管理多个子进程的方式来实现集群的功能。</p>
<ul>
<li><a href="http://nodejs.cn/api-v14/child_process.html" target="_black">child_process 子进程</a>，衍生新的 Node.js 进程并使用建立的 IPC 通信通道调用指定的模块。</li>
<li><a href="http://nodejs.cn/api-v14/cluster.html" target="_black">cluster 集群</a>，可以创建共享服务器端口的子进程，工作进程使用 child_process 的 fork 方法衍生。</li>
</ul>
<p>  cluster 底层就是 child_process，master 进程做总控，启动 1 个 agent 进程和 n 个 worker 进程，agent 进程处理一些公共事务，比如日志等；worker 进程使用建立的 IPC（Inter-Process Communication）通信通道和 master 进程通信，和 master 进程共享服务端口。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/7.png" alt></p>
<p>  新增 fibo-10.js，模拟发送 10 次请求：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fibo-10.js</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">`http://127.0.0.1:9000/fibo?num=38`</span></span><br><span class="line"><span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    axios.get(url).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.data, <span class="string">`耗时: <span class="subst">$&#123; <span class="built_in">Date</span>.now() - start &#125;</span>ms`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  可以看到，只使用了一个进程，10 个请求慢慢阻塞，累计耗时 15 秒：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/8.png" alt></p>
<p>  接下来，将 app.js 稍微改动下，引入 cluster 模块：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>)</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length</span><br><span class="line"><span class="comment">// const numCPUs = 10 // worker 进程的数量一般和 CPU 核心数相同</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)()</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来测试是否被阻塞</span></span><br><span class="line">router.get(<span class="string">'/test'</span>, (ctx) =&gt; &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        pid: process.pid,</span><br><span class="line">        msg: <span class="string">'Hello World'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/fibo'</span>, (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; num = <span class="number">38</span> &#125; = ctx.query</span><br><span class="line">    <span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="comment">// 斐波那契数列</span></span><br><span class="line">    <span class="keyword">const</span> fibo = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">1</span> ? fibo(n - <span class="number">1</span>) + fibo(n - <span class="number">2</span>) : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    fibo(num)</span><br><span class="line"></span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        pid: process.pid,</span><br><span class="line">        duration: <span class="built_in">Date</span>.now() - start</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.use(router.routes())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Master <span class="subst">$&#123;process.pid&#125;</span> is running`</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 衍生 worker 进程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;</span><br><span class="line">        cluster.fork()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cluster.on(<span class="string">'exit'</span>, (worker, code, signal) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`worker <span class="subst">$&#123;worker.process.pid&#125;</span> died`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    app.listen(<span class="number">9000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Worker <span class="subst">$&#123;process.pid&#125;</span> started`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  执行<code>node app.js</code>启动服务，可以看到，cluster 帮我们创建了 1 个 master 进程和 4 个 worker 进程：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/9.png" alt><br>
<img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/10.png" alt></p>
<p>  通过 fibo-10.js  模拟发送 10 次请求，可以看到，四个进程处理 10 个请求耗时近 9 秒：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/11.png" alt></p>
<p>  当启动 10 个 worker 进程时，看看效果：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/12.png" alt></p>
<p>  仅需不到 3 秒，不过进程的数量也不是无限的。在日常开发中，worker 进程的数量一般和 CPU 核心数相同。</p>
<h4 id="2-5-多进程说明"><a class="header-anchor" href="#2-5-多进程说明">¶</a>2.5、多进程说明</h4>
<p>  开启多进程不全是为了处理高并发，而是为了解决 Node.js 对于多核 CPU 利用率不足的问题。<br>
  由父进程通过 fork 方法衍生出来的子进程拥有和父进程一样的资源，但是各自独立，互相之间资源不共享。通常根据 CPU 核心数来设置进程数量，因为系统资源是有限的。</p>
<h3 id="三-总结"><a class="header-anchor" href="#三-总结">¶</a>三、总结</h3>
<p>  1、大部分通过多线程解决 CPU 密集型计算任务的方案都可以通过多进程方案来替代；<br>
  2、Node.js 虽然异步，但是不代表不会阻塞，CPU 密集型任务最好不要在主线程处理，保证主线程的畅通；<br>
  3、不要一味的追求高性能和高并发，达到系统需要即可，高效、敏捷才是项目需要的，这也是 Node.js 轻量的特点。<br>
  4、Node.js 中的进程和线程还有很多概念在文章中提到了但没展开细讲或没提到的，比如：Node.js 底层 I/O 的 libuv、IPC 通信通道、多进程如何守护、进程间资源不共享如何处理定时任务、agent 进程等；<br>
  5、以上代码可在 <a href="https://github.com/liuxy0551/node-process-thread" target="_black">https://github.com/liuxy0551/node-process-thread</a> 查看。</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Bench(ab) 的使用方法</title>
    <url>/article/apache-bench.html</url>
    <content><![CDATA[<p>  ApacheBench 是 Apache 服务器自带的一个 web 压力测试工具，简称 ab。ab 是一个命令行工具，对发起负载的本机要求很低，根据 ab 命令可以创建很多的并发访问线程，模拟多个访问者同时对某一 URL 地址进行访问，因此可以用来测试目标服务器的负载压力。总的来说 ab 工具小巧简单，可以提供需要的基本性能指标，但是没有图形化结果，不能监控。这里记录下参数含义。</p>
<a id="more"></a>
<p>  格式：ab [options] [http://]hostname[:port]/path</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ab -c 10 -n 10 http://baidu.com/</span><br></pre></td></tr></table></figure>
<p>指令解释：</p>
<ul>
<li><code>-n</code> 本次测试发起的总请求数</li>
<li><code>-c</code> 一次产生的请求数（或并发数）</li>
<li><code>-t</code> 测试所进行的最大秒数，默认没有时间限制</li>
<li><code>-r</code> 抛出异常继续执行测试任务</li>
<li><code>-p</code> 包含了需要 POST 的数据的文件，文件格式如<code>p1=1&amp;p2=2</code>，使用方法是<code>-p 111.txt</code></li>
<li><code>-T</code> POST 数据所使用的 Content-type 头信息，如<code>-T “application/x-www-form-urlencoded”</code>，配合<code>-p</code>使用</li>
<li><code>-v</code> 设置显示信息的详细程度 – 4或更大值会显示头信息， 3或更大值可以显示响应代码(404, 200等), 2或更大值可以显示警告和其他信息。 -V 显示版本号并退出</li>
<li><code>-c</code> <code>-C cookie-name=value</code>对请求附加一个 Cookie:行。其典型形式是<code>name=value</code>的一个参数对。此参数可以重复，用逗号分割。</li>
<li><code>-w</code> 以 HTML 表的格式输出结果，默认是白色背景的两列宽度的一张表。</li>
</ul>
<p>  参数很多，一般我们用<code>-c</code>和<code>-n</code>参数就可以了，<code>ab -c 并发数 -n 请求数 URL地址</code>。</p>
<p><code>-c</code>后面的 10 表示采用 10 个并发（模拟 10 个人同时访问），<code>-n</code>后面的 10 代表总共发出 10 个请求；后面的网址表示测试的目标 URL。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/apache-bench/1.png" alt></p>
<ul>
<li>Document Path 测试页面</li>
<li>Document Length 页面大小</li>
<li>Concurrency Level 测试的并发数</li>
<li>Time taken for tests 整个测试持续的时间</li>
<li>Complete requests 完成的请求数量</li>
<li>Failed requests 失败的请求数量</li>
<li>Write errors: 0</li>
<li>Total transferred 整个过程中的网络传输量</li>
<li>HTML transferred 整个过程中的HTML内容传输量</li>
<li>Requests per second 最重要的指标之一，相当于LR中的每秒事务数，后面括号中的mean表示这是一个平均值</li>
<li>Time per request 最重要的指标之二，相当于LR中的平均事务响应时间，后面括号中的mean表示这是一个平均值</li>
<li>Time per request 每个连接请求实际运行时间的平均值</li>
<li>Transfer rate 平均每秒网络上的流量，可以帮助排除是否存在网络流量过大导致响应时间延长的问题</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>React 项目中同时引入 antd3.x 和 antd4.x</title>
    <url>/article/antd3-antd4-together.html</url>
    <content><![CDATA[<p>  公司的项目中一直使用的是<code>antd3.x</code>，最近有个需求，<code>TreeSelect</code>支持多选和模糊搜索的时候，模糊搜索后选中某个选项，不清除搜索条件，点击组件外其他地方才清除搜索条件。思路是如下：</p>
<ul>
<li>设置 autoClearSearchValue 为 false，选择选项后不清除搜索框</li>
<li>监听 onBlur 事件，触发时清除搜索框</li>
</ul>
<a id="more"></a>
<h3 id="一-使用-antd3-x"><a class="header-anchor" href="#一-使用-antd3-x">¶</a>一、使用 antd3.x</h3>
<p>  由于年久失修，antd3.x 有很多 api 有错误，会影响业务场景，这里就有一个坑：</p>
<p>  <code>antd3.x TreeSelect</code>，在第一次获得焦点时，会依次触发<code>onFocus</code>、<code>onBlur</code>、<code>onFocus</code>，此时会清除一下搜索框，第一次还没有输入搜索条件，清除也无伤大雅。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/antd3-antd4-together/1.gif" alt></p>
<p>  输入搜索内容后，选择某个选项，此时会发现，第一次选择选项，会再次出触发<code>onBlur</code>事件，这就让人很尴尬了，这样会让开发者无法区分<code>onBlur</code>到底是搜索后第一次选择选项触发的，还是点击组件外触发的，也就不能在<code>onBlur</code>事件中清除搜索条件，否则与需求不符。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/antd3-antd4-together/2.gif" alt></p>
<blockquote>
<p><strong>思考</strong><br>
我们去<code>antd4.x TreeSelect</code>尝试了一下，发现没有这个问题，所以着手引入 antd4.x；<br>
但是项目中目前暂时不能全部升级 antd4.x，否则改动太大；<br>
最终考虑同时引入 antd3.x 和 antd4.x。</p>
</blockquote>
<h3 id="二-使用-antd4-x"><a class="header-anchor" href="#二-使用-antd4-x">¶</a>二、使用 antd4.x</h3>
<h4 id="2-1-安装"><a class="header-anchor" href="#2-1-安装">¶</a>2.1、安装</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add antd-v4@npm:antd@^4</span><br></pre></td></tr></table></figure>
<p>  安装完成后可以在 package.json 和 yarn.lock 中看到安装的依赖：</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/antd3-antd4-together/3.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/antd3-antd4-together/4.png" alt></div></div><div class="group-picture-row"></div></div></div>
<h4 id="2-2-配置-css-loader"><a class="header-anchor" href="#2-2-配置-css-loader">¶</a>2.2、配置 css loader</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      include: [</span><br><span class="line">        path.resolve(__dirname, <span class="string">"../../node_modules/antd-v4"</span>),</span><br><span class="line">      ],</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">'style-loader'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'css-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            importLoaders: <span class="number">1</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'less-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            javascriptEnabled: <span class="literal">true</span>,</span><br><span class="line">            modifyVars: &#123;</span><br><span class="line">              <span class="string">'@ant-prefix'</span>: <span class="string">'ant-v4'</span>,</span><br><span class="line">              <span class="string">'@primary-color'</span>: <span class="string">'#237804'</span>, <span class="comment">// 主题色</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<ul>
<li><code>style-loader</code>将打包后的 css 代码添加到页面头部</li>
<li><code>css-loader</code>加载 css 文件，<code>importLoaders</code>的含义可参考：<a href="https://zhuanlan.zhihu.com/p/94706976" target="_black">css-loader中importLoaders的理解</a></li>
<li><code>less-loader</code>将 less 转成 css，<code>modifyVars</code>可以修改 less 中变量的值，我们再配合 antd4.x ConfigProvider 的 prefixCls 属性，搭配 ant-prefix 将样式前缀修改为<code>antd-v4</code>，故意修改下主题色，可以更显眼的看到是否成功</li>
</ul>
<p>  如果已经配置了 less loader，建议给之前的规则添加 exclude：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">exclude: [</span><br><span class="line">  path.resolve(__dirname, <span class="string">"../../node_modules/antd-v4"</span>),</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong><br>
<code>path.resolve</code> 处理的是 node_modules 中的 antd-v4，注意路径<br>
修改 webpack 配置后需要重启项目</p>
</blockquote>
<h4 id="2-3-引入样式-组件"><a class="header-anchor" href="#2-3-引入样式-组件">¶</a>2.3、引入样式、组件</h4>
<p>  在<code>/src/components</code>下新建一个文件夹 <code>TreeSelectV4</code>，添加 index.tsx：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装 antd4.x 的 TreeSelect</span></span><br><span class="line"><span class="comment"> * 使用的地方可以直接使用 TreeSelectV4，不再需要引入各种 antd4.x 的依赖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ConfigProvider, TreeSelect &#125; <span class="keyword">from</span> <span class="string">'antd-v4'</span>;</span><br><span class="line"><span class="keyword">import</span> zhCN <span class="keyword">from</span> <span class="string">'antd-v4/es/locale/zh_CN'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'antd-v4/dist/antd.less'</span>;</span><br><span class="line"><span class="comment">// import './style.scss'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> TreeSelectV4 <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ConfigProvider locale=&#123;zhCN&#125; prefixCls=<span class="string">"ant-v4"</span>&gt;</span><br><span class="line">        &lt;TreeSelect &#123;...this.props&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/ConfigProvider&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>prefixCls 是样式前缀，这里统一写成<code>ant-v4</code>。</li>
</ul>
<p><img src="https://images-hosting.liuxianyu.cn/posts/antd3-antd4-together/5.gif" alt></p>
<blockquote>
<p><strong>注意</strong><br>
建议完成以上内容后执行 lint、check-types、test 等命令<br>
建议升级<code>typescript</code>等相关依赖的版本</p>
</blockquote>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p>1、<a href="https://3x.ant.design/components/tree-select-cn/" target="_black">antd3.x 的 TreeSelect</a><br>
2、<a href="https://ant.design/components/tree-select-cn/" target="_black">antd4.x 的 TreeSelect</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title>账号簿开发（四）—— 写一个随机密码生成器</title>
    <url>/article/account-notebook-d.html</url>
    <content><![CDATA[<p>  用户在第一次注册网站时，可以使用<code>随机密码生成器</code>生成一个密码，可以控制密码长度和密码包含的内容项（大小写字母、数字、字符），不满意可以重新生成。</p>
<a id="more"></a>
<p>  这是一个系列随笔，主要记录『账号簿』微信小程序的开发过程：<br>
  <a href="https://liuxianyu.cn/article/account-notebook.html" target="_black">账号簿（微信小程序）的开发过程</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-a.html" target="_black">账号簿开发（一）—— 微信小程序 AES 加密解密</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-b.html" target="_black">账号簿开发（二）—— 微信小程序检查更新及调试</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-c.html" target="_black">账号簿开发（三）—— 微信小程序的云开发</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-d.html" target="_black">账号簿开发（四）—— 写一个随机密码生成器</a></p>
<h3 id="一-实现效果"><a class="header-anchor" href="#一-实现效果">¶</a>一、实现效果</h3>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/6.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/7.gif" alt></div></div><div class="group-picture-row"></div></div></div>
<h3 id="二-需求分解"><a class="header-anchor" href="#二-需求分解">¶</a>二、需求分解</h3>
<ul>
<li>写一个方法，接收密码包含的内容项（大小写字母、数字、字符）和需要的长度</li>
<li>根据密码长度确定每个内容项出现几次，取余后的从所有内容项中随机取</li>
<li>将上述得到的密码字符串使用乱序算法打乱</li>
</ul>
<h3 id="三-代码实现"><a class="header-anchor" href="#三-代码实现">¶</a>三、代码实现</h3>
<h4 id="3-1-基础单元"><a class="header-anchor" href="#3-1-基础单元">¶</a>3.1、基础单元</h4>
<ul>
<li>大写字母: <code>ABCDEFGHIJKLMNPQRSTUVWXYZ</code></li>
<li>小写字母: <code>abcdefghijklmnopqrstuvwxyz</code></li>
<li>数字: <code>1234567890</code></li>
<li>符号: <code>~!@#$%^&amp;*()[]{}:,./?-_+=&lt;&gt;</code></li>
</ul>
<h4 id="3-2-生成分段式密码"><a class="header-anchor" href="#3-2-生成分段式密码">¶</a>3.2、生成分段式密码</h4>
<p>  完整代码：<a href="https://github.com/liuxy0551/account-notebook/blob/master/src/utils/password.js" target="_black">/src/utils/password.js</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成随机密码</span></span><br><span class="line"><span class="comment"> * 1、先确定 average，平均每类选多少个字符</span></span><br><span class="line"><span class="comment"> * 2、remainder 剩余的从累加字符串中随机取</span></span><br><span class="line"><span class="comment"> * 3、使用乱序算法，打乱字符串 https://blog.csdn.net/yunlliang/article/details/41084785</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>包含的项，upper 大写字母，lower 小写字母，number 数字，symbol 特殊符号  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>密码长度 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="variable">string</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getRandomPassword = <span class="function">(<span class="params">arr = [], length</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> average = <span class="built_in">Math</span>.floor(length / arr.length)</span><br><span class="line">    <span class="keyword">const</span> remainder = length % arr.length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>, allStr = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        str += getRandomStr(i, average)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> allStr += strObj[item])</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; remainder; i++) &#123;</span><br><span class="line">        str += allStr[random(allStr.length)]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shuffle(str.split(<span class="string">''</span>)).join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取固定个数的字符串</span></span><br><span class="line"><span class="keyword">const</span> getRandomStr = <span class="function">(<span class="params">key, average</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> str = strObj[key], result = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; average; i++) &#123;</span><br><span class="line">        result += str[random(str.length)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成范围内的随机整数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>max </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>min </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="variable">number</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> random = <span class="function">(<span class="params">max, min = <span class="number">0</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min)) + min</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-3-乱序算法"><a class="header-anchor" href="#3-3-乱序算法">¶</a>3.3、乱序算法</h4>
<p>  上述拿到的密码是一个分段式的密码，举个例子，我需要长度为 8 且包含大小写字母、数字的密码，那么经常上述方法，得到的会是这样一个密码：<code>Aa1Aa1Aa</code>，即按包含的项依次拿出单个字符串的密码，最后拼接在一起。<br>
  显然上述得到的密码不太实用，而且不够安全，这时候可以将上述密码打乱一下顺序，即可得到最终的密码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 乱序算法</span></span><br><span class="line"><span class="keyword">const</span> shuffle = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">let</span> j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (i + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">let</span> temp = arr[i]</span><br><span class="line">        arr[i] = arr[j]</span><br><span class="line">        arr[j] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-4-组件调用"><a class="header-anchor" href="#3-4-组件调用">¶</a>3.4、组件调用</h4>
<p>  完整代码：<a href="https://github.com/liuxy0551/account-notebook/blob/master/src/pages/account/components/NewPassword/index.jsx" target="_black">/src/pages/account/components/NewPassword/index.jsx</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> checkboxList = [</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">'upper'</span>, <span class="attr">label</span>: <span class="string">'包含大写字母'</span>, <span class="attr">checked</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">'lower'</span>, <span class="attr">label</span>: <span class="string">'包含小写字母'</span>, <span class="attr">checked</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">'number'</span>, <span class="attr">label</span>: <span class="string">'包含数字'</span>, <span class="attr">checked</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">'symbol'</span>, <span class="attr">label</span>: <span class="string">'包含符号'</span>, <span class="attr">checked</span>: <span class="literal">false</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> checkboxValue = checkboxList.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.checked).map(<span class="function"><span class="params">item</span> =&gt;</span> item.value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lengthIdx = <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> lengthList = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">6</span>; i &lt;= <span class="number">30</span>; i++) &#123;</span><br><span class="line">    lengthList.push(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> password = getRandomPassword(checkboxValue, lengthList[lengthIdx])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Sequelize 中的一对一、一对多、多对多</title>
    <url>/article/sequelize-association.html</url>
    <content><![CDATA[<p>  最近做了写公司中的基建工作，其中涉及到了 node 项目中使用 sequelize，同时有多对多的关系需要处理，便写了个关于 sequelize 处理多对多关系的练手示例，<a href="https://github.com/liuxy0551/sequelize-association" target="_black">liuxy0551/sequelize-association</a>，目前仅涉及查询，<code>create</code>和<code>update</code>暂未进行。</p>
<a id="more"></a>
<p>  sql 语句 <a href="https://github.com/liuxy0551/sequelize-association/tree/master/sql" target="_black">点此查看</a>。</p>
<h3 id="一-一对一"><a class="header-anchor" href="#一-一对一">¶</a>一、一对一</h3>
<p>  一对一的举例是：一个中国公民 (Chinese) 只有一个身份证号 (IDNumber) ，具体实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> models = initModels(sequelize)</span><br><span class="line"><span class="keyword">const</span> &#123; Chinese, IDNumber &#125; = models</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立关系</span></span><br><span class="line">Chinese.hasOne(IDNumber, &#123; <span class="attr">foreignKey</span>: <span class="string">'id'</span>, <span class="attr">sourceKey</span>: <span class="string">'IDNumberId'</span>, <span class="attr">as</span>: <span class="string">'IDNumberInfo'</span> &#125;)</span><br><span class="line">IDNumber.belongsTo(Chinese, &#123; <span class="attr">foreignKey</span>: <span class="string">'id'</span>, <span class="attr">targetKey</span>: <span class="string">'IDNumberId'</span> &#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// service 层实现</span></span><br><span class="line"><span class="keyword">async</span> getChinese (ctx) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; offset, limit, page, pageSize &#125; = getPage(ctx.query)</span><br><span class="line">        <span class="keyword">const</span> &#123; count, rows &#125; = <span class="keyword">await</span> DB.Chinese.findAndCountAll(&#123;</span><br><span class="line">            where: getWhere(),</span><br><span class="line">            attributes: &#123;</span><br><span class="line">                exclude: getExclude(),</span><br><span class="line">            &#125;,</span><br><span class="line">            include: [</span><br><span class="line">                &#123;</span><br><span class="line">                    model: DB.IDNumber,</span><br><span class="line">                    <span class="keyword">as</span>: <span class="string">"IDNumberInfo"</span>,</span><br><span class="line">                    required: <span class="literal">false</span>,</span><br><span class="line">                    where: getWhere(),</span><br><span class="line">                    attributes: &#123;</span><br><span class="line">                        exclude: getExclude(),</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            ],</span><br><span class="line">            offset,</span><br><span class="line">            limit,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> setCtxBody(<span class="number">200</span>, rows, <span class="string">'成功'</span>, &#123; <span class="attr">total</span>: count, page, pageSize &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> setCtxBody(<span class="number">500</span>, error, <span class="string">'系统错误'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  接口返回的结果如下：<br>
<img src="https://images-hosting.liuxianyu.cn/posts/sequelize-association/1.png" alt></p>
<p>  sequelize 自动生成的 sql 语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	<span class="string">`Chinese`</span>.<span class="string">`id`</span>,</span><br><span class="line">	<span class="string">`Chinese`</span>.<span class="string">`IDNumberId`</span>,</span><br><span class="line">	<span class="string">`Chinese`</span>.<span class="string">`name`</span>,</span><br><span class="line">	<span class="string">`Chinese`</span>.<span class="string">`createdAt`</span>,</span><br><span class="line">	<span class="string">`Chinese`</span>.<span class="string">`updatedAt`</span>,</span><br><span class="line">	<span class="string">`IDNumberInfo`</span>.<span class="string">`id`</span> <span class="keyword">AS</span> <span class="string">`IDNumberInfo.id`</span>,</span><br><span class="line">	<span class="string">`IDNumberInfo`</span>.<span class="string">`number`</span> <span class="keyword">AS</span> <span class="string">`IDNumberInfo.number`</span>,</span><br><span class="line">	<span class="string">`IDNumberInfo`</span>.<span class="string">`address`</span> <span class="keyword">AS</span> <span class="string">`IDNumberInfo.address`</span>,</span><br><span class="line">	<span class="string">`IDNumberInfo`</span>.<span class="string">`createdAt`</span> <span class="keyword">AS</span> <span class="string">`IDNumberInfo.createdAt`</span>,</span><br><span class="line">	<span class="string">`IDNumberInfo`</span>.<span class="string">`updatedAt`</span> <span class="keyword">AS</span> <span class="string">`IDNumberInfo.updatedAt`</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	<span class="string">`Chinese`</span> <span class="keyword">AS</span> <span class="string">`Chinese`</span></span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="string">`IDNumber`</span> <span class="keyword">AS</span> <span class="string">`IDNumberInfo`</span> <span class="keyword">ON</span> <span class="string">`Chinese`</span>.<span class="string">`IDNumberId`</span> = <span class="string">`IDNumberInfo`</span>.<span class="string">`id`</span> </span><br><span class="line">	<span class="keyword">AND</span> <span class="string">`IDNumberInfo`</span>.<span class="string">`isDeleted`</span> = <span class="number">0</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	<span class="string">`Chinese`</span>.<span class="string">`isDeleted`</span> = <span class="number">0</span> </span><br><span class="line">	<span class="keyword">LIMIT</span> <span class="number">0</span>,</span><br><span class="line">	<span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<h3 id="二-一对多"><a class="header-anchor" href="#二-一对多">¶</a>二、一对多</h3>
<p>  一对多的举例是：一个省份 (Province) 有多个市 (City)，具体实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> models = initModels(sequelize)</span><br><span class="line"><span class="keyword">const</span> &#123; Province, City &#125; = models</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立关系</span></span><br><span class="line">Province.hasMany(City, &#123; <span class="attr">as</span>: <span class="string">'cityList'</span> &#125;)</span><br><span class="line">City.belongsTo(Province, &#123; <span class="attr">foreignKey</span>: <span class="string">'id'</span> &#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// service 层实现</span></span><br><span class="line"><span class="keyword">async</span> getProvinceList (ctx) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; offset, limit, page, pageSize &#125; = getPage(ctx.query)</span><br><span class="line">        <span class="keyword">const</span> &#123; count, rows &#125; = <span class="keyword">await</span> DB.Province.findAndCountAll(&#123;</span><br><span class="line">            where: getWhere(),</span><br><span class="line">            attributes: &#123;</span><br><span class="line">                exclude: getExclude(),</span><br><span class="line">            &#125;,</span><br><span class="line">            include: [</span><br><span class="line">                &#123;</span><br><span class="line">                    model: DB.City,</span><br><span class="line">                    <span class="keyword">as</span>: <span class="string">'cityList'</span>,</span><br><span class="line">                    required: <span class="literal">false</span>,</span><br><span class="line">                    where: getWhere(),</span><br><span class="line">                    attributes: &#123;</span><br><span class="line">                        exclude: getExclude([<span class="string">'ProvinceId'</span>]),</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            offset,</span><br><span class="line">            limit,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> setCtxBody(<span class="number">200</span>, rows, <span class="string">'成功'</span>, &#123; <span class="attr">total</span>: count, page, pageSize &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> setCtxBody(<span class="number">500</span>, error, <span class="string">'系统错误'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  接口返回的结果如下：<br>
<img src="https://images-hosting.liuxianyu.cn/posts/sequelize-association/2.png" alt></p>
<p>  sequelize 自动生成的 sql 语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	<span class="string">`Province`</span>.*,</span><br><span class="line">	<span class="string">`cityList`</span>.<span class="string">`id`</span> <span class="keyword">AS</span> <span class="string">`cityList.id`</span>,</span><br><span class="line">	<span class="string">`cityList`</span>.<span class="string">`provinceId`</span> <span class="keyword">AS</span> <span class="string">`cityList.provinceId`</span>,</span><br><span class="line">	<span class="string">`cityList`</span>.<span class="string">`name`</span> <span class="keyword">AS</span> <span class="string">`cityList.name`</span>,</span><br><span class="line">	<span class="string">`cityList`</span>.<span class="string">`createdAt`</span> <span class="keyword">AS</span> <span class="string">`cityList.createdAt`</span>,</span><br><span class="line">	<span class="string">`cityList`</span>.<span class="string">`updatedAt`</span> <span class="keyword">AS</span> <span class="string">`cityList.updatedAt`</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	(</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		<span class="string">`Province`</span>.<span class="string">`id`</span>,</span><br><span class="line">		<span class="string">`Province`</span>.<span class="string">`name`</span>,</span><br><span class="line">		<span class="string">`Province`</span>.<span class="string">`createdAt`</span>,</span><br><span class="line">		<span class="string">`Province`</span>.<span class="string">`updatedAt`</span> </span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		<span class="string">`Province`</span> <span class="keyword">AS</span> <span class="string">`Province`</span> </span><br><span class="line">	<span class="keyword">WHERE</span></span><br><span class="line">		<span class="string">`Province`</span>.<span class="string">`isDeleted`</span> = <span class="number">0</span> </span><br><span class="line">		<span class="keyword">LIMIT</span> <span class="number">0</span>,</span><br><span class="line">		<span class="number">10</span> </span><br><span class="line">	) <span class="keyword">AS</span> <span class="string">`Province`</span></span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="string">`City`</span> <span class="keyword">AS</span> <span class="string">`cityList`</span> <span class="keyword">ON</span> <span class="string">`Province`</span>.<span class="string">`id`</span> = <span class="string">`cityList`</span>.<span class="string">`ProvinceId`</span> </span><br><span class="line">	<span class="keyword">AND</span> <span class="string">`cityList`</span>.<span class="string">`isDeleted`</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h3 id="三-多对多"><a class="header-anchor" href="#三-多对多">¶</a>三、多对多</h3>
<p>  多对多的举例是：一部电影 (Movie) 有多个演员 (Actor), 一个演员 (Actor) 参演多部电影 (Movie)，具体实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> models = initModels(sequelize)</span><br><span class="line"><span class="keyword">const</span> &#123; Movie, Actor, MovieActor &#125; = models</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立关系</span></span><br><span class="line">Movie.belongsToMany(Actor, &#123; <span class="attr">through</span>: MovieActor, <span class="attr">as</span>: <span class="string">'actorList'</span> &#125;)</span><br><span class="line">Actor.belongsToMany(Movie, &#123; <span class="attr">through</span>: MovieActor, <span class="attr">as</span>: <span class="string">'movieList'</span> &#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// service 层实现</span></span><br><span class="line"><span class="keyword">async</span> getMovieListWithActors (ctx) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; offset, limit, page, pageSize &#125; = getPage(ctx.query)</span><br><span class="line">        <span class="keyword">const</span> &#123; count, rows &#125; = <span class="keyword">await</span> DB.Movie.findAndCountAll(&#123;</span><br><span class="line">            where: getWhere(),</span><br><span class="line">            attributes: &#123;</span><br><span class="line">                exclude: getExclude()</span><br><span class="line">            &#125;,</span><br><span class="line">            include: [</span><br><span class="line">                &#123;</span><br><span class="line">                    model: DB.Actor,</span><br><span class="line">                    <span class="keyword">as</span>: <span class="string">'actorList'</span>,</span><br><span class="line">                    required: <span class="literal">false</span>,</span><br><span class="line">                    where: getWhere(),</span><br><span class="line">                    attributes: &#123;</span><br><span class="line">                        exclude: getExclude(),</span><br><span class="line">                    &#125;,</span><br><span class="line">                    through: &#123; <span class="attr">attributes</span>: [] &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            offset,</span><br><span class="line">            limit,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> setCtxBody(<span class="number">200</span>, rows, <span class="string">'成功'</span>, &#123; <span class="attr">total</span>: count, page, pageSize &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> setCtxBody(<span class="number">500</span>, error, <span class="string">'系统错误'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> getActorListWithMovies (ctx) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; offset, limit, page, pageSize &#125; = getPage(ctx.query)</span><br><span class="line">        <span class="keyword">const</span> &#123; count, rows &#125; = <span class="keyword">await</span> DB.Actor.findAndCountAll(&#123;</span><br><span class="line">            where: getWhere(),</span><br><span class="line">            attributes: &#123;</span><br><span class="line">                exclude: getExclude()</span><br><span class="line">            &#125;,</span><br><span class="line">            include: [</span><br><span class="line">                &#123;</span><br><span class="line">                    model: DB.Movie,</span><br><span class="line">                    <span class="keyword">as</span>: <span class="string">'movieList'</span>,</span><br><span class="line">                    required: <span class="literal">false</span>,</span><br><span class="line">                    where: getWhere(),</span><br><span class="line">                    attributes: &#123;</span><br><span class="line">                        exclude: getExclude([<span class="string">'MovieActor'</span>]),</span><br><span class="line">                    &#125;,</span><br><span class="line">                    through: &#123; <span class="attr">attributes</span>: [] &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            offset,</span><br><span class="line">            limit,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> setCtxBody(<span class="number">200</span>, rows, <span class="string">'成功'</span>, &#123; <span class="attr">total</span>: count, page, pageSize &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> setCtxBody(<span class="number">500</span>, error, <span class="string">'系统错误'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  接口返回的结果如下：<br>
<img src="https://images-hosting.liuxianyu.cn/posts/sequelize-association/3.png" alt><br>
<img src="https://images-hosting.liuxianyu.cn/posts/sequelize-association/4.png" alt></p>
<p>  sequelize 自动生成的 sql 语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 多对多 getActorListWithMovies</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	<span class="string">`Actor`</span>.*,</span><br><span class="line">	<span class="string">`movieList`</span>.<span class="string">`id`</span> <span class="keyword">AS</span> <span class="string">`movieList.id`</span>,</span><br><span class="line">	<span class="string">`movieList`</span>.<span class="string">`name`</span> <span class="keyword">AS</span> <span class="string">`movieList.name`</span>,</span><br><span class="line">	<span class="string">`movieList`</span>.<span class="string">`createdAt`</span> <span class="keyword">AS</span> <span class="string">`movieList.createdAt`</span>,</span><br><span class="line">	<span class="string">`movieList`</span>.<span class="string">`updatedAt`</span> <span class="keyword">AS</span> <span class="string">`movieList.updatedAt`</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	(</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		<span class="string">`Actor`</span>.<span class="string">`id`</span>,</span><br><span class="line">		<span class="string">`Actor`</span>.<span class="string">`name`</span>,</span><br><span class="line">		<span class="string">`Actor`</span>.<span class="string">`createdAt`</span>,</span><br><span class="line">		<span class="string">`Actor`</span>.<span class="string">`updatedAt`</span> </span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		<span class="string">`Actor`</span> <span class="keyword">AS</span> <span class="string">`Actor`</span> </span><br><span class="line">	<span class="keyword">WHERE</span></span><br><span class="line">		<span class="string">`Actor`</span>.<span class="string">`isDeleted`</span> = <span class="number">0</span> </span><br><span class="line">		<span class="keyword">LIMIT</span> <span class="number">0</span>,</span><br><span class="line">		<span class="number">10</span> </span><br><span class="line">	) <span class="keyword">AS</span> <span class="string">`Actor`</span></span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> (</span><br><span class="line">		<span class="string">`MovieActor`</span> <span class="keyword">AS</span> <span class="string">`movieList-&gt;MovieActor`</span></span><br><span class="line">		<span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`Movie`</span> <span class="keyword">AS</span> <span class="string">`movieList`</span> <span class="keyword">ON</span> <span class="string">`movieList`</span>.<span class="string">`id`</span> = <span class="string">`movieList-&gt;MovieActor`</span>.<span class="string">`MovieId`</span> </span><br><span class="line">	) <span class="keyword">ON</span> <span class="string">`Actor`</span>.<span class="string">`id`</span> = <span class="string">`movieList-&gt;MovieActor`</span>.<span class="string">`ActorId`</span> </span><br><span class="line">	<span class="keyword">AND</span> <span class="string">`movieList`</span>.<span class="string">`isDeleted`</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 多对多 getMovieListWithActors</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	<span class="string">`Movie`</span>.*,</span><br><span class="line">	<span class="string">`actorList`</span>.<span class="string">`id`</span> <span class="keyword">AS</span> <span class="string">`actorList.id`</span>,</span><br><span class="line">	<span class="string">`actorList`</span>.<span class="string">`name`</span> <span class="keyword">AS</span> <span class="string">`actorList.name`</span>,</span><br><span class="line">	<span class="string">`actorList`</span>.<span class="string">`createdAt`</span> <span class="keyword">AS</span> <span class="string">`actorList.createdAt`</span>,</span><br><span class="line">	<span class="string">`actorList`</span>.<span class="string">`updatedAt`</span> <span class="keyword">AS</span> <span class="string">`actorList.updatedAt`</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	(</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		<span class="string">`Movie`</span>.<span class="string">`id`</span>,</span><br><span class="line">		<span class="string">`Movie`</span>.<span class="string">`name`</span>,</span><br><span class="line">		<span class="string">`Movie`</span>.<span class="string">`createdAt`</span>,</span><br><span class="line">		<span class="string">`Movie`</span>.<span class="string">`updatedAt`</span> </span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		<span class="string">`Movie`</span> <span class="keyword">AS</span> <span class="string">`Movie`</span> </span><br><span class="line">	<span class="keyword">WHERE</span></span><br><span class="line">		<span class="string">`Movie`</span>.<span class="string">`isDeleted`</span> = <span class="number">0</span> </span><br><span class="line">		<span class="keyword">LIMIT</span> <span class="number">0</span>,</span><br><span class="line">		<span class="number">10</span> </span><br><span class="line">	) <span class="keyword">AS</span> <span class="string">`Movie`</span></span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> (</span><br><span class="line">		<span class="string">`MovieActor`</span> <span class="keyword">AS</span> <span class="string">`actorList-&gt;MovieActor`</span></span><br><span class="line">		<span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`Actor`</span> <span class="keyword">AS</span> <span class="string">`actorList`</span> <span class="keyword">ON</span> <span class="string">`actorList`</span>.<span class="string">`id`</span> = <span class="string">`actorList-&gt;MovieActor`</span>.<span class="string">`ActorId`</span> </span><br><span class="line">	) <span class="keyword">ON</span> <span class="string">`Movie`</span>.<span class="string">`id`</span> = <span class="string">`actorList-&gt;MovieActor`</span>.<span class="string">`MovieId`</span> </span><br><span class="line">	<span class="keyword">AND</span> <span class="string">`actorList`</span>.<span class="string">`isDeleted`</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h3 id="四-注意事项"><a class="header-anchor" href="#四-注意事项">¶</a>四、注意事项</h3>
<p>  1、在使用关联关系进行查询时，请求参数中不要使用<code>raw: true</code>，<code>raw</code>默认为 false，此时 sequelize 会自动拼接一些参数，设为 true 的话，会丢失参数导致数据结构错乱，如下图：<br>
<img src="https://images-hosting.liuxianyu.cn/posts/sequelize-association/5.png" alt><br>
  2、一对多时会出现返回的结果包含了大驼峰写法的关联 id 及值，可通过<code>include attributes exclude</code>将该字段过滤；<br>
  3、多对多时，一般不需要展示关联表的字段，可通过<code>include through attributes</code>将关联表字段过滤，如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; count, rows &#125; = <span class="keyword">await</span> DB.Actor.findAndCountAll(&#123;</span><br><span class="line">    ...</span><br><span class="line">    include: [</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">            through: &#123; <span class="attr">attributes</span>: [] &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/sequelize-association/6.png" alt><br>
  4、建立关联关系时，可在<code>app/utils/mysql/db.js</code>中进行，引入的 initModels 中导出了所有 model 层，可参考：<a href="https://github.com/liuxy0551/sequelize-association/blob/master/app/utils/mysql/db.js" target="_black">app/utils/mysql/db.js</a>。<br>
  5、多对多的关联查询可以分解为以下四条 sql 进行，在数据量大的时候能减少查询时间，也是简化 sql 语句的方法：</p>
<ul>
<li>查询电影表的总数量 total</li>
<li>查询电影表前十条数据</li>
<li>拿着上述十条数据去关联表查询关联数据，对关联的演员信息进行去重</li>
<li>拿着上述去重后的演员信息在演员表中查询，由代码拼装数据再从接口返回</li>
</ul>
<h3 id="五-占坑文章"><a class="header-anchor" href="#五-占坑文章">¶</a>五、占坑文章</h3>
<p>  1、预先加载，参考 <a href="https://www.sequelize.com.cn/advanced-association-concepts/eager-loading" target="_black">Sequelize 中文文档 - 预先加载</a></p>
<h3 id="六-参考文章"><a class="header-anchor" href="#六-参考文章">¶</a>六、参考文章</h3>
<p>  练习过程中较多的参考了以下文章中提到的内容，在此感谢：</p>
<p>[1] <a href="https://www.sequelize.com.cn/core-concepts/assocs" target="_black">Sequelize 中文文档 - 关联</a><br>
[2] <a href="https://sequelize.org/master/manual/assocs.html#many-to-many-relationships" target="_black">Sequelize 英文官网 Many-To-Many relationships</a></p>
]]></content>
      <categories>
        <category>node</category>
        <category>Sequelize</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>Sequelize</tag>
      </tags>
  </entry>
  <entry>
    <title>账号簿开发（三）—— 微信小程序的云开发和云函数</title>
    <url>/article/account-notebook-c.html</url>
    <content><![CDATA[<p>  微信小程序的云开发是腾讯云为小程序提供的开发能力，可以省去后端的工作，也可以节省很多运维的工作，有些类似于 Serverless 和之前学习的<code>函数计算</code>，官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html" target="_black">微信云开发</a>。云开发的初始入门可以看看哔站上的视频，入门够用了，推荐一个：<a href="https://www.bilibili.com/video/BV1pE411C7Ca" target="_black">认识云开发</a>。</p>
<a id="more"></a>
<p>  这是一个系列随笔，主要记录『账号簿』微信小程序的开发过程：<br>
  <a href="https://liuxianyu.cn/article/account-notebook.html" target="_black">账号簿（微信小程序）的开发过程</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-a.html" target="_black">账号簿开发（一）—— 微信小程序 AES 加密解密</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-b.html" target="_black">账号簿开发（二）—— 微信小程序检查更新及调试</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-c.html" target="_black">账号簿开发（三）—— 微信小程序的云开发</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-d.html" target="_black">账号簿开发（四）—— 写一个随机密码生成器</a></p>
<h3 id="一-云能力初始化"><a class="header-anchor" href="#一-云能力初始化">¶</a>一、云能力初始化</h3>
<p>  小程序端使用云能力前需要先完成初始化，<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/init.html" target="_black">小程序端初始化</a>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line">onLoad() &#123;</span><br><span class="line">  wx.cloud.init(&#123;</span><br><span class="line">    env: <span class="string">'prod-32r233wer424as22fq'</span>,</span><br><span class="line">    traceUser: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二-数据库"><a class="header-anchor" href="#二-数据库">¶</a>二、数据库</h3>
<p>  使用数据库前先获取数据库的引用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DB = wx.cloud.database()</span><br></pre></td></tr></table></figure>
<h4 id="2-1-增"><a class="header-anchor" href="#2-1-增">¶</a>2.1、增</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">DB.collection(<span class="string">'user'</span>).add(&#123;</span><br><span class="line">  name: <span class="string">'Tom'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="2-2-改"><a class="header-anchor" href="#2-2-改">¶</a>2.2、改</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">DB.collection(<span class="string">'user'</span>).where(&#123;</span><br><span class="line">  name: <span class="string">'Tom'</span></span><br><span class="line">&#125;).update(&#123;</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="2-3-查"><a class="header-anchor" href="#2-3-查">¶</a>2.3、查</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> DB.collection(<span class="string">'user'</span>).where(&#123;</span><br><span class="line">  name: <span class="string">'Tom'</span></span><br><span class="line">&#125;).get()</span><br><span class="line"><span class="built_in">console</span>.log(user) <span class="comment">// &#123; name: 'Tom', age: 20 &#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="三-云函数"><a class="header-anchor" href="#三-云函数">¶</a>三、云函数</h3>
<p>  云函数的优点有很多，比如在小程序端进行数据库插入时，会有条数限制，云函数则没有；天然鉴权，请求自带 openId 等等优势，和 Serverless 及之前学习的<code>函数计算</code>一致，官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions.html" target="_black">云函数</a>。<br>
  推荐哔站的一个云函数入门视频：<a href="https://www.bilibili.com/video/BV1pE411C7Ca?p=12" target="_black">开发者工具中新建云函数</a>。</p>
<p>  代码参考：<a href="https://github.com/liuxy0551/account-notebook/tree/master/cloud" target="_black">获取用户 openId</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>账号簿开发（二）—— 微信小程序检查更新及调试</title>
    <url>/article/account-notebook-b.html</url>
    <content><![CDATA[<p>  微信小程序发布上线后，对其进行迭代也需要微信官方审核代码，之后才可以发布新版本，对于已经使用过该小程序的用户来说，会因为缓存的关系，在小程序发布后不能及时更新到新版本。对于某些 bug 修复的版本，开发者总是希望能立即生效的，类似于 H5 的热更新，这时可以使用到微信提供的 <code>wx.getUpdateManager()</code>。官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/update/wx.getUpdateManager.html" target="_black">wx.getUpdateManager()</a></p>
<a id="more"></a>
<p>  这是一个系列随笔，主要记录『账号簿』微信小程序的开发过程：<br>
  <a href="https://liuxianyu.cn/article/account-notebook.html" target="_black">账号簿（微信小程序）的开发过程</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-a.html" target="_black">账号簿开发（一）—— 微信小程序 AES 加密解密</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-b.html" target="_black">账号簿开发（二）—— 微信小程序检查更新及调试</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-c.html" target="_black">账号簿开发（三）—— 微信小程序的云开发</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-d.html" target="_black">账号簿开发（四）—— 写一个随机密码生成器</a></p>
<h3 id="一-代码封装"><a class="header-anchor" href="#一-代码封装">¶</a>一、代码封装</h3>
<p>  可以新建目录 <code>/src/utils/wechat</code>，在 wechat 目录下新建文件 <code>update.js</code>，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测小程序更新</span></span><br><span class="line"><span class="keyword">const</span> getUpdateInfo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!wx.canIUse(<span class="string">'getUpdateManager'</span>)) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">const</span> updateManager = wx.getUpdateManager()</span><br><span class="line">  updateManager.onCheckForUpdate(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.hasUpdate) &#123;</span><br><span class="line">      updateManager.onUpdateReady(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        wx.showModal(&#123;</span><br><span class="line">          title: <span class="string">'更新提示'</span>,</span><br><span class="line">          content: <span class="string">'新版本已经准备好了，是否立即重启小程序？'</span>,</span><br><span class="line">          success: <span class="function">(<span class="params">&#123; confirm &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 新版本已经下载好，调用 applyUpdate 应用新版本并重启</span></span><br><span class="line">            confirm &amp;&amp; updateManager.applyUpdate()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      updateManager.onUpdateFailed(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 新版本下载失败</span></span><br><span class="line">        wx.showModal(&#123;</span><br><span class="line">          title: <span class="string">'已经有新版本了哟~'</span>,</span><br><span class="line">          content: <span class="string">'新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  getUpdateInfo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二-使用"><a class="header-anchor" href="#二-使用">¶</a>二、使用</h3>
<p>  可以在小程序入口文件 <code>app.js</code> 中的 onLoad 方法中使用封装的 getUpdateInfo 方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getUpdateInfo &#125; <span class="keyword">from</span> <span class="string">'@/utils/wechat/update'</span></span><br><span class="line"></span><br><span class="line">onLoad() &#123;</span><br><span class="line">  getUpdateInfo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三-微信开发者工具调试"><a class="header-anchor" href="#三-微信开发者工具调试">¶</a>三、微信开发者工具调试</h3>
<blockquote>
<p><strong>注意</strong><br>
<strong>小程序 开发版/体验版 没有「版本」概念，所以无法在 开发版/体验版 上测试版本更新情况</strong></p>
</blockquote>
<p>  勾选<code>编译模式</code>下的<code>下次编译模拟更新</code>，并选择成功状态或失败状态，确认后点击<code>编译</code>按钮稍候片刻即可查看模拟效果：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/4.png" alt><br>
<img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/5.png" alt></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>账号簿开发（一）—— 微信小程序 AES 加密解密</title>
    <url>/article/account-notebook-a.html</url>
    <content><![CDATA[<p>  『账号簿』作为一款记录账号密码的微信小程序而言，安全自然是很重要的，基于此放弃了自行搭建数据库的打算，使用了腾讯云为微信小程序提供的云开发功能，同时也提供数据库的功能，是一个对象型的数据库，安全性比自己在 Docker 中搭建的数据库要高且有更多保障。但是即便如此，上传到数据库的账号密码也使用了业内普遍认可的 AES 对称加密算法进行加密再经 BASE64 编码。这里记录一下 AES 加密后再经 BASE64 编码的过程。</p>
<a id="more"></a>
<p>  这是一个系列随笔，主要记录『账号簿』微信小程序的开发过程：<br>
  <a href="https://liuxianyu.cn/article/account-notebook.html" target="_black">账号簿（微信小程序）的开发过程</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-a.html" target="_black">账号簿开发（一）—— 微信小程序 AES 加密解密</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-b.html" target="_black">账号簿开发（二）—— 微信小程序检查更新及调试</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-c.html" target="_black">账号簿开发（三）—— 微信小程序的云开发</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-d.html" target="_black">账号簿开发（四）—— 写一个随机密码生成器</a></p>
<h3 id="一-cryptojs"><a class="header-anchor" href="#一-cryptojs">¶</a>一、CryptoJS</h3>
<p>  依赖 CryptoJS 进行加密，可以新建目录 <code>/src/utils/lib</code>，在 lib 目录下新建文件 <code>CryptoJS.js</code>，具体代码见：<a href="https://github.com/liuxy0551/account-notebook/blob/master/src/utils/cloudSync/lib/CryptoJS.js#L1" target="_black">CryptoJS.js</a>，然后在 utils 目录下新建文件 <code>crypto.js</code>，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密过程：先对账号和密码进行 AES 加密，再进行 BASE64 编码</span></span><br><span class="line"><span class="comment"> * 解密过程：与加密过程相反</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> CryptoJS <span class="keyword">from</span> <span class="string">'./lib/CryptoJS'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key = CryptoJS.enc.Utf8.parse(<span class="string">'0102030405060807'</span>) <span class="comment">// 十六位十六进制数作为秘钥</span></span><br><span class="line"><span class="keyword">const</span> iv = CryptoJS.enc.Utf8.parse(<span class="string">'0102030405060807'</span>) <span class="comment">// 十六位十六进制数作为秘钥偏移量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// aes 加密</span></span><br><span class="line"><span class="keyword">const</span> aesEncrypt = <span class="function">(<span class="params">word</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> srcs = CryptoJS.enc.Utf8.parse(word)</span><br><span class="line">    <span class="keyword">let</span> encrypted = CryptoJS.AES.encrypt(srcs, key, &#123;</span><br><span class="line">        iv,</span><br><span class="line">        mode: CryptoJS.mode.CBC,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> Base64Encode(encrypted.ciphertext.toString().toUpperCase())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// aes 解密</span></span><br><span class="line"><span class="keyword">const</span> aesDecrypt = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> word = Base64Decode(val)</span><br><span class="line">    <span class="keyword">let</span> encryptedHexStr = CryptoJS.enc.Hex.parse(word)</span><br><span class="line">    <span class="keyword">let</span> srcs = CryptoJS.enc.Base64.stringify(encryptedHexStr)</span><br><span class="line">    <span class="keyword">let</span> decrypt = CryptoJS.AES.decrypt(srcs, key, &#123;</span><br><span class="line">        iv,</span><br><span class="line">        mode: CryptoJS.mode.CBC,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> decryptedStr = decrypt.toString(CryptoJS.enc.Utf8)</span><br><span class="line">    <span class="keyword">return</span> decryptedStr.toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// base64 加密</span></span><br><span class="line"><span class="keyword">const</span> Base64Encode = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> str = CryptoJS.enc.Utf8.parse(val)</span><br><span class="line">    <span class="keyword">let</span> base64 = CryptoJS.enc.Base64.stringify(str)</span><br><span class="line">    <span class="keyword">return</span> base64</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// base64 解密</span></span><br><span class="line"><span class="keyword">const</span> Base64Decode = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> words = CryptoJS.enc.Base64.parse(val)</span><br><span class="line">    <span class="keyword">return</span> words.toString(CryptoJS.enc.Utf8)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    aesEncrypt,</span><br><span class="line">    aesDecrypt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二-使用"><a class="header-anchor" href="#二-使用">¶</a>二、使用</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; aesEncrypt, aesDecrypt &#125; <span class="keyword">from</span> <span class="string">'@/utils/crypto'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> password = <span class="string">'Aa@.-123456'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'原密码：'</span>, password) <span class="comment">// Aa@.-123456</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'加密后：'</span>, aesEncrypt(password)) <span class="comment">// MTgzRDhEQTA1ODUzQzMwMDU0NkQyQ0FGQTg4RDI3NjQ</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'解密后：'</span>, aesDecrypt(aesEncrypt(password))) <span class="comment">// Aa@.-123456</span></span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/3.png" alt></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>加密解密</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>账号簿（微信小程序）的开发过程</title>
    <url>/article/account-notebook.html</url>
    <content><![CDATA[<p>  最近公司的业务比较繁忙，几乎停止了随笔的更新，反省下自己。</p>
<p>  但还是利用两个周末开发了一个之前一直想做的小程序，idea 来自一位朋友，他想自己做一个记录账号密码的微信小程序给自己使用，他是位后端，即便学习了 Vue 的知识，但还是没开始这项工作，那就由我来完成吧。</p>
<a id="more"></a>
<p>  会围绕这个小程序的开发过程写几篇系列随笔，主要是为了在以后开发小程序的过程中可以有所参考和改进。<a href="https://github.com/liuxy0551/account-notebook" target="_black">Github 代码</a>，欢迎 star。</p>
<h3 id="一-相关随笔"><a class="header-anchor" href="#一-相关随笔">¶</a>一、相关随笔</h3>
<p>  <a href="https://liuxianyu.cn/article/account-notebook.html" target="_black">账号簿（微信小程序）的开发过程</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-a.html" target="_black">账号簿开发（一）—— 微信小程序 AES 加密解密</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-b.html" target="_black">账号簿开发（二）—— 微信小程序检查更新及调试</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-c.html" target="_black">账号簿开发（三）—— 微信小程序的云开发</a><br>
  <a href="https://liuxianyu.cn/article/account-notebook-d.html" target="_black">账号簿开发（四）—— 写一个随机密码生成器</a></p>
<h3 id="二-实现效果"><a class="header-anchor" href="#二-实现效果">¶</a>二、实现效果</h3>
<h4 id="2-1-微信扫码体验"><a class="header-anchor" href="#2-1-微信扫码体验">¶</a>2.1、微信扫码体验</h4>
<p><img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/share.jpg" alt></p>
<h4 id="2-2-小程序截图"><a class="header-anchor" href="#2-2-小程序截图">¶</a>2.2、小程序截图</h4>
<p><img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/1.png" alt></p>
<h4 id="2-3-云端数据截图"><a class="header-anchor" href="#2-3-云端数据截图">¶</a>2.3、云端数据截图</h4>
<p>   账号密码均为加密后的密文，无法查看明文</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/2.png" alt></p>
<h3 id="三-相关说明"><a class="header-anchor" href="#三-相关说明">¶</a>三、相关说明</h3>
<h4 id="3-1-功能点"><a class="header-anchor" href="#3-1-功能点">¶</a>3.1、功能点</h4>
<ul>
<li>[x] 标签管理</li>
<li>[x] 账号管理</li>
<li>[x] 安全密码</li>
<li>[x] 检查更新</li>
<li>[x] 指纹解锁</li>
<li>[x] 云同步及权限管理</li>
<li>[x] 分享、友情链接</li>
<li>[x] 代码开源</li>
<li>[x] 系列文章</li>
<li>[x] 账号密码自动同步</li>
<li>[x] 账号列表顶部模糊搜索框</li>
<li>[x] 随机密码生成器</li>
<li>[ ] 云同步记录</li>
</ul>
<h4 id="3-2-使用说明"><a class="header-anchor" href="#3-2-使用说明">¶</a>3.2、使用说明</h4>
<ul>
<li>开发者承诺不会自动上传账号密码到云端，仅在用户主动点击备份时才会**加密（AES 加密后再经过 BASE64 编码）**账号密码后上传到云端，数据库为腾讯云专门为微信小程序提供的云数据库，任何人无法查看账号密码的明文，均为加密后的密文。用户账号密码保存在手机本地数据中。</li>
<li>清除微信数据或微信缓存以及删除小程序都会丢失本地数据，建议进行这些操作前使用<strong>云同步</strong>功能备份账号密码。</li>
<li>开发『账号簿』的目的是方便个人密码的保存和查看，是为了保存个人账号密码而开发的，分享给有需要的人使用。</li>
<li>如遇到问题或想二次开发的，请联系开发者。邮箱：<a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=MFxZRUhJAAUFAXBBQR5TX10" target="_black">liuxy0551@qq.com</a></li>
<li>开发者尽最大可能保障数据安全，但不承担任何责任。</li>
</ul>
<h4 id="3-3-用途说明"><a class="header-anchor" href="#3-3-用途说明">¶</a>3.3、用途说明</h4>
<p>  『账号簿』用来记录个人的账号密码，数据保存在本地，清除微信数据或微信缓存以及删除小程序都会丢失本地数据。提供了云同步的功能，可以在更换手机前将数据加密（AES 加密后再经过 BASE64 编码）后备份到云端，更换手机后下载备份即可恢复。因云同步功能会使用云数据库读写次数，可以在支持开发者后联系开发者开通此功能。</p>
<p>  <strong>如果对安全不放心，可以联系开发者进行私有化部署，让你拥有一个属于自己的账号管理小程序！</strong></p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/wechat-qrcode.png" alt></p>
<h4 id="3-4-技术说明"><a class="header-anchor" href="#3-4-技术说明">¶</a>3.4、技术说明</h4>
<ul>
<li><a href="https://docs.taro.zone/docs/README" target="_black">Taro 3.x</a></li>
<li>React 17.x</li>
<li><a href="https://taro-ui.taro.zone/#/" target="_black">taro-ui 最新版</a></li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html" target="_black">微信小程序 - 云开发</a></li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/capabilities.html#%E4%BA%91%E5%87%BD%E6%95%B0" target="_black">微信小程序 - 云函数</a></li>
</ul>
<p>  基于 Taro 3.x 使用 React 语法和 Taro UI 的部分组件开发了“账号簿”微信小程序，使用到了微信小程序的云开发和云函数，免费版数据库读写次数有限。</p>
<h4 id="3-5-代码结构"><a class="header-anchor" href="#3-5-代码结构">¶</a>3.5、代码结构</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">account-notebook</span><br><span class="line">├─package.json</span><br><span class="line">├─src</span><br><span class="line">|  ├─app.config.js  公用配置项</span><br><span class="line">|  ├─app.js  全局入口</span><br><span class="line">|  ├─app.scss  全局样式</span><br><span class="line">|  ├─index.html</span><br><span class="line">|  ├─utils  工具方法</span><br><span class="line">|  ├─pages</span><br><span class="line">|  |   ├─tag</span><br><span class="line">|  |   |  ├─list  标签列表页面</span><br><span class="line">|  |   |  └─form  标签表单页面</span><br><span class="line">|  |   ├─personal</span><br><span class="line">|  |   |    ├─unlock  输入安全密码页面</span><br><span class="line">|  |   |    ├─password  设置安全密码页面</span><br><span class="line">|  |   |    ├─grid  个人页面</span><br><span class="line">|  |   |    ├─cloudSync  云同步页面</span><br><span class="line">|  |   |    └─about  关于页面</span><br><span class="line">|  |   ├─home  首页</span><br><span class="line">|  |   └─account</span><br><span class="line">|  |        └─form  账号表单页面</span><br><span class="line">|  ├─components</span><br><span class="line">|  |     ├─TopBar  自定义状态栏组件</span><br><span class="line">|  |     ├─Empty  空数据组件</span><br><span class="line">|  |     └─ChangeLog  更新日志浮框</span><br><span class="line">|  ├─assets</span><br><span class="line">|  |   ├─style  样式文件</span><br><span class="line">|  |   └─images  图片资源</span><br><span class="line">├─config  配置文件</span><br><span class="line">└─cloud  云开发</span><br><span class="line">   └─getOpenId  云函数</span><br></pre></td></tr></table></figure>
<h3 id="四-开发"><a class="header-anchor" href="#四-开发">¶</a>四、开发</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/liuxy0551/account-notebook.git</span><br><span class="line">cd account-notebook</span><br><span class="line">yarn</span><br><span class="line">yarn dev:weapp</span><br></pre></td></tr></table></figure>
<p>  在微信开发者工具导入项目即可查看效果。</p>
<h3 id="五-管理"><a class="header-anchor" href="#五-管理">¶</a>五、管理</h3>
<h4 id="5-1-云同步"><a class="header-anchor" href="#5-1-云同步">¶</a>5.1、云同步</h4>
<p>  在微信开发者工具 -&gt; 云开发 -&gt; 数据库 -&gt; userList 中选择指定用户，添加字段<code>isPay</code>，<code>boolean</code>型，值为<code>true</code>即可为该用户开启云同步功能。</p>
<h4 id="5-2-账号记录自动同步"><a class="header-anchor" href="#5-2-账号记录自动同步">¶</a>5.2、账号记录自动同步</h4>
<p>  在微信开发者工具 -&gt; 云开发 -&gt; 数据库 -&gt; userList 中选择指定用户，确认<code>isPay</code>字段为<code>true</code>后，添加字段<code>autoSync</code>，<code>boolean</code>型，值为<code>true</code>即可为该用户开启账号记录自动同步功能。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 canvas 实现简单图片滤镜</title>
    <url>/article/canvas-image-filter.html</url>
    <content><![CDATA[<p>  最近会做一次周分享，主题是 canvas 图片滤镜，记录下为此写的 demo。在线访问：<a href="https://liuxy0551.github.io/canvas-image-filter/index.html" target="_black">https://liuxy0551.github.io/canvas-image-filter/index.html</a></p>
<a id="more"></a>
<p><img src="https://images-hosting.liuxianyu.cn/posts/canvas-image-filter/normal.png" alt></p>
<h3 id="一-什么是-canvas"><a class="header-anchor" href="#一-什么是-canvas">¶</a>一、什么是 canvas</h3>
<p>  <code>canvas</code>是一个 HTML 元素，也叫 canvas 画布。Canvas API 主要绘制 2D 图形，而同样使用<code>canvas</code>元素的 WebGL API 一般用于绘制硬件加速的 2D 和 3D 图形。</p>
<h3 id="二-常用图像-api-接口"><a class="header-anchor" href="#二-常用图像-api-接口">¶</a>二、常用图像 API 接口</h3>
<p>  关于图像处理的 API，主要有 4 个：</p>
<h4 id="2-1-绘制图片"><a class="header-anchor" href="#2-1-绘制图片">¶</a>2.1、绘制图片</h4>
<p>  <code>drawImage(image, x, y, dwidth, dheight)</code></p>
<p>  其中<code>image</code>是 image 或 canvas 对象，x 和 y 是其在目标 canvas 里的起始坐标，<code>dwidth</code>和<code>dheight</code>是生成图像的宽高。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image() <span class="comment">// 声明新的Image对象</span></span><br><span class="line">img.src = <span class="string">"./img/photo.png"</span></span><br><span class="line"><span class="comment">// 图片加载后</span></span><br><span class="line">img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  canvas = <span class="built_in">document</span>.querySelector(<span class="string">"#my-canvas"</span>)</span><br><span class="line">  ctx = canvas.getContext(<span class="string">"2d"</span>)</span><br><span class="line">  <span class="comment">// 根据image大小，指定canvas大小</span></span><br><span class="line">  canvas.width = img.width</span><br><span class="line">  canvas.height = img.height</span><br><span class="line">  <span class="comment">// 绘制图像</span></span><br><span class="line">  ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-获取图像数据"><a class="header-anchor" href="#2-2-获取图像数据">¶</a>2.2、获取图像数据</h4>
<p>  <code>getImageData(x, y, width, height)</code></p>
<p>  其中<code>x</code>和<code>y</code>是将要被提取图像区域的左上角坐标，<code>width</code>和<code>height</code>是将要被提取图像区域的宽高。返回一个<code>ImageData</code>对象，包含 canvas 给定矩形区域的图像数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> imageData = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br></pre></td></tr></table></figure>
<h4 id="2-3-重写图像数据"><a class="header-anchor" href="#2-3-重写图像数据">¶</a>2.3、重写图像数据</h4>
<p>  <code>putImageData(imageData, x, y)</code></p>
<p>  其中<code>imageData</code>是<code>getImageData</code>方法返回的<code>ImageData</code>对象，<code>x</code>和<code>y</code>分别是源图像数据在目标画布中 x 轴 和 y 轴的偏移量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.putImageData(imageData, <span class="number">0</span>, <span class="number">0</span>) <span class="comment">// 重绘图像</span></span><br></pre></td></tr></table></figure>
<h4 id="2-4-导出图像"><a class="header-anchor" href="#2-4-导出图像">¶</a>2.4、导出图像</h4>
<p>  <code>toDataURL([type, encoderOptions])</code></p>
<p>  其中<code>type</code>代表图片格式，默认为 image/png，<code>encoderOptions</code>是指在<code>type</code>设置为 image/jpeg 或 image/webp 时，可以从 0 到 1 设置图片的质量，默认 0.92。</p>
<p>更详细的 API 和参数说明请参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D" target="_black">MDN CanvasRenderingContext2D</a></p>
<h3 id="三-常见滤镜效果"><a class="header-anchor" href="#三-常见滤镜效果">¶</a>三、常见滤镜效果</h3>
<p>  实现滤镜主要借用<code>getImageData</code>方法，返回每个像素的 RGBA 值，操作像素进行不同的运算即可得到不同的滤镜效果。</p>
<h4 id="3-1-去色效果"><a class="header-anchor" href="#3-1-去色效果">¶</a>3.1、去色效果</h4>
<p>  相当于黑白照片，定义以下公式：<code>gray = red * 0.3 + green * 0.59 + blue * 0.11</code></p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/canvas-image-filter/1.png" alt></p>
<h4 id="3-2-底片效果"><a class="header-anchor" href="#3-2-底片效果">¶</a>3.2、底片效果</h4>
<p>  底片效果就是 RGB 最大值减去当前值，即 255 - 当前值：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/canvas-image-filter/2.png" alt></p>
<h4 id="3-3-单色效果"><a class="header-anchor" href="#3-3-单色效果">¶</a>3.3、单色效果</h4>
<p>  单色效果是将当前像素的其他色值去除，比如显示红色时将 green、blue 可以设置为 0：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/canvas-image-filter/3.png" alt></p>
<h4 id="3-4-黑白效果"><a class="header-anchor" href="#3-4-黑白效果">¶</a>3.4、黑白效果</h4>
<p>  通过判断当前像素的色值是否超过某一个标定值，大于则显示黑色，否则显示白色，即可达到效果。这个标定值可以设定为 RGB 最大值的一半，也就是 128：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/canvas-image-filter/4.png" alt></p>
<h4 id="3-5-荧光效果"><a class="header-anchor" href="#3-5-荧光效果">¶</a>3.5、荧光效果</h4>
<p><img src="https://images-hosting.liuxianyu.cn/posts/canvas-image-filter/5.png" alt></p>
<h3 id="四-代码"><a class="header-anchor" href="#四-代码">¶</a>四、代码</h3>
<p>[1] <a href="https://github.com/liuxy0551/canvas-image-filter" target="_black">https://github.com/liuxy0551/canvas-image-filter</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>egg 设置 keepAliveTimeout 超时时间</title>
    <url>/article/egg-keepAlive-timeout.html</url>
    <content><![CDATA[<p>  最近在阿里云函数计算中，Post 接口经常在紧密相邻的第二次调用时报错，<code>{ errorMessage: 'Process exited unexpectedly before completing request (duration: 1ms, maxMemoryUsage: 200.52MB) }</code>，这个错误经过测试是偶发必现的，比较影响体验，记录下解决方法。</p>
<a id="more"></a>
<h3 id="一-出现错误"><a class="header-anchor" href="#一-出现错误">¶</a>一、出现错误</h3>
<p>  这个项目在函数计算的部署环境是<code>Custom Runtime</code>，选用了<code>egg</code>框架。调用一个 Post 接口的时候，发现经常性的没有反应，查看日志后发现偶发遇到<code>502 bad gateway</code>的错误。查看函数计算的文档后发现有以下要求：</p>
<blockquote>
<p><strong>HTTP Server 配置要求</strong><br>
Connection 需要设置为 Keep-Alive，Server 端请求超时时间需设置在15分钟及以上。示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如Node.js使用express时</span></span><br><span class="line"><span class="keyword">var</span> server = app.listen(PORT, HOST)</span><br><span class="line">server.timeout = <span class="number">0</span> <span class="comment">// never timeout</span></span><br><span class="line">server.keepAliveTimeout = <span class="number">0</span> <span class="comment">// keepalive, never timeout</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="二-解决方法"><a class="header-anchor" href="#二-解决方法">¶</a>二、解决方法</h3>
<p>  从网上找到三种解决方法，下述前两种尝试后发现没有效果，错误依旧可复现。</p>
<h4 id="2-1-config-httpclient-无效"><a class="header-anchor" href="#2-1-config-httpclient-无效">¶</a>2.1 config.httpclient <code>无效</code></h4>
<p>  修改<code>/config/config.default.js</code>文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">config.httpclient = &#123;</span><br><span class="line">  request: &#123;</span><br><span class="line">    <span class="comment">// 默认 request 超时时间</span></span><br><span class="line">    timeout: <span class="number">60000</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  httpAgent: &#123;</span><br><span class="line">    <span class="comment">// 默认开启 http KeepAlive 功能</span></span><br><span class="line">    keepAlive: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 空闲的 KeepAlive socket 最长可以存活 4 秒</span></span><br><span class="line">    freeSocketTimeout: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 当 socket 超过 30 秒都没有任何活动，就会被当作超时处理掉</span></span><br><span class="line">    timeout: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 允许创建的最大 socket 数</span></span><br><span class="line">    maxSockets: <span class="built_in">Number</span>.MAX_SAFE_INTEGER,</span><br><span class="line">    <span class="comment">// 最大空闲 socket 数</span></span><br><span class="line">    maxFreeSockets: <span class="number">256</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  httpsAgent: &#123;</span><br><span class="line">    keepAlive: <span class="literal">true</span>,</span><br><span class="line">    freeSocketTimeout: <span class="number">0</span>,</span><br><span class="line">    timeout: <span class="number">0</span>,</span><br><span class="line">    maxSockets: <span class="built_in">Number</span>.MAX_SAFE_INTEGER,</span><br><span class="line">    maxFreeSockets: <span class="number">256</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  可在 <a href="https://eggjs.org/zh-cn/core/httpclient.html#httpclient-%E9%BB%98%E8%AE%A4%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE" target="_blank">HttpClient 默认全局配置</a>、<a href="https://github.com/eggjs/egg/blob/master/config/config.default.js#L270" target="_blank">github -&gt; config.default.js -&gt; httpclient</a> 中查看文档。</p>
<blockquote>
<p><strong>注意</strong><br>
HttpClient 是发送 HTTP 请求的，而 timeout 和 keepAliveTimeout 是要设置到 egg 启动的 http server 上。</p>
</blockquote>
<h4 id="2-2-config-clusterclient-无效"><a class="header-anchor" href="#2-2-config-clusterclient-无效">¶</a>2.2 config.clusterClient <code>无效</code></h4>
<p>  修改<code>/config/config.default.js</code>文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">config.clusterClient = &#123;</span><br><span class="line">  maxWaitTime: <span class="number">60000</span>,</span><br><span class="line">  responseTimeout: <span class="number">60000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  可在 <a href="https://eggjs.org/zh-cn/advanced/cluster-client.html#%E5%9C%A8%E6%A1%86%E6%9E%B6%E9%87%8C%E9%9D%A2-cluster-client-%E7%9B%B8%E5%85%B3%E7%9A%84%E9%85%8D%E7%BD%AE%E9%A1%B9" target="_blank">在框架里面 cluster-client 相关的配置项</a>、<a href="https://github.com/eggjs/egg/blob/master/config/config.default.js#L366" target="_blank">github -&gt; config.default.js -&gt; clusterClient</a> 中查看文档。</p>
<h4 id="2-3-app-server-推荐"><a class="header-anchor" href="#2-3-app-server-推荐">¶</a>2.3 app.server <code>推荐</code></h4>
<p>  APP 的生命周期函数中提供了<code>serverDidReady</code>方法，此时可以从<code>app.server</code>拿到 server 的实例。文档：<a href="https://eggjs.org/zh-cn/basics/app-start.html" target="_blank">启动自定义</a>。拿到 server 实例我们就可以设置 timeout 和 keepAliveTimeout。</p>
<p>  根目录增加<code>app.js</code>文件，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppBootHook</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(app) &#123;</span><br><span class="line">      <span class="keyword">this</span>.app = app</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> serverDidReady() &#123;</span><br><span class="line">      <span class="comment">// http / https server 已启动，开始接受外部请求</span></span><br><span class="line">      <span class="comment">// 此时可以从 app.server 拿到 server 的实例</span></span><br><span class="line">      <span class="keyword">this</span>.app.server.timeout = <span class="number">0</span></span><br><span class="line">      <span class="keyword">this</span>.app.server.keepAliveTimeout = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = AppBootHook</span><br></pre></td></tr></table></figure>
<h4 id="参考文章"><a class="header-anchor" href="#参考文章">¶</a>参考文章</h4>
<p>[1] <a href="https://github.com/eggjs/egg/issues/4541" target="_black">egg Issue #4541 - egg 如此设置 keepAliveTimeout 超时时间不不起作用？</a><br>
[2] <a href="https://github.com/eggjs/egg/issues/4411" target="_black">egg Issue #4411 - egg 迁移到阿里云函数计算，使用post方式发送请求，第一个请求正常，相隔10秒后发第二个请求，egg崩溃</a></p>
]]></content>
      <categories>
        <category>Serverless</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Cent OS 中部署 Gotty 并提供给项目使用</title>
    <url>/article/cent-os-gotty.html</url>
    <content><![CDATA[<p>  <a href="https://github.com/yudai/gotty" target="_black">Gotty</a> 是一个能在浏览器打开的终端（Web Terminal），可以用于执行命令，也可以用于 SSH。通过把部署的主机作为跳板机，登录主机列表中的某一台机器。利用 <a href="https://liuxianyu.cn/article/docker-e.html" target="_black">前端学习 Docker 之旅（六）—— Docker 中安装 Cent OS 并通过 SSH 连接</a> 搭建的 Cent OS 环境来尝试部署并使用。</p>
<a id="more"></a>
<h3 id="一-实现效果"><a class="header-anchor" href="#一-实现效果">¶</a>一、实现效果</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/cent-os-gotty/1.gif" alt></p>
<h3 id="二-安装运行"><a class="header-anchor" href="#二-安装运行">¶</a>二、安装运行</h3>
<h4 id="2-1-安装工具"><a class="header-anchor" href="#2-1-安装工具">¶</a>2.1 安装工具</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y wget</span><br></pre></td></tr></table></figure>
<h4 id="2-2-拉取对应的文件"><a class="header-anchor" href="#2-2-拉取对应的文件">¶</a>2.2 拉取对应的文件</h4>
<p>  从 <a href="https://github.com/yudai/gotty/releases" target="_black">Release</a> 页面下载对应的文件，建议下载最新版，当前最新版 v1.0.1。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -P /mnt/gotty https://github.com/yudai/gotty/releases/download/v1.0.1/gotty_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>
<p>指令解释：</p>
<ul>
<li>wget -P <code>/保存文件的目录</code> <code>文件下载地址</code></li>
</ul>
<h4 id="2-3-解压文件"><a class="header-anchor" href="#2-3-解压文件">¶</a>2.3 解压文件</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xzvf /mnt/gotty/gotty_linux_amd64.tar.gz -C /mnt/gotty</span><br></pre></td></tr></table></figure>
<h4 id="2-4-运行"><a class="header-anchor" href="#2-4-运行">¶</a>2.4 运行</h4>
<h5 id="2-4-1-前台运行"><a class="header-anchor" href="#2-4-1-前台运行">¶</a>2.4.1 前台运行</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/mnt/gotty/gotty -p 9000 -w --max-connection 50 --permit-arguments bash</span><br></pre></td></tr></table></figure>
<h5 id="2-4-2-后台运行推荐"><a class="header-anchor" href="#2-4-2-后台运行推荐">¶</a>2.4.2 后台运行<code>推荐</code></h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/mnt/gotty/gotty -p 9000 -w --permit-arguments bash &gt;/mnt/gotty/log.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p><code>&gt;/mnt/gotty/log.file 2&gt;&amp;1 &amp;</code>是将产生的文件存到指定文件中，可搜索<code>Linux 后台运行</code>；上述命令会返回对应进程的 PID。服务启动后可在 MAC 上访问 <a href="http://localhost:9000" target="_black">http://localhost:9000</a> 查看效果。</p>
<p>更多选项可参考：<a href="https://github.com/yudai/gotty#options" target="_black">https://github.com/yudai/gotty#options</a></p>
<p>指令解释：</p>
<ul>
<li><code>-p 9000</code> 表示运行在 9000 端口</li>
<li><code>-w</code> 表示允许客户端写入</li>
<li><code>--max-connection 50</code> 表示 socket 最大连接数</li>
<li><code>--permit-arguments</code> 表示运行 url 携带参数，<code>?arg=aaa</code></li>
<li><code>bash</code> 表示进入 bash 终端</li>
<li><code>-r</code> 表示会在 url 后添加随机字符串路径</li>
<li><code>-c admin:1234</code> 表示需要用户名密码进行访问</li>
</ul>
<h4 id="2-5-停止后台运行"><a class="header-anchor" href="#2-5-停止后台运行">¶</a>2.5 停止后台运行</h4>
<p>  <strong>方法一：</strong></p>
<p>  可参考：<a href="https://liuxianyu.cn/article/linux-command.html" target="_black">Linux 中的一些命令</a></p>
<ul>
<li>通过<code>lsof</code>查看对应端口的程序，会返回对应进程的 PID，假设 PID 是 1476：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y lsof</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsof -i:9000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill 1476</span><br></pre></td></tr></table></figure>
<p>  <strong>方法二：</strong></p>
<ul>
<li>常用任务管理命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jobs      // 查看任务，返回任务编号n和进程号</span><br><span class="line">fg %n     // 将编号为n的任务转前台运行</span><br><span class="line">bg %n     // 将编号为n的任务转后台运行</span><br><span class="line">ctrl + c  // 结束当前任务</span><br><span class="line">ctrl + z  // 挂起当前任务</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Cent OS</category>
      </categories>
      <tags>
        <tag>Cent OS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习 Docker 之旅（六）—— Docker 中安装 Cent OS 并通过 SSH 连接</title>
    <url>/article/docker-e.html</url>
    <content><![CDATA[<p>  最近有个 <a href="https://liuxianyu.cn/article/cent-os-gotty.html" target="_black">Web Terminal</a> 的想法，可能需要多次测试，所以准备个 Cent OS 的环境还是很重要的，记录下在 Docker 中安装 Cent OS 的过程。</p>
<a id="more"></a>
<h3 id="一-安装-cent-os"><a class="header-anchor" href="#一-安装-cent-os">¶</a>一、安装 Cent OS</h3>
<h4 id="1-1-查找镜像"><a class="header-anchor" href="#1-1-查找镜像">¶</a>1.1、查找镜像</h4>
<p>  在 Docker Hub 官网查找自己需要的版本 <a href="https://hub.docker.com/_/centos?tab=tags" target="_blank" rel="noopener">https://hub.docker.com/_/centos?tab=tags</a></p>
<h4 id="1-2-下载镜像"><a class="header-anchor" href="#1-2-下载镜像">¶</a>1.2、下载镜像</h4>
<p>  我选择的是 7.9.2009 版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull centos:centos7.9.2009</span><br></pre></td></tr></table></figure>
<p>  下载完成后使用<code>docker images</code>命令查看镜像列表。</p>
<h3 id="二-启动容器"><a class="header-anchor" href="#二-启动容器">¶</a>二、启动容器</h3>
<h4 id="2-1-使用镜像创建容器并运行"><a class="header-anchor" href="#2-1-使用镜像创建容器并运行">¶</a>2.1、使用镜像创建容器并运行</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 10000:22 -p 9000:9000 -itd --name centos7.9 --privileged=true centos:centos7.9.2009 /usr/sbin/init</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 10000:22 -itd --name centos7.9 centos:centos7.9.2009 /bin/bash</span><br></pre></td></tr></table></figure>
<p>指令解释：</p>
<ul>
<li><code>-p</code> 表示端口映射，<code>-p 宿主机port:容器port</code></li>
<li><code>--name</code> 表示给容器指定的名称</li>
<li><code>centos:centos7.9.2009</code> 表示运行的镜像名称</li>
<li><code>--privileged=true</code> 表示以特权模式运行容器，且不能使用默认的 bash，得换成 init</li>
</ul>
<p>后续可通过以下命令启动/停止容器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker start/stop centos7.9</span><br></pre></td></tr></table></figure>
<h4 id="2-2-进入容器"><a class="header-anchor" href="#2-2-进入容器">¶</a>2.2、进入容器</h4>
<p>  以后台模式运行容器，再进入容器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it centos7.9 /bin/bash</span><br></pre></td></tr></table></figure>
<p>指令解释：</p>
<ul>
<li><code>centos7.9</code> 容器名称</li>
</ul>
<p>  进入 centos7.9，出现下图红框部分的容器 id 则表示进入成功：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/docker-e/1.png" alt></p>
<h4 id="2-3-开启-ssh-连接"><a class="header-anchor" href="#2-3-开启-ssh-连接">¶</a>2.3、开启 ssh 连接</h4>
<p>  安装工具：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y openssh-server</span><br></pre></td></tr></table></figure>
<p>  启动 ssh 服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start sshd.service</span><br></pre></td></tr></table></figure>
<p>  设置系统 root 用户密码，输入两次密码设置成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure>
<h4 id="2-4-连接-centos7-9"><a class="header-anchor" href="#2-4-连接-centos7-9">¶</a>2.4、连接 centos7.9</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh root@192.168.106.119 -p 10000</span><br></pre></td></tr></table></figure>
<p>  因为是很多操作是尝试着进行的，所以很多次在连接 Cent OS 后，删除镜像、容器后再次尝试连接的时候就会报错了<code>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</code>，根据提示编辑<code>~/.ssh/known_hosts</code>文件，删除服务器的记录即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/known_hosts</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/docker-e/2.gif" alt></p>
<p>附：<a href="https://liuxianyu.cn/article/docker-b.html" target="_black">前端学习 Docker 之旅（二）—— 常用指令</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Cent OS</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云函数计算介绍与实践</title>
    <url>/article/aliyun-function-compute.html</url>
    <content><![CDATA[<p>  函数计算是一个和 Serverless 相关的概念，函数计算可以理解为 FaaS，目前 Serverless 并没有一个很官方的定义，业内普遍认为 Serverless = BaaS + FaaS。</p>
<a id="more"></a>
<h3 id="一-serverless"><a class="header-anchor" href="#一-serverless">¶</a>一、Serverless</h3>
<p>  Serverless 是一种新型的互联网架构 —— 无服务器架构，这里的无服务器不是指不需要服务器，而是开发者可以不管理服务器等基础设施。其实 Serverless 也谈不上新，因为这个概念在 2012 年就已经提出了，简单看下 Serverless 的发展历史：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/aliyun-function-compute/1.png" alt></p>
<p>  云计算的发展过程从 IaaS，PaaS，SaaS 到最新的 Serverless，介绍下这些基本概念就可以看出 Serverless 是云计算发展到某一阶段的必然产物，可以节省运维成本和开发成本。</p>
<ul>
<li>IaaS：基础设施即服务，服务商提供物理层基础设施资源，开发者需要购买并选择操作系统，安装软件、部署程序、监控应用。</li>
<li>PaaS：平台即服务，服务商提供操作系统、数据库、负载均衡器和其他中间件，相比 IaaS，开发者仅需要控制上层的程序部署与应用托管的环境即可。</li>
<li>SaaS：软件即服务， 服务商提供基于软件的解决方案，如 OA、CRM、ERP、Office、iCloud 等，客户只需要通过服务商平台获取软件使用即可。</li>
<li>BaaS：后端即服务，如提供文件存储、推送服务、身份验证服务等。</li>
<li>FaaS：函数即服务，服务商提供一个平台，允许开发者开发、允许和管理应用程序，而无需构建和维护基础架构，通常在构建微服务应用时使用。</li>
</ul>
<h3 id="二-函数计算"><a class="header-anchor" href="#二-函数计算">¶</a>二、函数计算</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/aliyun-function-compute/2.png" alt></p>
<blockquote>
<p>  函数计算是阿里云作为云服务商提供的一项服务能力，类似的服务还有亚马逊的 Lambda、腾讯云的云函数、Google Cloud Functions 等。本篇随笔就介绍一下阿里云的函数计算，并进行小场景实践：基于 egg 和 MySQL 提供 Web 服务。<br>
  阿里云对函数计算（Function Compute）的定义是：一个事件驱动的全托管 Serverless 计算服务，无需管理服务器等基础设施，只需编写代码并上传，函数计算会准备好计算资源，并以弹性、可靠的方式运行代码，并提供日志查询、性能监控和报警等功能。</p>
</blockquote>
<p>  我们可以对比一个应用从开发到上线的过程：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/aliyun-function-compute/3.png" alt></p>
<h4 id="2-1-工作流程"><a class="header-anchor" href="#2-1-工作流程">¶</a>2.1、工作流程</h4>
<p><img src="https://images-hosting.liuxianyu.cn/posts/aliyun-function-compute/4.png" alt></p>
<ul>
<li>1、开发者编写程序，函数计算支持的 <a href="https://help.aliyun.com/document_detail/74712.htm?spm=a2c4g.11186623.2.8.d913398eQ0WizG#concept-2259869" target="_black">开发语言列表</a>。</li>
<li>2、开发者上传程序到函数计算。</li>
<li>3、触发函数执行，触发方式包括OSS、API网关、日志服务、表格存储以及函数计算API、SDK等。</li>
<li>4、动态扩容，根据用户请求量自动扩容，减轻运维压力，开发者和用户无感知。</li>
<li>5、按函数执行时间计费。</li>
</ul>
<h4 id="2-2-特点"><a class="header-anchor" href="#2-2-特点">¶</a>2.2、特点</h4>
<ul>
<li>
<p>高效免运维</p>
</li>
<li>
<p>弹性执行</p>
</li>
<li>
<p>按量付费，低成本</p>
</li>
<li>
<p>事件驱动</p>
</li>
<li>
<p>调试麻烦</p>
</li>
<li>
<p>构建复杂</p>
</li>
<li>
<p>休眠启动</p>
</li>
</ul>
<h4 id="2-3-典型场景"><a class="header-anchor" href="#2-3-典型场景">¶</a>2.3、典型场景</h4>
<ul>
<li>Web 应用</li>
<li>对计算能力有很强的弹性诉求</li>
<li>事件驱动型的应用</li>
</ul>
<h3 id="三-实践"><a class="header-anchor" href="#三-实践">¶</a>三、实践</h3>
<p>  可参考官方文档：<a href="https://help.aliyun.com/document_detail/51732.html?spm=a2c4g.11186623.3.3.7f4f6eeeXqErFn" target="_black">快速入门</a>。创建函数的方法有很多种，我采用的是通过命令行创建函数。</p>
<h4 id="3-1-开通函数计算服务"><a class="header-anchor" href="#3-1-开通函数计算服务">¶</a>3.1、开通函数计算服务</h4>
<p>  登录阿里云控制台，搜索函数计算并开通。</p>
<h4 id="3-2-安装命令行工具"><a class="header-anchor" href="#3-2-安装命令行工具">¶</a>3.2、安装命令行工具</h4>
<p>  全局安装命令行工具 Funcraft：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install @alicloud/fun -g</span><br><span class="line">fun --version</span><br></pre></td></tr></table></figure>
<p>  使用 fun 工具部署可以去全局定义账户信息，输入<code>fun config</code>依次配置 Account ID（阿里云账号 ID）、AccessKey ID、AccessKey Secret、Default Region Name。如果账号是 RAM 用户，Account ID 需要配置为阿里云账号的 ID，AccessKey ID、AccessKey Secret 为 RAM 用户的密钥。推荐全局配置，完成配置后，Funcraft 会将配置保存到用户目录下的<code>.fcli/config.yaml</code>文件中。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/aliyun-function-compute/5.png" alt></p>
<h4 id="3-3-编写代码"><a class="header-anchor" href="#3-3-编写代码">¶</a>3.3、编写代码</h4>
<p>  先写个 hello-world：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir hello-world</span><br><span class="line">cd hello-world</span><br><span class="line">npm init egg --type=simple</span><br><span class="line">npm i</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<p>  写个 GET 和 POST 的接口，egg 会有 CSRF 攻击的限制，可以在/config/config.default.js中添加 csrf 配置的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports = appInfo =&gt; &#123;</span><br><span class="line">  const config = exports = &#123;&#125;;</span><br><span class="line">  config.security = &#123;</span><br><span class="line">    csrf: &#123;</span><br><span class="line">      enable: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-4-部署过程"><a class="header-anchor" href="#3-4-部署过程">¶</a>3.4、部署过程</h4>
<p>  部署时会同时上传 node_modules，所以使用 deploy 命令中使用了<code>npm i --production</code>。也可以通过 <a href="https://help.aliyun.com/document_detail/193057.html?spm=a2c4g.11186623.2.2.98b41636ZIbJbm" target="_black">层</a> 的概念去上传依赖包，层可以理解为依赖库、自定义运行环境，此时可配置<code>.funignore</code>文件，过滤不上传的文件或目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf node_modules</span><br><span class="line">npm i --production</span><br><span class="line">fun deploy</span><br></pre></td></tr></table></figure>
<p>  确认服务和函数的名称后，fun 工具会生成对应的配置文件：</p>
<p>（1）新增配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ROSTemplateFormatVersion: &apos;2015-09-01&apos;</span><br><span class="line">Transform: &apos;Aliyun::Serverless-2018-04-03&apos;</span><br><span class="line">Resources:</span><br><span class="line">  dingtalk-robot: # service name</span><br><span class="line">    Type: &apos;Aliyun::Serverless::Service&apos;</span><br><span class="line">    Properties:</span><br><span class="line">      Description: This is FC service</span><br><span class="line">      LogConfig:</span><br><span class="line">        Project: aliyun-fc-cn-hangzhou-3ff06808-bae1-59f3-a782-6e6623a34e1f</span><br><span class="line">        Logstore: function-log</span><br><span class="line">        EnableRequestMetrics: true</span><br><span class="line">      TracingConfig: Disable</span><br><span class="line">      InternetAccess: true</span><br><span class="line">    dingtalk-robot: # function name</span><br><span class="line">      Type: &apos;Aliyun::Serverless::Function&apos;</span><br><span class="line">      Properties:</span><br><span class="line">        Handler: index.handler</span><br><span class="line">        Runtime: custom</span><br><span class="line">        CodeUri: ./</span><br><span class="line">        MemorySize: 1024</span><br><span class="line">        InstanceConcurrency: 1</span><br><span class="line">        Timeout: 120</span><br><span class="line">        </span><br><span class="line">      Events:</span><br><span class="line">        httpTrigger:</span><br><span class="line">          Type: HTTP</span><br><span class="line">          Properties:</span><br><span class="line">            AuthType: ANONYMOUS</span><br><span class="line">            Methods: [&apos;GET&apos;, &apos;POST&apos;]</span><br></pre></td></tr></table></figure>
<p>  （2）自定义运行环境，需要将可执行文件 bootstrap 的顶部配置更新为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br></pre></td></tr></table></figure>
<p>  同时，给予 bootstrap 文件可执行权限（777 或 755）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 777 bootstrap</span><br></pre></td></tr></table></figure>
<p>  部署代码到后，函数计算会运行bootstrap 文件，该文件指定运行端口、启动程序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// bootstrap</span><br><span class="line">#!/bin/bash</span><br><span class="line">export PORT=9000</span><br><span class="line">export EGG_SERVER_ENV=prod</span><br><span class="line">npx --no-install egg-scripts start --workers=1</span><br></pre></td></tr></table></figure>
<h4 id="3-5-部署完成"><a class="header-anchor" href="#3-5-部署完成">¶</a>3.5、部署完成</h4>
<p>  继续命令行的部署，配置自定义域名后进行验证。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/aliyun-function-compute/6.png" alt></p>
<h3 id="四-复杂场景"><a class="header-anchor" href="#四-复杂场景">¶</a>四、复杂场景</h3>
<p>  本节代码：<a href="https://github.com/liuxy0551/dingtalk-robot" target="_black">https://github.com/liuxy0551/dingtalk-robot</a></p>
<h4 id="4-1-实现效果"><a class="header-anchor" href="#4-1-实现效果">¶</a>4.1、实现效果</h4>
<p>  可以发送消息到指定钉钉群，效果如下:</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/aliyun-function-compute/14.gif" alt></p>
<h4 id="4-2-通过钉钉群机器人发消息"><a class="header-anchor" href="#4-2-通过钉钉群机器人发消息">¶</a>4.2、通过钉钉群机器人发消息</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>url </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> </span>msg </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Promise&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> sendMsgToGroup = <span class="function">(<span class="params">msg, service</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> robots = <span class="keyword">await</span> service.robot.getRobots()</span><br><span class="line">      <span class="keyword">let</span> promiseList = []</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> robots) &#123;</span><br><span class="line">        promiseList.push(sendOne(getSignUrl(i.secret, i.Webhook), msg, i.name))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promiseList)</span><br><span class="line">      resolve(res)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sendOne</span> (<span class="params">url, msg, name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">      json: msg,</span><br><span class="line">      encoding: <span class="string">'utf-8'</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      request.post(url, params, (error, response, body) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (!error &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">            resolve(&#123; ...body, name &#125;)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(&#123; ...error, name &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>/app/service/robot.js</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取机器人列表</span></span><br><span class="line">getRobots () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> robots = <span class="keyword">await</span> db.Robot.findAll(&#123;</span><br><span class="line">        where: getWhere(),</span><br><span class="line">        raw: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">      resolve(robots)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-百度统计"><a class="header-anchor" href="#4-3-百度统计">¶</a>4.3、百度统计</h4>
<p>  通过定时任务拉取百度统计的埋点数据，并通过统一的钉钉群机器人发送到群</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/aliyun-function-compute/7.png" alt></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 百度统计实现</span></span><br><span class="line"><span class="keyword">const</span> baidutjAPI = <span class="keyword">async</span> (config) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; apiUrl, header, body &#125; = config</span><br><span class="line">  <span class="keyword">const</span> params = &#123;</span><br><span class="line">    header,</span><br><span class="line">    body: &#123;</span><br><span class="line">      ...body,</span><br><span class="line">      start_date: getDate(<span class="number">-1</span>),</span><br><span class="line">      end_date: getDate(),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.post(apiUrl, params).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> desc = res.data.header.desc</span><br><span class="line">      desc === <span class="string">'success'</span> ? resolve(res.data) : reject(desc)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/aliyun-function-compute/8.png" alt></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定时触发器</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"><span class="comment">// 入口文件</span></span><br><span class="line">exports.handler = <span class="function">(<span class="params">event, context, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">'http://dingtalk-robot.liuxianyu.cn/api/baidutj'</span></span><br><span class="line">  axios.post(url)</span><br><span class="line">  callback(<span class="literal">null</span>, <span class="string">'timed-task'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-4-记账啦"><a class="header-anchor" href="#4-4-记账啦">¶</a>4.4、记账啦</h4>
<p>  通过定时任务拉取微信小程序的数据，并通过统一的钉钉群机器人发送到群</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/aliyun-function-compute/9.png" alt></p>
<h4 id="4-5-从-mysql-查询数据"><a class="header-anchor" href="#4-5-从-mysql-查询数据">¶</a>4.5、从 MySQL 查询数据</h4>
<p><img src="https://images-hosting.liuxianyu.cn/posts/aliyun-function-compute/10.png" alt></p>
<h3 id="五-使用心得"><a class="header-anchor" href="#五-使用心得">¶</a>五、使用心得</h3>
<h4 id="5-1-版本管理"><a class="header-anchor" href="#5-1-版本管理">¶</a>5.1、版本管理</h4>
<p>  操作路径：控制台 -&gt; 函数计算 -&gt; 服务及函数 -&gt; (选择一个服务)版本管理。<br>
  每次部署时可以新建一个版本，第一次新建版本后可以在此版本的基础上新建别名，如：prod，并将自定义域名（第 3 条）、函数的 http 触发器中 版本/别名 选择为 prod。后续部署时，可以新建版本，需要该版本生效时，可以简单编辑 prod 别名对应的版本即可，同时别名支持版本配比，可进行灰度测试。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/aliyun-function-compute/11.png" alt></p>
<h4 id="5-2-配置导出"><a class="header-anchor" href="#5-2-配置导出">¶</a>5.2、配置导出</h4>
<p>  操作路径：控制台 -&gt; 函数计算 -&gt; 服务及函数 -&gt; (选择一个服务)函数列表 -&gt; 函数名称(点击函数名称) -&gt; 概览 -&gt; 导出 -&gt; 导出配置将导出的 template.yml 文件放到项目中，这样控制台配置的配置项就不会被 deploy 覆盖掉。</p>
<blockquote>
<p><strong>注意</strong><br>
控制台导出的配置文件可能有部分缺失，需要和本地已有的 template.yml 文件对比，保留部分字段，如：CodeUri</p>
</blockquote>
<h4 id="5-3-自定义域名"><a class="header-anchor" href="#5-3-自定义域名">¶</a>5.3、自定义域名</h4>
<p>  操作路径：控制台 -&gt; 函数计算 -&gt; 自定义域名每个路由的 版本/别名 在开发调试时先选择 LATEST，等待上线时，按照第 1 条的版本管理，选择别名。</p>
<h4 id="5-4-日志查询"><a class="header-anchor" href="#5-4-日志查询">¶</a>5.4、日志查询</h4>
<p>  操作路径：控制台 -&gt; 函数计算 -&gt; 服务及函数 -&gt; (选择一个服务)函数列表 -&gt; 函数名称(点击函数名称) -&gt; 日志查询日志内容包含的内容如：接口 url、报错信息。</p>
<blockquote>
<p>注意<br>
当函数的 单实例并发度 大于 1 时，只有高级查询，等于 1 时，有简单查询和高级查询。</p>
</blockquote>
<h4 id="5-5-请求环境区分"><a class="header-anchor" href="#5-5-请求环境区分">¶</a>5.5、请求环境区分</h4>
<p>  使用函数时如果需要区分生产环境和测试环境，可以发布不同的版本，并创建多个触发器，设置触发器指向不同的版本/别名，如下图：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/aliyun-function-compute/12.png" alt></p>
<p>  自定义域名中创建两个域名，用来区分环境，路径可按下方示例填写，生产和测试选择不同的版本/别名即可。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/aliyun-function-compute/13.png" alt></p>
<h3 id="参考文章"><a class="header-anchor" href="#参考文章">¶</a>参考文章</h3>
<p>[1] <a href="https://developer.aliyun.com/article/574222" target="_black">当我们在聊 Serverless 时你应该知道这些</a></p>
<h3 id="附件"><a class="header-anchor" href="#附件">¶</a>附件</h3>
<p>1、<a href="https://images-hosting.liuxianyu.cn/posts/aliyun-function-compute/函数计算的介绍与实践.pptx" target="_black">函数计算的介绍与实践.pptx (2.7 MB)</a></p>
<p>2、<a href="https://a.jizhangla.liuxianyu.cn/assets/media/%E9%83%A8%E7%BD%B2%E6%BC%94%E7%A4%BA.mp4" target="_black">部署演示.mp4 (28.2 MB)</a></p>
]]></content>
      <categories>
        <category>Serverless</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令（十五）—— Git 设置代理</title>
    <url>/article/git-order-o.html</url>
    <content><![CDATA[<p>  git clone github 仓库时常出现超时，设置下代理可以很好的解决问题。</p>
<a id="more"></a>
<h4 id="设置代理"><a class="header-anchor" href="#设置代理">¶</a>设置代理</h4>
<p>  <code>https</code> 也可以改为 <code>http</code>；<code>7890</code> 是 clash 的代理服务端口。<code>--global</code> 表示全局设置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global https.proxy https://127.0.0.1:7890</span><br></pre></td></tr></table></figure>
<h4 id="取消代理"><a class="header-anchor" href="#取消代理">¶</a>取消代理</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>
<h4 id="查看代理"><a class="header-anchor" href="#查看代理">¶</a>查看代理</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --get https.proxy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令（十四）—— Git 批量删除分支</title>
    <url>/article/git-order-n.html</url>
    <content><![CDATA[<p>  在日常工作中，每个需求会单独切一个分支，通过 MR 合入公共分支的同时可以在 MR 勾选删除源分支，日积月累就会导致本地有很多分支且对应的远程分支已经被删除。这里记录下如何快速清理这些分支。</p>
<a id="more"></a>
<p><strong>清理前</strong></p>
<p>  确认即将清理的本地分支是已经 merged 的分支，避免丢失分支。同时分支名有一定规律则方便批量删除。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/git-order/4.png" alt></p>
<h3 id="批量删除本地分支"><a class="header-anchor" href="#批量删除本地分支">¶</a>批量删除本地分支</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch |grep <span class="string">'feat_5.2.x_'</span> |xargs git branch -D</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/git-order/5.png" alt></p>
<h3 id="批量删除远程分支"><a class="header-anchor" href="#批量删除远程分支">¶</a>批量删除远程分支</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -r| grep <span class="string">'feat_5.2.x_'</span> | sed <span class="string">'s/origin\///g'</span> | xargs -I &#123;&#125; git push origin :&#123;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/git-order/6.png" alt></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令（十三）—— Git 取消文件更新监听【转载】</title>
    <url>/article/git-order-m.html</url>
    <content><![CDATA[<p>  平常使用 pm2 启动 node 项目时，想要指定日志输出地址，需要创建好日志文件，但是又不想打印的日志页传到仓库，可以新创建日志文件，提交后在忽略该文件的更新监听。</p>
<a id="more"></a>
<h3 id="为什么要取消文件监听"><a class="header-anchor" href="#为什么要取消文件监听">¶</a>为什么要取消文件监听</h3>
<p>  取消文件监听自有它的好处，比如平时开发你可以使用自己的脚本对项目进行更改、打补丁、等等。最常见的手段就是直接修改项目的配置文件<code>.gitignore</code>，然后写上你要忽略的文件，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_modules/</span><br><span class="line">dist/</span><br><span class="line">test/</span><br><span class="line">config/index.js</span><br></pre></td></tr></table></figure>
<p>  但问题来了，<code>.gitignore</code>的修改会被 git 监听到，如果你不介意的话，那么到这里就结束了，但如果你也不想要<code>.gitignore</code>也被监听到，那就继续往下看。</p>
<h3 id="一-assume-unchanged-和-skip-worktree"><a class="header-anchor" href="#一-assume-unchanged-和-skip-worktree">¶</a>一、assume-unchanged 和 skip-worktree</h3>
<ul>
<li>使用<code>assume-unchanged</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git update-index --assume-unchanged 指定你的文件</span><br><span class="line">// 例如</span><br><span class="line">git update-index --assume-unchanged ./config/index.js</span><br></pre></td></tr></table></figure>
<p>  此时放心的去修改<code>./config/index.js</code>，你会看到 git 不再去监听它，达到了不改<code>.gitignore</code>的的情况下也能取消监听。</p>
<ul>
<li>使用<code>skip-worktree</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git update-index --skip-worktree 指定你的文件</span><br><span class="line">// 例如</span><br><span class="line">git update-index --skip-worktree ./config/index.js</span><br></pre></td></tr></table></figure>
<p>  也是一样，放心的去修改<code>./config/index.js</code></p>
<p>  如果你想恢复监听可以输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git update-index --no-assume-unchanged 文件名</span><br><span class="line">git update-index --no-skip-worktree 文件名</span><br></pre></td></tr></table></figure>
<p>  如果你想列出哪些文件使用过<code>assume-unchanged</code>或<code>skip-worktree</code>，可以输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git ls-files -v|grep &quot;^h&quot;</span><br><span class="line">git ls-files -v|grep &quot;^S&quot;</span><br></pre></td></tr></table></figure>
<h4 id="assume-unchanged与skip-worktree有什么区别"><a class="header-anchor" href="#assume-unchanged与skip-worktree有什么区别">¶</a><code>assume-unchanged</code>与<code>skip-worktree</code>有什么区别</h4>
<p>  这两种方式效果功能一样，笔者的初略理解是使用<code>pull</code>时有细微差别</p>
<ul>
<li>
<p><code>--assume-unchanged</code> pull 时，如果远程文件发生与你的取消监听文件有发生了冲突，git 会以远程文件为最新进行覆盖掉旧的，则原先的取消监听文件会失效。</p>
</li>
<li>
<p><code>--skip-worktree</code> pull 时，git 会尽力维护你的取消监听文件，确保它们不会被某些情况给覆盖掉，最多就会提示你冲突了，让你手动解决。</p>
</li>
</ul>
<p>结合以上笔者建议使用<code>skip-worktree</code>会更稳妥些。</p>
<h3 id="二-配置当前项目的-git-info-exclude文件"><a class="header-anchor" href="#二-配置当前项目的-git-info-exclude文件">¶</a>二、配置当前项目的<code>.git\info\exclude</code>文件</h3>
<p>  如果项目没看到有<code>.git</code>目录说明是被隐藏掉了，可以通过【查看】进行设置显示，编辑<code>exclude</code>文件跟编辑<code>.gitignore</code>一样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_modules/</span><br><span class="line">dist/</span><br><span class="line">test/</span><br><span class="line">config/index.js</span><br></pre></td></tr></table></figure>
<p>  OK，就是这么简单！</p>
<h3 id="三-全局配置-gitignore-global文件"><a class="header-anchor" href="#三-全局配置-gitignore-global文件">¶</a>三、全局配置<code>.gitignore_global</code>文件</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">touch .gitignore_global</span><br><span class="line">git config --global core.excludesfile ~/.gitignore_global</span><br></pre></td></tr></table></figure>
<p><strong>解释：</strong></p>
<ul>
<li>1、<code>cd ~</code>表示切换到用户目录</li>
<li>2、<code>touch .gitignore_global</code>表示新建<code>.gitignore_global</code>文件</li>
<li>3、最后进行 git 配置</li>
<li>4、<code>.gitignore_global</code>文件通常放在<code>C:\Users\用户名</code>下面</li>
<li>5、<code>.gitignore_global</code>文件编辑规则和上面一样</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_modules/</span><br><span class="line">dist/</span><br><span class="line">test/</span><br><span class="line">config/index.js</span><br></pre></td></tr></table></figure>
<p>  这样所有项目就都会生效这套规则啦~</p>
<h3 id="注意事项"><a class="header-anchor" href="#注意事项">¶</a>注意事项</h3>
<p>  以上的任意方式当切换分支时会出现一种特殊情况：即你的取消监听文件（比如 index.js）是项目现有的，然后你对它进行了更改而且 git 也忽略了它，但是当你切换分支时，如果切换分支的（index.js）与当前分支的 index.js 文件有冲突，你是无法切换过去的，它会提示如下：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/git-order/3.png" alt></p>
<p>  图中表示<code>config/index.js</code>会被即将到来的分支所覆盖，请在切换分支前进行提交。</p>
<p>  因为这个问题笔者也是花费了很多时间去找答案，最终能找到的解决手段是：</p>
<ul>
<li>1、恢复监听</li>
<li>2、使用 stash 保留数据 然后切换分支</li>
<li>3、stash pop 恢复数据</li>
<li>4、重新取消监听</li>
</ul>
<p>  命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git update-index --no-skip-worktree ./config/index.js</span><br><span class="line">git stash</span><br><span class="line">git checkout 分支名</span><br><span class="line">git stash pop</span><br><span class="line">git update-index --skip-worktree ./config/index.js</span><br></pre></td></tr></table></figure>
<p>  虽然繁琐了点，但起码这是目前唯一的手段，因此笔者建议要取消监听的文件最好是新建的，而不是现有的，这样切换不同分支时就不会出现这样的问题，当然也有可能切换的分支刚好跟你新建的文件是相同的那么还是会产生上面情况，总之尽量少对现有的文件进行取消跟踪，因为 git 不知道切换下一个分支时，到底是忽略还是监听。</p>
<p>关于使用哪种方式来取消文件监听笔者最喜欢的当然是 第二和第三种，简单省事 ~</p>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p>  1、<a href="https://blog.csdn.net/cookcyq__/article/details/121918646" target="_black">Git 取消 git 文件跟踪/监听的几种方式及注意事项</a><br>
  2、<a href="https://www.cnblogs.com/oloroso/p/13367120.html" target="_black">删除 git 仓库中无用大文件</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令（十二）—— Git 项目设置用户名、邮箱</title>
    <url>/article/git-order-l.html</url>
    <content><![CDATA[<p>  git 常用命令系列随笔会记录一些用到的常见命令，这里记录一下<code>Git 项目设置用户名、邮箱</code>：</p>
<a id="more"></a>
<h3 id="一-全局配置"><a class="header-anchor" href="#一-全局配置">¶</a>一、全局配置</h3>
<p>  公司电脑可以全局设置 Git 的用户名和密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;git repository userName&quot;</span><br><span class="line">git config --global user.email &quot;git repository email&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;liuyi&quot;</span><br><span class="line">git config --global user.email &quot;liuyi@dtstack.com&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure>
<h3 id="二-单独配置"><a class="header-anchor" href="#二-单独配置">¶</a>二、单独配置</h3>
<p>  有时候会在公司电脑上处理一些 github 上的项目，这个时候使用单独的用户名和邮箱比较好，在项目路径下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config user.name &quot;git repository userName&quot;</span><br><span class="line">git config user.email &quot;git repository email&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config user.name &quot;liuxy0551&quot;</span><br><span class="line">git config user.email &quot;liuxy0551@qq.com&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure>
<p>  <code>git config -l</code>查看的是全局配置 + 当前项目的单独配置，使用时会优先使用当前项目的单独配置。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>手写 JavaScript 部分常见方法的代码</title>
    <url>/article/js-code.html</url>
    <content><![CDATA[<p>  最近在复习 js 的基础知识，记录一些常见方法的实现，保持保持写代码的能力。</p>
<a id="more"></a>
<h3 id="一-深拷贝"><a class="header-anchor" href="#一-深拷贝">¶</a>一、深拷贝</h3>
<p>  可查看之前关于<code>深拷贝</code>的一篇随笔：<a href="https://liuxianyu.cn/article/deep-copy-shallow-copy.html#四-深拷贝-deepcopy" target="_black">深拷贝（DeepCopy）</a>，本小节代码见： <a href="https://github.com/liuxy0551/js-code/tree/master/deepCopy/index.js" target="_black">github</a>。</p>
<h4 id="1-代码实现"><a class="header-anchor" href="#1-代码实现">¶</a>1、代码实现</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result</span><br><span class="line">  <span class="keyword">if</span> (obj !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">'object'</span>) &#123;</span><br><span class="line">    result = <span class="built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      result[i] = <span class="keyword">typeof</span> obj[i] === <span class="string">'object'</span> ? deepCopy(obj[i]) : obj[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = obj</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-验证"><a class="header-anchor" href="#2-验证">¶</a>2、验证</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、数组拷贝</span></span><br><span class="line"><span class="keyword">let</span> arr = [&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr</span><br><span class="line"><span class="keyword">let</span> arr2 = deepCopy(arr)</span><br><span class="line"><span class="built_in">console</span>.log(arr1[<span class="number">0</span>] === arr[<span class="number">0</span>]) <span class="comment">// true，浅拷贝，赋址</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2[<span class="number">0</span>] === arr[<span class="number">0</span>]) <span class="comment">// false，深拷贝，赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、对象拷贝</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span> &#125; &#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = obj</span><br><span class="line"><span class="keyword">let</span> obj2 = deepCopy(obj)</span><br><span class="line"><span class="built_in">console</span>.log(obj1.a === obj.a) <span class="comment">// true，浅拷贝，赋址</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.a === obj.a) <span class="comment">// false，深拷贝，赋值</span></span><br></pre></td></tr></table></figure>
<h4 id="3-判断是否数组的两种写法"><a class="header-anchor" href="#3-判断是否数组的两种写法">¶</a>3、判断是否数组的两种写法</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = []</span><br><span class="line">arr.constructor === <span class="built_in">Array</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(arr) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h3 id="二-防抖"><a class="header-anchor" href="#二-防抖">¶</a>二、防抖</h3>
<p>  多次操作只触发最后一次操作，可查看之前关于<code>防抖</code>的一篇随笔：<a href="https://liuxianyu.cn/article/function-debounce-throttle.html#一-防抖-debounce" target="_black">防抖-debounce</a>，本小节代码见： <a href="https://github.com/liuxy0551/js-code/tree/master/debounce/index.js" target="_black">github</a>。</p>
<h4 id="1-代码实现-v2"><a class="header-anchor" href="#1-代码实现-v2">¶</a>1、代码实现</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params">func, delay = <span class="number">600</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    timer &amp;&amp; clearTimeout(timer)</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      func()</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-验证-v2"><a class="header-anchor" href="#2-验证-v2">¶</a>2、验证</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>防抖<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 验证</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).addEventListener(<span class="string">'click'</span>, debounce(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'执行函数'</span>) &#125;, <span class="number">2000</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 实现</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params">func, delay = <span class="number">600</span></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> timer = <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">          timer &amp;&amp; clearTimeout(timer)</span><br><span class="line"><span class="javascript">          timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">            func()</span><br><span class="line">          &#125;, delay)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="三-节流"><a class="header-anchor" href="#三-节流">¶</a>三、节流</h3>
<p>  n 秒内触发事件仅执行一次函数，可查看之前关于<code>节流</code>的一篇随笔：<a href="https://liuxianyu.cn/article/function-debounce-throttle.html#二-节流-throttle" target="_black">节流-throttle</a>，本小节代码见： <a href="https://github.com/liuxy0551/js-code/tree/master/throttle/index.js" target="_black">github</a>。</p>
<h4 id="1-代码实现-v3"><a class="header-anchor" href="#1-代码实现-v3">¶</a>1、代码实现</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">throttle</span> (<span class="params">func, delay = <span class="number">600</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      timer = <span class="literal">null</span></span><br><span class="line">      func()</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-验证-v3"><a class="header-anchor" href="#2-验证-v3">¶</a>2、验证</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>节流<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 验证</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).addEventListener(<span class="string">'click'</span>, throttle(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'执行函数'</span>) &#125;, <span class="number">2000</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 实现</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">throttle</span> (<span class="params">func, delay = <span class="number">600</span></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> timer = <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">          if (timer) &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span></span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            timer = <span class="literal">null</span></span></span><br><span class="line">            func()</span><br><span class="line">          &#125;, delay)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 某个元素 hover 时显示另一个元素</title>
    <url>/article/css-hover-show.html</url>
    <content><![CDATA[<p>  最近在项目有个鼠标移到按钮上旁边显示二维码的需求，简化理解为<code>某个元素 hover 时显示另一个元素</code>，记录下解决方法。</p>
<a id="more"></a>
<p><img src="https://images-hosting.liuxianyu.cn/posts/css-hover-show/1.gif" alt></p>
<h3 id="实现思路："><a class="header-anchor" href="#实现思路：">¶</a>实现思路：</h3>
<ul>
<li>二维码是按钮的子组件</li>
<li>二维码是默认隐藏的<code>display: none;</code></li>
<li>当鼠标移到按钮上即按钮处于<code>hover</code>状态时，二维码显示<code>display: block;</code></li>
</ul>
<h3 id="代码示例"><a class="header-anchor" href="#代码示例">¶</a>代码示例</h3>
<h4 id="html"><a class="header-anchor" href="#html">¶</a>HTML</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom-btn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"qrcode-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"qrcode-img"</span> <span class="attr">src</span>=<span class="string">"../assets/images/a-10.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>手机扫码下载安装<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="css"><a class="header-anchor" href="#css">¶</a>CSS</h4>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bottom-btn</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">232px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">57px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"../assets/images/a-6.png"</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &amp;:hover .qrcode-box &#123;</span><br><span class="line">    <span class="selector-tag">display</span>: <span class="selector-tag">block</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.qrcode-box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">234px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">261px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"../assets/images/a-9.png"</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    .qrcode-img &#123;</span><br><span class="line">      <span class="selector-tag">width</span>: 120<span class="selector-tag">px</span>;</span><br><span class="line">      <span class="selector-tag">height</span>: 120<span class="selector-tag">px</span>;</span><br><span class="line">      <span class="selector-tag">border-radius</span>: 4<span class="selector-tag">px</span>;</span><br><span class="line">      <span class="selector-tag">margin</span>: 58<span class="selector-tag">px</span> <span class="selector-tag">auto</span> 5<span class="selector-tag">px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.text</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#1A64FF</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="添加动画"><a class="header-anchor" href="#添加动画">¶</a>添加动画</h4>
<p>  按如下代码添加 CSS3 animation 动画，<code>推荐写法</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bottom-btn</span> &#123;</span><br><span class="line">  &amp;:hover .qrcode-box &#123;</span><br><span class="line">     <span class="selector-tag">display</span>: <span class="selector-tag">block</span>;</span><br><span class="line">     <span class="selector-tag">animation</span>: <span class="selector-tag">fade-in</span> 0<span class="selector-class">.5s</span> <span class="selector-tag">linear</span> <span class="selector-tag">forwards</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">@keyframes</span> fade-in &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">      <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">      <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.qrcode-box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  以下代码是参考资料中的写法，会使得 bottom-btn 元素变得较大，鼠标滑过二维码隐藏时的区域也会使二维码显现，不符合逻辑，<code>瑕疵示范</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bottom-btn</span> &#123;</span><br><span class="line">  &amp;:hover .qrcode-box &#123;</span><br><span class="line">     <span class="comment">/*display: block;*/</span></span><br><span class="line">     <span class="selector-tag">opacity</span>: 1;</span><br><span class="line">     <span class="selector-tag">transform</span>: <span class="selector-tag">translateY</span>(0);</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.qrcode-box</span> &#123;</span><br><span class="line">    <span class="comment">/*display: none;*/</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.4s</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">50%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>如果按钮、二维码有一个相同的父元素，.father:hover .qrcode-box { display: block; } 就可以实现类似的效果了。</strong></li>
</ul>
</blockquote>
<h4 id="参考资料："><a class="header-anchor" href="#参考资料：">¶</a>参考资料：</h4>
<p>  <a href="https://www.cnblogs.com/csuwujing/p/9949379.html" target="_black">css鼠标悬浮控制元素隐藏与显示</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>Sass</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>node-sass 安装失败，使用 dart-sass 替代</title>
    <url>/article/node-sass-failed.html</url>
    <content><![CDATA[<p>  项目中使用的<code>node-sass</code>在服务器上经常安装失败，改用<code>dart-sass</code>替代，记录下更换方法。</p>
<a id="more"></a>
<h4 id="更换方法"><a class="header-anchor" href="#更换方法">¶</a>更换方法</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall node-sass</span><br><span class="line">npm i sass -D</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>dart-sass 不支持 sass 的<code>/deep/</code>的写法，需要更换成：<code>::v-deep</code></strong></li>
</ul>
</blockquote>
<p>  示例：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  /deep/ .van-button &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改为：</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  ::v-deep .van-button &#123;</span><br><span class="line">    padding: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="参考资料："><a class="header-anchor" href="#参考资料：">¶</a>参考资料：</h4>
<p>  <a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/advanced/sass.html#node-sass-to-dart-sass" target="_black">Node Sass to Dart Sass —— vue-element-admin</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>Sass</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>钉钉定制工作台自定义组件开发</title>
    <url>/article/dingtalk-workbench-plugin.html</url>
    <content><![CDATA[<p>  钉钉定制工作台的介绍可查阅官方文档 <a href="https://developers.dingtalk.com/document/dashboard" target="_black">什么是钉钉定制工作台</a>，这篇随笔主要涉及<code>开发自定义组件</code>，对使用官方组件的过程不做介绍。</p>
<a id="more"></a>
<h3 id="一-准备工作"><a class="header-anchor" href="#一-准备工作">¶</a>一、准备工作</h3>
<h4 id="1-小程序开发者工具"><a class="header-anchor" href="#1-小程序开发者工具">¶</a>1、小程序开发者工具</h4>
<p>  下载最新版 <a href="https://developers.dingtalk.com/document/resourcedownload/miniapp-tool?pnamespace=dashboard" target="_black">小程序开发者工具</a><code>重要</code>。</p>
<h4 id="2-查阅文档"><a class="header-anchor" href="#2-查阅文档">¶</a>2、查阅文档</h4>
<p>  其余步骤参考：<a href="https://developers.dingtalk.com/document/dashboard/dashboard-component-develop-overview" target="_black">开发自定义组件 - 入门教程</a>，这篇随笔不做赘述。</p>
<h3 id="二-常见问题"><a class="header-anchor" href="#二-常见问题">¶</a>二、常见问题</h3>
<h4 id="1-小程序语法"><a class="header-anchor" href="#1-小程序语法">¶</a>1、小程序语法</h4>
<p>  <code>自定义组件使用小程序语法</code>，可使用<code>block</code>、<code>picker</code>、<code>swiper</code>等标签。</p>
<h4 id="2-在自定义组件中使用数据源"><a class="header-anchor" href="#2-在自定义组件中使用数据源">¶</a>2、在自定义组件中使用数据源</h4>
<p>  先查阅官方文档：<a href="https://developers.dingtalk.com/document/dashboard/lw6y3w" target="_black">SDK -&gt; 发送请求</a><br>
  <code>/plugin/components/sy-swiper/index.js</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getSdk, getLifecycleSdk, &#125; <span class="keyword">from</span> <span class="string">'../../api/sdk'</span>;</span><br><span class="line"></span><br><span class="line">Component(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    bannerList: []</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  didMount() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">this</span>.getBanners()</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 获取轮播图列表</span></span><br><span class="line">    <span class="keyword">async</span> getBanners () &#123;</span><br><span class="line">      <span class="comment">// 这里读到的props，和config.json文件中定义的props相对应，详见config.json文件说明</span></span><br><span class="line">      <span class="keyword">const</span> props = <span class="keyword">this</span>.props.componentProps;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 请求接口 - 获取新闻列表</span></span><br><span class="line">      <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> getSdk().request(props.getBanners, &#123;&#125;, &#123;</span><br><span class="line">        <span class="comment">// sdk.request的第三个参数，输入注册数据源的信息</span></span><br><span class="line">        url: <span class="string">'http://xxxxxxx.com/api/v1/xxxx'</span>,</span><br><span class="line">        apiKey: <span class="string">'XXXXXX_BANNERS'</span>,</span><br><span class="line">        httpMethod: <span class="string">'GET'</span>,</span><br><span class="line">        params: <span class="string">''</span>,</span><br><span class="line">        apiSecret: <span class="string">'XXXXXX_BANNERS'</span>,</span><br><span class="line">        system: &#123;</span><br><span class="line">          userid: <span class="string">'xxxx'</span>,</span><br><span class="line">          corpId: <span class="string">'xxxx'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123; <span class="attr">bannerList</span>: data.groupnews.filter(<span class="function"><span class="params">i</span> =&gt;</span> i.topimg) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>  <code>/plugin/components/sy-swiper/index.axml</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 轮播图列表 --&gt;</span><br><span class="line">&lt;view class=&quot;sy-swiper-box&quot;&gt;</span><br><span class="line">  &lt;swiper class=&quot;swiper-box&quot; </span><br><span class="line">    indicator-dots=&quot;&#123;&#123; true &#125;&#125;&quot;</span><br><span class="line">    autoplay=&quot;&#123;&#123; true &#125;&#125;&quot;</span><br><span class="line">    interval=&quot;&#123;&#123; 5000 &#125;&#125;&quot;</span><br><span class="line">    circular=&quot;&#123;&#123; true &#125;&#125;&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;swiper-item a:for=&quot;&#123;&#123; bannerList &#125;&#125;&quot; key=&quot;swiper-item-&#123;&#123; index &#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;image class=&quot;swiper-img&quot; mode=&quot;scaleToFill&quot; src=&quot;&#123;&#123; item.topimg &#125;&#125;&quot; data-index=&quot;&#123;&#123; index &#125;&#125;&quot; onTap=&quot;goPage&quot; /&gt;</span><br><span class="line">    &lt;/swiper-item&gt;</span><br><span class="line">  &lt;/swiper&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>
<h4 id="3-打开应用或链接"><a class="header-anchor" href="#3-打开应用或链接">¶</a>3、打开应用或链接</h4>
<p>  阅读官方文档：<a href="https://developers.dingtalk.com/document/dashboard/qlmb8y" target="_black">SDK -&gt; 打开应用或链接</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>钉钉开发</category>
      </categories>
      <tags>
        <tag>钉钉开发</tag>
      </tags>
  </entry>
  <entry>
    <title>在不同电脑间同步 WebStorm 配置</title>
    <url>/article/webstorm-settings-repository.html</url>
    <content><![CDATA[<p>  平常使用 WebStorm 比较多，使用中偶尔会变更一下设置或者代码片段等，公司电脑和家里电脑会有些不同步，导出配置文件再导入有些不够高效（懒）。这个功能主要依赖<code>Preferences -&gt; Tools -&gt; Settings Repository</code>。</p>
<a id="more"></a>
<h3 id="操作步骤"><a class="header-anchor" href="#操作步骤">¶</a>操作步骤</h3>
<h4 id="1-新建仓库"><a class="header-anchor" href="#1-新建仓库">¶</a>1、新建仓库</h4>
<p>  新建一个 git 仓库用来存放配置，这里选的是 Github，生成一个 Token，稍后需要使用。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/webstorm-settings-repository/1.png" alt></p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/webstorm-settings-repository/2.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/webstorm-settings-repository/3.png" alt></div></div></div></div>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/webstorm-settings-repository/4.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/webstorm-settings-repository/5.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/webstorm-settings-repository/6.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/webstorm-settings-repository/7.png" alt></div></div><div class="group-picture-row"></div><div class="group-picture-row"></div></div></div>
<h4 id="2-上传配置"><a class="header-anchor" href="#2-上传配置">¶</a>2、上传配置</h4>
<p>  在需要上传配置的电脑上，打开 File -&gt; Settings Repository，输入仓库地址后点击 Overwrite Remote。</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/webstorm-settings-repository/8-1.png" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/webstorm-settings-repository/8-2.png" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/webstorm-settings-repository/9.png" alt></div></div></div></div>
<h4 id="3-下载配置"><a class="header-anchor" href="#3-下载配置">¶</a>3、下载配置</h4>
<p>  在需要下载配置的电脑上，打开 File -&gt; Settings Repository，输入仓库地址后点击 Overwrite Local。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/webstorm-settings-repository/10.png" alt></p>
<h3 id="参考资料："><a class="header-anchor" href="#参考资料：">¶</a>参考资料：</h3>
<p>  1、<a href="https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token" target="_black">Github: Creating a personal access token</a><br>
  2、<a href="https://www.jetbrains.com/help/webstorm/sharing-your-ide-settings.html#settings-repository" target="_black">WebStorm: Share settings through a settings repository</a></p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>WebStorm</category>
      </categories>
      <tags>
        <tag>WebStorm</tag>
      </tags>
  </entry>
  <entry>
    <title>记账啦开发系列（二）—— 微信小程序</title>
    <url>/article/jizhangla-api-b.html</url>
    <content><![CDATA[<p>  <code>记账啦</code>是一个微信小程序，<strong>如果你也喜欢记账，可以看看这个小程序。</strong></p>
<a id="more"></a>
<h3 id="系列文章"><a class="header-anchor" href="#系列文章">¶</a>系列文章</h3>
<p>  <a href="https://liuxianyu.cn/article/jizhangla-api-a.html" target="_black">记账啦开发系列（一）—— 项目介绍</a><br>
  <a href="https://liuxianyu.cn/article/jizhangla-api-b.html" target="_black">记账啦开发系列（二）—— 微信小程序</a></p>
<h3 id="截图展示"><a class="header-anchor" href="#截图展示">¶</a>截图展示</h3>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/jizhangla-api-b/1.jpg" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/jizhangla-api-b/2.jpg" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/jizhangla-api-b/3.jpg" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/jizhangla-api-b/4.jpg" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/jizhangla-api-b/5.jpg" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/jizhangla-api-b/6.jpg" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/jizhangla-api-b/7.jpg" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/jizhangla-api-b/8.jpg" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/jizhangla-api-b/9.jpg" alt></div></div></div></div>
<h3 id="目录结构"><a class="header-anchor" href="#目录结构">¶</a>目录结构</h3>
<p>  微信小程序使用的框架是 wepy 2.x 版本，可参考另一篇随笔：<a href="https://liuxianyu.cn/article/wepy-command.html" target="_black">wepy 常用指令</a>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jizhangla-wechat</span><br><span class="line">├─.editorconfig</span><br><span class="line">├─.prettierrc</span><br><span class="line">├─.wepycache</span><br><span class="line">├─.wepyignore</span><br><span class="line">├─package.json</span><br><span class="line">├─project.config.json</span><br><span class="line">├─wepy.config.js</span><br><span class="line">├─src</span><br><span class="line">|  ├─app.wpy</span><br><span class="line">|  ├─utils</span><br><span class="line">|  |   ├─date.js</span><br><span class="line">|  |   ├─index.js</span><br><span class="line">|  |   ├─previewImage.js</span><br><span class="line">|  |   ├─toast.js</span><br><span class="line">|  |   ├─data</span><br><span class="line">|  |   |  └accountTypes.js</span><br><span class="line">|  |   ├─api</span><br><span class="line">|  |   |  ├─apis.js</span><br><span class="line">|  |   |  └request.js</span><br><span class="line">|  ├─store</span><br><span class="line">|  |   ├─index.js</span><br><span class="line">|  |   ├─modules</span><br><span class="line">|  |   |    ├─accountBook.js</span><br><span class="line">|  |   |    ├─accountType.js</span><br><span class="line">|  |   |    ├─asset.js</span><br><span class="line">|  |   |    ├─member.js</span><br><span class="line">|  |   |    └user.js</span><br><span class="line">|  ├─pages</span><br><span class="line">|  |   ├─personal</span><br><span class="line">|  |   |    ├─about.wpy</span><br><span class="line">|  |   |    ├─accountBook.wpy</span><br><span class="line">|  |   |    ├─appSetting.wpy</span><br><span class="line">|  |   |    ├─feedback.wpy</span><br><span class="line">|  |   |    ├─index.wpy</span><br><span class="line">|  |   |    ├─info.wpy</span><br><span class="line">|  |   |    ├─userIntegral.wpy</span><br><span class="line">|  |   |    ├─member</span><br><span class="line">|  |   |    |   ├─form.wpy</span><br><span class="line">|  |   |    |   └index.wpy</span><br><span class="line">|  |   |    ├─asset</span><br><span class="line">|  |   |    |   ├─form.wpy</span><br><span class="line">|  |   |    |   ├─index.wpy</span><br><span class="line">|  |   |    |   └types.wpy</span><br><span class="line">|  |   ├─login</span><br><span class="line">|  |   |   ├─index.wpy</span><br><span class="line">|  |   |   ├─protocol.wpy</span><br><span class="line">|  |   |   └welcome.wpy</span><br><span class="line">|  |   ├─home</span><br><span class="line">|  |   |  └index.wpy</span><br><span class="line">|  |   ├─billTemplate</span><br><span class="line">|  |   |      └index.wpy</span><br><span class="line">|  |   ├─bill</span><br><span class="line">|  |   |  ├─form.wpy</span><br><span class="line">|  |   |  └index.wpy</span><br><span class="line">|  |   ├─asset</span><br><span class="line">|  |   |   └index.wpy</span><br><span class="line">|  ├─components</span><br><span class="line">|  |   ├─share</span><br><span class="line">|  |   |   ├─BillDayItem.wpy</span><br><span class="line">|  |   |   └ToLogin.wpy</span><br><span class="line">|  ├─mixins</span><br><span class="line">|  |   ├─mixList.js</span><br><span class="line">|  |   └mixScrollView.js</span><br><span class="line">├─static</span><br><span class="line">|   ├─styles</span><br><span class="line">|   |   ├─color.less</span><br><span class="line">|   |   ├─default.less</span><br><span class="line">|   |   ├─index.less</span><br><span class="line">|   |   ├─myCss.less</span><br><span class="line">|   |   └vant.less</span><br><span class="line">|   ├─images</span><br><span class="line">|   |   ├─home-top.jpg</span><br><span class="line">|   |   ├─logo.png</span><br><span class="line">|   |   ├─more-icon.png</span><br><span class="line">|   |   ├─share.jpg</span><br><span class="line">|   |   ├─tabBar</span><br><span class="line">|   |   |   ├─asset_active.png</span><br><span class="line">|   |   |   ├─asset_inactive.png</span><br><span class="line">|   |   |   ├─bill_active.png</span><br><span class="line">|   |   |   ├─bill_inactive.png</span><br><span class="line">|   |   |   ├─home_active.png</span><br><span class="line">|   |   |   ├─home_inactive.png</span><br><span class="line">|   |   |   ├─personal_active.png</span><br><span class="line">|   |   |   └personal_inactive.png</span><br></pre></td></tr></table></figure>
<h4 id="mixlist-js"><a class="header-anchor" href="#mixlist-js">¶</a>mixList.js</h4>
<p>  这里着重记录下 mixins 混入的写法，可以节省喝多长列表页面的代码量，我在 H5 的开发中也经常使用这种写法，可参考我写的组件文档：<a href="http://ui.syedu.tech/show-component/scroll" target="_black">syedu -&gt; Scroll 滚动</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 列表页请求数据 - mixList</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    mixPromise: <span class="literal">null</span>,</span><br><span class="line">    mixParams: <span class="literal">null</span>,</span><br><span class="line">    mixData: &#123;</span><br><span class="line">      fetching: <span class="literal">false</span>,</span><br><span class="line">      items: [],</span><br><span class="line">      page: <span class="number">1</span>,</span><br><span class="line">      pageSize: <span class="number">10</span>,</span><br><span class="line">      total: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    extraCallBack: <span class="literal">null</span>, <span class="comment">// 额外的数据处理</span></span><br><span class="line">    itemsRealLength: <span class="number">0</span> <span class="comment">// 当前整理过后的数组实际长度</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 分页</span></span><br><span class="line">    <span class="keyword">async</span> mixFetchPageData (promise, query = &#123;&#125;) &#123;</span><br><span class="line">      <span class="keyword">this</span>.mixPromise = promise || <span class="keyword">this</span>.mixPromise</span><br><span class="line">      <span class="keyword">this</span>.mixParams = &#123; ...this.mixParams, <span class="attr">page</span>: <span class="keyword">this</span>.mixData.page, <span class="attr">pageSize</span>: <span class="keyword">this</span>.mixData.pageSize, ...query &#125;</span><br><span class="line">      <span class="keyword">this</span>.mixData.fetching = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> <span class="keyword">this</span>.mixPromise(<span class="keyword">this</span>.mixParams).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.mixData.fetching = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.mixData.fetching = <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据，如果结果是 res.data[data]，则可以传入 data，一般用不着</span></span><br><span class="line">    <span class="keyword">async</span> mixFetchData (promise, query = &#123;&#125;, hasMore = <span class="literal">false</span>, data = <span class="string">''</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!hasMore) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mixData.page = <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.mixData.page += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.mixFetchPageData(promise, query)</span><br><span class="line">      <span class="keyword">if</span> (hasMore) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mixData.items = <span class="keyword">this</span>.mixData.items.concat(data ? res.data[data] : res.data)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.mixData.items = data ? res.data[data] : res.data</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.extraCallBack &amp;&amp; <span class="keyword">this</span>.extraCallBack()</span><br><span class="line">      <span class="keyword">this</span>.mixData.total = res.total</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上拉加载更多</span></span><br><span class="line">    <span class="keyword">async</span> mixLoadMore (data = <span class="string">''</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.mixData.total &gt; (<span class="keyword">this</span>.itemsRealLength ? <span class="keyword">this</span>.itemsRealLength : <span class="keyword">this</span>.mixData.items.length) &amp;&amp; <span class="keyword">this</span>.mixPromise) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">this</span>.mixFetchData(<span class="keyword">this</span>.mixPromise, &#123; ...this.mixParams, <span class="attr">page</span>: <span class="keyword">this</span>.mixData.page + <span class="number">1</span>, <span class="attr">pageSize</span>: <span class="keyword">this</span>.mixData.pageSize &#125;, <span class="literal">true</span>, data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// used</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mixData.items 数据集合（数组），在页面中循环展示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// methods: &#123;</span></span><br><span class="line"><span class="comment">//   fetchData () &#123;</span></span><br><span class="line"><span class="comment">//     this.mixFetchData(wepy.apis.getUsers)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上拉加载更多</span></span><br><span class="line"><span class="comment">// onReachBottom () &#123;</span></span><br><span class="line"><span class="comment">//   this.mixLoadMore()</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong><br>
<strong>ios 微信小程序中的 Promise 不支持使用 finally，请使用 .then 和 catch</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>记账啦开发系列（一）—— 项目介绍</title>
    <url>/article/jizhangla-api-a.html</url>
    <content><![CDATA[<p><img src="https://images-hosting.liuxianyu.cn/posts/jizhangla-api-a/1.jpg" alt></p>
<p>  <code>记账啦</code>是一个微信小程序，<strong>如果你也喜欢记账，可以看看这个小程序。</strong></p>
<a id="more"></a>
<h3 id="系列文章"><a class="header-anchor" href="#系列文章">¶</a>系列文章</h3>
<p>  <a href="https://liuxianyu.cn/article/jizhangla-api-a.html" target="_black">记账啦开发系列（一）—— 项目介绍</a><br>
  <a href="https://liuxianyu.cn/article/jizhangla-api-b.html" target="_black">记账啦开发系列（二）—— 微信小程序</a></p>
<h3 id="为什么做"><a class="header-anchor" href="#为什么做">¶</a>为什么做</h3>
<p>  之前用了近三年的<code>网易有钱记账</code>即将关闭服务器，用了一个月<code>随手记</code>，觉得功能完善，但是有部分功能有点反我这个人类。由于已经养成了记账的习惯，刚好最近也想要学习下用 node 写 Web Server，便有了<code>记账啦</code>这个微信小程序。目前已发布，功能继续完善中。借助微信的用户体系，是因为可以省去手机号验证码的开发（验证码要钱），个人的微信公众号开发又有诸多限制，最终选择了微信小程序，这方面的经验也多一些，管理后台也在同步建设中。因为是第一次用 node 写 Web Server，所以随笔内容是做思路整理。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitee 图床【已不可用】</title>
    <url>/article/gitee-image-hosting.html</url>
    <content><![CDATA[<p>  博客的图片等媒体资源经历了几次波折，这次记录下用 Gitee 搭建图床存储博客图片等媒体资源，不借助 PicGo 是因为 Gitee 仓库中超过 1M 的图片需要登录后才能查看，对访客很不友好。</p>
<a id="more"></a>
<h3 id="一波三折"><a class="header-anchor" href="#一波三折">¶</a>一波三折</h3>
<p>  这个博客是用 Hexo 搭建的，图片等媒体资源经历过以下几次折腾：</p>
<h4 id="1-github"><a class="header-anchor" href="#1-github">¶</a>1、github</h4>
<p>  博客初期是用的 github pages，图片等媒体资源都在项目的文件夹中，由于国内的网络原因，经常出现图片加载失败、加载慢等情况。</p>
<h4 id="2-阿里云服务器"><a class="header-anchor" href="#2-阿里云服务器">¶</a>2、阿里云服务器</h4>
<p>  目前博客打包后放在我的阿里云服务器上，图片等媒体资源自然也是从服务器访问，由于服务器带宽有限，加载效果也不理想。</p>
<h4 id="3-七牛云"><a class="header-anchor" href="#3-七牛云">¶</a>3、七牛云</h4>
<p>  看了下七牛云每个月的免费流量，对这个博客来说够用了，便准备搬迁到七牛云，奈何搬迁初期发现七牛云的 https 访问是收费的，博客是 https 访问的，访问 http 资源会报错，故舍弃之。</p>
<h4 id="4-gitee"><a class="header-anchor" href="#4-gitee">¶</a>4、gitee</h4>
<p>  写这篇随笔之前，博客项目是同步部署到 gitee 上的，利用 gitee pages 功能部署项目，这样就能拿到图片等媒体资源的 https 链接了，无奈 gitee 每个项目的文件总大小限制了 1G，随着随笔的积累，日前部署时 gitee 的仓库已经推不上去了（保持微笑），遂准备将图片等媒体资源统统迁移到单独的 gitee 项目中，每满 1G 便新建一个项目（来自白嫖党的倔强）。</p>
<h3 id="gitee-图床"><a class="header-anchor" href="#gitee-图床">¶</a>Gitee 图床</h3>
<h4 id="1-新建仓库"><a class="header-anchor" href="#1-新建仓库">¶</a>1、新建仓库</h4>
<p><img src="https://images-hosting.liuxianyu.cn/posts/gitee-image-hosting/1.png" alt></p>
<p>  clone 该仓库，将图片等媒体资源按随笔分文件夹存放到这个仓库，push 到远程仓库。</p>
<h4 id="2-gitee-pages"><a class="header-anchor" href="#2-gitee-pages">¶</a>2、Gitee Pages</h4>
<p>  每次有新图片都需要更新（白嫖的无奈），看到有 <a href="https://gitee.com/api/v5/swagger#/getV5ReposOwnerRepoStargazers?ex=no" target="_black">Open API</a>，后续研究。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/gitee-image-hosting/2.png" alt></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>解决国内 npm 太慢的问题</title>
    <url>/article/npm-cnpm.html</url>
    <content><![CDATA[<p>  日常使用 npm 的过程中，国内下载第三方包的速度很慢，还容易安装超时报错后停止，这时候需要删除 node_modules 文件重新下载，比较麻烦，记录下解决方法。</p>
<a id="more"></a>
<h3 id="一-更换-npm-源推荐"><a class="header-anchor" href="#一-更换-npm-源推荐">¶</a>一、更换 npm 源<code>推荐</code></h3>
<p>  淘宝仓库源和 npm 仓库源每十分钟同步一次，基本满足日常需求，可以更换 npm 源，使用淘宝仓库源。</p>
<p>  1、查看 npm 配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config ls</span><br></pre></td></tr></table></figure>
<p>  默认示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; cli configs</span><br><span class="line">metrics-registry = &quot;https://registry.npmjs.org/&quot;</span><br><span class="line">scope = &quot;&quot;</span><br><span class="line">user-agent = &quot;npm/6.14.5 node/v14.3.0 linux x64&quot;</span><br><span class="line"></span><br><span class="line">; node bin location = /usr/src/node-v14.3.0-linux-x64/bin/node</span><br><span class="line">; cwd = /root/.jenkins/workspace/zucc-dingtalk-welcome</span><br><span class="line">; HOME = /root</span><br><span class="line">; &quot;npm config ls -l&quot; to show all defaults.</span><br></pre></td></tr></table></figure>
<p>  2、使用淘宝仓库源：<code>推荐</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>
<p>  3、使用官方源（默认源）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>
<h3 id="二-使用-cnpm"><a class="header-anchor" href="#二-使用-cnpm">¶</a>二、使用 cnpm</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong><br>
cnpm 不受 package-lock 的影响，所以建议使用<code>更换 npm 源</code>的方法</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习 Docker 之旅（五）—— 安装 Redis 并启动、连接</title>
    <url>/article/docker-d.html</url>
    <content><![CDATA[<p>  这两年 Docker 比较火，很多大厂都在使用。这里记录一下 Cent OS 中使用 Docker 安装 Redis 并启动、连接的过程。</p>
<a id="more"></a>
<p>  <strong>建议切换 root 用户进行以下操作</strong></p>
<h3 id="一-安装-redis"><a class="header-anchor" href="#一-安装-redis">¶</a>一、安装 Redis</h3>
<h4 id="1-查找镜像"><a class="header-anchor" href="#1-查找镜像">¶</a>1、查找镜像</h4>
<p>  在 Docker Hub 官网查找自己需要的版本 <a href="https://hub.docker.com/_/redis?tab=tags" target="_blank" rel="noopener">https://hub.docker.com/_/redis?tab=tags</a></p>
<h4 id="2-下载镜像"><a class="header-anchor" href="#2-下载镜像">¶</a>2、下载镜像</h4>
<p>  我选择的是 7.0.5：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis:7.0.5</span><br></pre></td></tr></table></figure>
<h4 id="3-创建项目文件夹并进入"><a class="header-anchor" href="#3-创建项目文件夹并进入">¶</a>3、创建项目文件夹并进入</h4>
<p>  本地创建一个文件夹用来存放 Redis 的配置文件、日志以及数据等（挂载目录，作用是将此目录中的文件或文件夹覆盖掉容器内部的文件或文件夹），<code>可跳过</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /mnt/docker/redis/conf</span><br><span class="line">cd /mnt/docker/redis/conf</span><br><span class="line">touch redis.conf</span><br></pre></td></tr></table></figure>
<h3 id="二-运行-redis"><a class="header-anchor" href="#二-运行-redis">¶</a>二、运行 Redis</h3>
<h4 id="1-使用镜像创建容器并运行"><a class="header-anchor" href="#1-使用镜像创建容器并运行">¶</a>1、使用镜像创建容器并运行</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 9736:6379 -d --name docker-redis -v $PWD/conf/redis.conf:/etc/redis/redis.conf -v $PWD/logs:/logs -v $PWD/data:/data -d redis:7.0.5 redis-server /etc/redis/redis.conf --appendonly yes --requirepass 123456</span><br></pre></td></tr></table></figure>
<p>指令解释：</p>
<ul>
<li><code>-p</code> 表示端口映射，<code>-p 宿主机port:容器port</code></li>
<li><code>-d</code> 表示后台运行并返回容器 id，只有在父进程即 docker 进程退出的时候才会去把容器退出，除非你使用了<code>--rm</code>选项。如果你在运行容器时将<code>-d</code>和<code>--rm</code>两个选项一起使用，那么容器会在退出或者后台进程停止的的时候自动移除掉（只要一个情况便会自动移除镜像）</li>
<li><code>--name</code> 表示给容器指定的名称</li>
<li><code>d redis</code> 表示后台启动 Redis</li>
<li><code>-v $PWD/conf/redis.conf:/etc/redis/redis.conf</code> 表示将主机上当前目录下的 conf/my.cnf 文件挂载到容器的 /etc/redis/redis.conf</li>
<li><code>-v $PWD/logs:/logs</code> 表示将主机上当前目录下的 logs 目录挂载到容器的 /logs</li>
<li><code>appendonly yes</code> 开启 Redis 持久化</li>
<li><code>--requirepass 123456</code> 需要密码，auth</li>
</ul>
<blockquote>
<p>可以不挂载文件夹</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 9736:6379 -d --name docker-redis -d redis:7.0.5 redis-server --appendonly yes --requirepass 123456</span><br></pre></td></tr></table></figure>
<h4 id="2-进入容器"><a class="header-anchor" href="#2-进入容器">¶</a>2、进入容器</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it docker-redis redis-cli</span><br></pre></td></tr></table></figure>
<h4 id="3-输入密码"><a class="header-anchor" href="#3-输入密码">¶</a>3、输入密码</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auth 123456</span><br></pre></td></tr></table></figure>
<h4 id="4-查看当前密码"><a class="header-anchor" href="#4-查看当前密码">¶</a>4、查看当前密码</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config get requirepass</span><br></pre></td></tr></table></figure>
<h4 id="5-重新设置密码"><a class="header-anchor" href="#5-重新设置密码">¶</a>5、重新设置密码</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config set requirepass abcd</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Sequelize 中的事务（托管事务）</title>
    <url>/article/transaction.html</url>
    <content><![CDATA[<p>  最近 koa2 项目中用到的 ORM 是 Sequelize V6，用户第一次登录时会在用户表、积分表、账本表等多个表中添加数据，还有其他场景，记录一下 Sequelize 中的事务如何使用，重点是<code>托管事务</code>。</p>
<a id="more"></a>
<h3 id="一-事务的定义"><a class="header-anchor" href="#一-事务的定义">¶</a>一、事务的定义</h3>
<p>  网上关于事务的定义有很多，简单理解为以下几点：</p>
<ul>
<li>原子性：事务中的全部操作在数据库中是不可分割的，要么全部完成，要么全部不执行。</li>
<li>一致性：几个并行执行的事务，其执行结果必须与按某一顺序 串行执行的结果相一致。</li>
<li>隔离性：事务的执行不受其他事务的干扰，事务执行的中间结果对其他事务必须是透明的。</li>
<li>持久性：对于任意已提交事务，系统必须保证该事务对数据库的改变不被丢失，即使数据库出现故障。</li>
</ul>
<h3 id="二-sequelize-中的事务"><a class="header-anchor" href="#二-sequelize-中的事务">¶</a>二、Sequelize 中的事务</h3>
<p>  默认情况下，Sequelize 不使用事务，正常情况下生产环境是应该使用事务的。Sequelize 中支持两种使用方式，推荐<code>托管事务</code>：</p>
<h4 id="1-非托管事务"><a class="header-anchor" href="#1-非托管事务">¶</a>1、非托管事务</h4>
<p>  可参考：<a href="https://www.sequelize.com.cn/other-topics/transactions#%E9%9D%9E%E6%89%98%E7%AE%A1%E4%BA%8B%E5%8A%A1" target="_black">非托管事务</a></p>
<h4 id="2-托管事务"><a class="header-anchor" href="#2-托管事务">¶</a>2、托管事务</h4>
<p>  托管事务会自动处理提交或回滚事务，通过将回调传递给<code>sequelize.transaction</code>来启动托管事务，这个回调可以是<code>async</code>的(通常是的)。在这种情况下，将发生以下情况：</p>
<ul>
<li>Sequelize 将自动开始事务并获得事务对象<code>t</code></li>
<li>将执行提供的回调，并在其中传递<code>t</code></li>
<li>如果回调抛出错误，Sequelize 将自动回滚事务</li>
<li>如果回调成功，Sequelize 将自动提交事务</li>
</ul>
<br>
<p>  <code>sequelize.transaction</code>调用的两种结果：</p>
<ul>
<li>1、回调执行完成</li>
<li>2、如果回调引发错误，则拒绝执行回调并抛出错误</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> sequelize.transaction(<span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> User.create(&#123;</span><br><span class="line">      firstName: <span class="string">'Abraham'</span>,</span><br><span class="line">      lastName: <span class="string">'Lincoln'</span></span><br><span class="line">    &#125;, &#123; <span class="attr">transaction</span>: t &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> user.setShooter(&#123;</span><br><span class="line">      firstName: <span class="string">'John'</span>,</span><br><span class="line">      lastName: <span class="string">'Boothe'</span></span><br><span class="line">    &#125;, &#123; <span class="attr">transaction</span>: t &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果执行到此，则表示事务已成功提交，result 是事务返回的结果，在这种情况下为 `user`</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// 如果执行到此，则发生错误，该事务已由 Sequelize 自动回滚。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong><br>
<strong><code>t.commit()</code>和<code>t.callback()</code>没有被直接调用。</strong></p>
</blockquote>
<h4 id="3-抛出错误以回滚"><a class="header-anchor" href="#3-抛出错误以回滚">¶</a>3、抛出错误以回滚</h4>
<p>  使用托管事务时，不应手动执行<code>t.commit()</code>和<code>t.callback()</code>，如果回调成功，依旧想回滚事务，可手动抛出错误：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> sequelize.transaction(<span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> User.create(&#123;</span><br><span class="line">    firstName: <span class="string">'Abraham'</span>,</span><br><span class="line">    lastName: <span class="string">'Lincoln'</span></span><br><span class="line">  &#125;, &#123; <span class="attr">transaction</span>: t &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查询成功，但仍要回滚，</span></span><br><span class="line">  <span class="comment">// 手动抛出错误，以便 Sequelize 自动处理所有内容.</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p><a href="https://www.sequelize.com.cn/other-topics/transactions" target="_black">Sequelize 事务</a></p>
]]></content>
      <categories>
        <category>node</category>
        <category>Sequelize</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>Sequelize</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 按日期分组统计数量</title>
    <url>/article/sql-group-by-day.html</url>
    <content><![CDATA[<p>  最近在学习用 node 写个 Web Server，有个需求是统计最近30天每天新增的用户数，记录下 SQL 语句。</p>
<a id="more"></a>
<h3 id="1-user-表"><a class="header-anchor" href="#1-user-表">¶</a>1、User 表</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/sql-group-by-day/1.png" alt></p>
<h3 id="2-sql-语句和结果"><a class="header-anchor" href="#2-sql-语句和结果">¶</a>2、SQL 语句和结果</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/sql-group-by-day/2.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  DATE_FORMAT( createTime, &quot;%Y-%m-%d&quot; ) AS DAY,</span><br><span class="line">  COUNT(*) AS count </span><br><span class="line">FROM</span><br><span class="line">  `User` </span><br><span class="line">GROUP BY</span><br><span class="line">  DATE_FORMAT( createTime, &quot;%Y-%m-%d&quot; );</span><br></pre></td></tr></table></figure>
<h3 id="参考资料："><a class="header-anchor" href="#参考资料：">¶</a>参考资料：</h3>
<p><a href="https://blog.csdn.net/weixin_41679015/article/details/103914132" target="_black">sql 按日期分组统计数量</a></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 5.7 报错：1055 - Expression&amp;nbsp;#1 of SELECT list is not in GROUP BY clause and contains nonaggregated column</title>
    <url>/article/mysql-1055.html</url>
    <content><![CDATA[<p>  通过 Docker 安装的 MySQL 5.7，发现使用<code>GROUP BY</code>语句时或报错，记错下处理过程：</p>
<a id="more"></a>
<p>  MySQL 5.7 的安装可参考 <a href="https://liuxianyu.cn/article/docker-c.html" target="_black">前端学习 Docker 之旅（四）—— 安装 MySQL 并启动、连接，修改时区</a>。</p>
<h3 id="1-进入容器"><a class="header-anchor" href="#1-进入容器">¶</a>1、进入容器</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql-5.7 /bin/bash</span><br></pre></td></tr></table></figure>
<h3 id="2-进入-mysql-的配置文件夹"><a class="header-anchor" href="#2-进入-mysql-的配置文件夹">¶</a>2、进入 MySQL 的配置文件夹</h3>
<p>  通过 docker 安装的 MySQL 5.7 配置文件为<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd  /etc/mysql/mysql.conf.d</span><br><span class="line">cat mysqld.cnf</span><br></pre></td></tr></table></figure>
<p>  可以看看有没有<code>vi</code>、<code>vim</code>，没有的话可以通过<code>echo</code>编辑<code>mysqld.cnf</code>，命令格式为<code>echo '' &gt; fileName</code>，引号内为文件内容。<br>
  将上一步 cat 得到的原有配置文件拷贝到编辑器，在配置文件中的<code>[mysqld]</code>下添加一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sql_mode = &quot;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;</span><br></pre></td></tr></table></figure>
<p>  在上述编辑后的内容前后加上命令的内容，并拷贝到 docker 镜像内的终端执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &apos;# Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line">#</span><br><span class="line"># This program is free software; you can redistribute it and/or modify</span><br><span class="line"># it under the terms of the GNU General Public License, version 2.0,</span><br><span class="line"># as published by the Free Software Foundation.</span><br><span class="line">#</span><br><span class="line"># This program is also distributed with certain software (including</span><br><span class="line"># but not limited to OpenSSL) that is licensed under separate terms,</span><br><span class="line"># as designated in a particular file or component or in included license</span><br><span class="line"># documentation.  The authors of MySQL hereby grant you an additional</span><br><span class="line"># permission to link the program and your derivative works with the</span><br><span class="line"># separately licensed software that they have included with MySQL.</span><br><span class="line">#</span><br><span class="line"># This program is distributed in the hope that it will be useful,</span><br><span class="line"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="line"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><br><span class="line"># GNU General Public License, version 2.0, for more details.</span><br><span class="line">#</span><br><span class="line"># You should have received a copy of the GNU General Public License</span><br><span class="line"># along with this program; if not, write to the Free Software</span><br><span class="line"># Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># The MySQL  Server configuration file.</span><br><span class="line">#</span><br><span class="line"># For explanations see</span><br><span class="line"># http://dev.mysql.com/doc/mysql/en/server-system-variables.html</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">sql_mode = &quot;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;</span><br><span class="line">pid-file	= /var/run/mysqld/mysqld.pid</span><br><span class="line">socket		= /var/run/mysqld/mysqld.sock</span><br><span class="line">datadir		= /var/lib/mysql</span><br><span class="line">#log-error	= /var/log/mysql/error.log</span><br><span class="line"># By default we only accept connections from localhost</span><br><span class="line">#bind-address	= 127.0.0.1</span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links=0&apos; &gt; mysqld.cnf</span><br></pre></td></tr></table></figure>
<h3 id="3-重启-docker-镜像"><a class="header-anchor" href="#3-重启-docker-镜像">¶</a>3、重启 docker 镜像</h3>
<p>  完成上述步骤后可以<code>cat mysqld.cnf</code>看下是否已保存成功，重启 docker 镜像后就可以使用<code>GROUP BY</code>语句啦。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker restart mysql-5.7</span><br></pre></td></tr></table></figure>
<h3 id="参考资料："><a class="header-anchor" href="#参考资料：">¶</a>参考资料：</h3>
<p><a href="https://blog.csdn.net/weixin_38860565/article/details/94440467" target="_black">mysql5.7 报错1055:Expression #1 of SELECT list is not in GROUP BY clause and contains non</a></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>滚动到顶部时吸附</title>
    <url>/article/scroll-fixed.html</url>
    <content><![CDATA[<p>  最近一个简单的官网项目中，有滑动到顶部时将标题栏吸顶的优化需求，记录一下。</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--横标题部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"px-title title"</span> <span class="attr">:class</span>=<span class="string">"&#123; 'fixed': fixed &#125;"</span>&gt;</span></span><br><span class="line">  标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  fixed: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">mounted () &#123;</span><br><span class="line">  <span class="comment">// 滚动后吸顶</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.fixed = <span class="keyword">this</span>.$refs[<span class="string">'topBgRef'</span>].getBoundingClientRect().bottom &lt; <span class="number">0</span></span><br><span class="line">  &#125;, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.px-title</span> &#123;</span><br><span class="line">  &amp;.fixed &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 100%;</span><br><span class="line">    <span class="selector-tag">box-shadow</span>: 0 16<span class="selector-tag">px</span> 16<span class="selector-tag">px</span> <span class="selector-tag">-20px</span> <span class="selector-id">#5E5E5E</span>;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">fixed</span>;</span><br><span class="line">    <span class="selector-tag">top</span>: 0;</span><br><span class="line">    <span class="selector-tag">z-index</span>: 2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  参考资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect" target="_black">Element.getBoundingClientRect()</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Sequelize 日期格式化</title>
    <url>/article/sequelize-date.html</url>
    <content><![CDATA[<p>  最近 koa2 项目中用到的 ORM 是 Sequelize V6，查询时返回的时间格式是<code>2020-12-18T09:11:12.668Z</code>，希望得到的是<code>YYYY-MM-dd HH:mm:ss</code>，记录一下处理过程。</p>
<a id="more"></a>
<h3 id="一-统一配置项-推荐"><a class="header-anchor" href="#一-统一配置项-推荐">¶</a>一、统一配置项 <code>推荐</code></h3>
<p>  添加<code>dialectOptions</code>配置项，并设置<code>dateStrings</code>、<code>typeCast</code>两个参数的值为 true，如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; host, user, password, database, dialect, timezone, logging &#125; = <span class="built_in">require</span>(<span class="string">'../../../config/db.config'</span>)</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    host,</span><br><span class="line">    dialect,</span><br><span class="line">    define: &#123;</span><br><span class="line">        timestamps: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    timezone,</span><br><span class="line">    logging,</span><br><span class="line">    dialectOptions: &#123;</span><br><span class="line">        dateStrings: <span class="literal">true</span>,</span><br><span class="line">        typeCast: <span class="literal">true</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(database, user, password, options)</span><br></pre></td></tr></table></figure>
<h3 id="二-方法转换-不推荐"><a class="header-anchor" href="#二-方法转换-不推荐">¶</a>二、方法转换 <code>不推荐</code></h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userInfo = <span class="keyword">await</span> db.User.findOne(&#123;</span><br><span class="line">  where,</span><br><span class="line">  attributes: &#123;</span><br><span class="line">    exclude: [<span class="string">'isDelete'</span>, <span class="string">'openId'</span>, <span class="string">'password'</span>],</span><br><span class="line">    include: [</span><br><span class="line">      [sequelize.Sequelize.fn(<span class="string">'date_format'</span>, sequelize.Sequelize.col(<span class="string">'createTime'</span>), <span class="string">'%Y-%m-%d %H:%i:%s'</span>), <span class="string">'createTime'</span>],</span><br><span class="line">      [sequelize.Sequelize.fn(<span class="string">'date_format'</span>, sequelize.Sequelize.col(<span class="string">'updateTime'</span>), <span class="string">'%Y-%m-%d %H:%i:%s'</span>), <span class="string">'updateTime'</span>],</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>node</category>
        <category>Sequelize</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>Sequelize</tag>
      </tags>
  </entry>
  <entry>
    <title>koa2 中使用 sequelize-auto 自动生成 models</title>
    <url>/article/sequelize-auto.html</url>
    <content><![CDATA[<p>  最近 koa2 项目中用到的 ORM 是 Sequelize V6，建好表后可以使用<code>sequelize-auto</code>自动生成每个表对应的 Model。</p>
<a id="more"></a>
<p>  <a href="https://github.com/sequelize/sequelize-auto" target="_black">GitHub：sequelize-auto</a></p>
<h3 id="一-安装依赖"><a class="header-anchor" href="#一-安装依赖">¶</a>一、安装依赖</h3>
<p>  项目中使用的 Mysql 5.7，安装<code>sequelize-auto</code>和<code>MySQL</code>依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i mysql -S</span><br><span class="line">npm i sequelize-auto -D</span><br></pre></td></tr></table></figure>
<p>  在<code>package.json</code>中的<code>script</code>添加命令：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "export NODE_ENV=development &amp;&amp; nodemon app.js",</span><br><span class="line">  "models": "export NODE_ENV=development &amp;&amp; node utils/mysql/sequelize-auto/auto.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二-配置参数"><a class="header-anchor" href="#二-配置参数">¶</a>二、配置参数</h3>
<h4 id="db-config-js"><a class="header-anchor" href="#db-config-js">¶</a>db.config.js</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  host : <span class="string">'127.0.0.1'</span>,</span><br><span class="line">  user : <span class="string">'root'</span>,</span><br><span class="line">  password : <span class="string">'123456'</span>,</span><br><span class="line">  database : <span class="string">'jizhangla'</span>,</span><br><span class="line">  port: <span class="number">3306</span>,</span><br><span class="line">  dialect: <span class="string">'mysql'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="auto-js"><a class="header-anchor" href="#auto-js">¶</a>auto.js</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// utils/mysql/sequelize-auto/auto.js</span></span><br><span class="line"><span class="keyword">const</span> SequelizeAuto = <span class="built_in">require</span>(<span class="string">'sequelize-auto'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; host, user, password, database, dialect, port &#125; = <span class="built_in">require</span>(<span class="string">'../../../db.config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  host,</span><br><span class="line">  dialect,</span><br><span class="line">  directory: <span class="string">'models'</span>,  <span class="comment">// 指定输出 models 文件的目录</span></span><br><span class="line">  port,</span><br><span class="line">  additional: &#123;</span><br><span class="line">    timestamps: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> auto = <span class="keyword">new</span> SequelizeAuto(database, user, password, options)</span><br><span class="line"></span><br><span class="line">auto.run(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>  执行<code>npm run models</code>，将自动在<code>models</code>文件夹下生成每个表对应的 Model，并生成<code>init-models.js</code>。</p>
<h4 id="db-js"><a class="header-anchor" href="#db-js">¶</a>db.js</h4>
<p>  在<code>utils/mysql</code>下新增<code>db.js</code>文件，内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>)</span><br><span class="line"><span class="keyword">const</span> initModels = <span class="built_in">require</span>(<span class="string">'../../models/init-models'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; host, user, password, database, dialect &#125; = <span class="built_in">require</span>(<span class="string">'../../db.config'</span>)</span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(database, user, password, &#123; host, dialect, <span class="attr">define</span>: &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = initModels(sequelize)</span><br></pre></td></tr></table></figure>
<h3 id="三-使用"><a class="header-anchor" href="#三-使用">¶</a>三、使用</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'../utils/mysql/db'</span>)</span><br><span class="line"><span class="keyword">const</span> userInfo = <span class="keyword">await</span> db.User.findOne(&#123; <span class="attr">where</span>: isDelete: <span class="number">0</span> &#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>node</category>
        <category>Sequelize</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>Sequelize</tag>
      </tags>
  </entry>
  <entry>
    <title>Sequelize 中常用的一些方法和参数</title>
    <url>/article/sequelize-function.html</url>
    <content><![CDATA[<p>  最近 koa2 项目中用到的 ORM 是 Sequelize V6，记录一下相关知识点。</p>
<a id="more"></a>
<p>  <a href="https://www.sequelize.com.cn/" target="_black">Sequelize 中文文档</a>、<a href="https://itbilu.com/nodejs/npm/V1PExztfb.html" target="_black">Sequelize 中文API文档－2. Model 的定义、使用与Model类的API</a></p>
<h3 id="一-常用方法"><a class="header-anchor" href="#一-常用方法">¶</a>一、常用方法</h3>
<h4 id="1-findall"><a class="header-anchor" href="#1-findall">¶</a>1、findAll</h4>
<p>  findAll 从数据库读取整个表：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> User.findAll()</span><br><span class="line">SELECT * FROM User;</span><br></pre></td></tr></table></figure>
<h5 id="1-select-特定属性attributes"><a class="header-anchor" href="#1-select-特定属性attributes">¶</a>（1）SELECT 特定属性<code>attributes</code></h5>
<p>  选择某些特定属性，可以使用<code>attributes</code>参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">User.findAll(&#123;</span><br><span class="line">  attributes: [<span class="string">'name'</span>, <span class="string">'age'</span>]</span><br><span class="line">&#125;)</span><br><span class="line">SELECT name, age FROM User;</span><br></pre></td></tr></table></figure>
<p>  可以使用嵌套数组来重命名属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">User.findAll(&#123;</span><br><span class="line">  attributes: [<span class="string">'name'</span>, [<span class="string">'age'</span>, <span class="string">'ageage'</span>], <span class="string">'hats'</span>]</span><br><span class="line">&#125;)</span><br><span class="line">SELECT name, age AS ageage, hats FROM User;</span><br></pre></td></tr></table></figure>
<p>  可以使用<code>sequelize.fn</code>进行聚合。使用聚合函数时，必须为它提供一个别名，以便能够从 Model 中访问它。在下面的示例中，可以通过<code>instance.n_hats</code>获取帽子数量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">User.findAll(&#123;</span><br><span class="line">  attributes: [</span><br><span class="line">    <span class="string">'name'</span>,</span><br><span class="line">    [sequelize.fn(<span class="string">'COUNT'</span>, sequelize.col(<span class="string">'hats'</span>)), <span class="string">'n_hats'</span>],</span><br><span class="line">    <span class="string">'age'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">SELECT name, COUNT(hats) AS n_hats, age FROM User;</span><br></pre></td></tr></table></figure>
<p>  不用列出所有属性，也可以使用聚合：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">User.findAll(&#123;</span><br><span class="line">  attributes: &#123;</span><br><span class="line">    include: [</span><br><span class="line">      [sequelize.fn(<span class="string">'COUNT'</span>, sequelize.col(<span class="string">'hats'</span>)), <span class="string">'n_hats'</span>]</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">SELECT name, age, ..., hats, COUNT(hats) AS n_hats FROM User;</span><br></pre></td></tr></table></figure>
<p>  同时，也可以排除部分属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">User.findAll(&#123;</span><br><span class="line">  attributes: &#123;</span><br><span class="line">    include: [</span><br><span class="line">      [sequelize.fn(<span class="string">'COUNT'</span>, sequelize.col(<span class="string">'hats'</span>)), <span class="string">'n_hats'</span>]</span><br><span class="line">    ],</span><br><span class="line">    exclude: [<span class="string">'age'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">SELECT name, ..., hats, COUNT(hats) AS n_hats FROM User;</span><br></pre></td></tr></table></figure>
<h5 id="2-应用-where-子句"><a class="header-anchor" href="#2-应用-where-子句">¶</a>（2）应用 WHERE 子句</h5>
<p>  <code>where</code> 用于过滤查询，<code>where</code>有很多运算符，可以从<code>Op</code>中以 Symbols 的形式使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">User.findAll(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">SELECT * FROM User WHERE name = <span class="string">'TOM'</span> AND age = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<p>  <code>OR</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Op &#125; = <span class="built_in">require</span>(<span class="string">'sequelize'</span>)</span><br><span class="line">User.findAll(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    [Op.or]: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Tom'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">age</span>: <span class="number">20</span><span class="string">' &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">SELECT * FROM User WHERE name = '</span>TOM<span class="string">' OR age = 20;</span></span><br></pre></td></tr></table></figure>
<p>  <code>IN</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Op &#125; = <span class="built_in">require</span>(<span class="string">'sequelize'</span>)</span><br><span class="line">User.findAll(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    name: [<span class="string">'Tom'</span>, <span class="string">'Mary'</span>] <span class="comment">// 等同于：name: &#123; [Op.or]: ['Tom', 'Mary'] &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">SELECT * FROM User WHERE name = <span class="string">'TOM'</span> OR age = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<p>  更多<code>Op</code>操作符参见文档：<a href="https://www.sequelize.com.cn/core-concepts/model-querying-basics#%E6%93%8D%E4%BD%9C%E7%AC%A6" target="_black">操作符</a></p>
<h5 id="3-排序和分组"><a class="header-anchor" href="#3-排序和分组">¶</a>（3）排序和分组</h5>
<p>  <a href="https://www.sequelize.com.cn/core-concepts/model-querying-basics#%E6%8E%92%E5%BA%8F%E5%92%8C%E5%88%86%E7%BB%84" target="_black">排序和分组</a></p>
<h5 id="4-限制和分页"><a class="header-anchor" href="#4-限制和分页">¶</a>（4）限制和分页</h5>
<p>  使用<code>limit</code>和<code>offset</code>参数可以进行限制和分页，通常与<code>order</code>排序一起使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提取10行</span></span><br><span class="line">User.findAll(&#123; <span class="attr">limit</span>: <span class="number">10</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳过8行</span></span><br><span class="line">User.findAll(&#123; <span class="attr">offset</span>: <span class="number">8</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳过5行，然后获取5行</span></span><br><span class="line">User.findAll(&#123; <span class="attr">offset</span>: <span class="number">5</span>, <span class="attr">limit</span>: <span class="number">5</span> &#125;)</span><br></pre></td></tr></table></figure>
<h5 id="5-返回原始数据"><a class="header-anchor" href="#5-返回原始数据">¶</a>（5）返回原始数据</h5>
<p>  默认情况下，返回的是模型类的实例，这意味着在数据库返回结果之后，Sequelize 会自动将所有内容包装在适当的实例对象中。当结果太多时，这种包装可能会效率低下，要禁用此包装并收到简单的响应，请将<code>{ raw: true }</code>作为参数传递给方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加 raw 选项后，会返回数据库中的原始结果</span></span><br><span class="line">User.findAll(&#123; <span class="attr">where</span>: &#123; ... &#125;, <span class="attr">raw</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure>
<h4 id="2-count"><a class="header-anchor" href="#2-count">¶</a>2、count</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询 age = 20 的用户数量</span></span><br><span class="line"><span class="keyword">const</span> total = <span class="keyword">await</span> User.count(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="3-findbypk"><a class="header-anchor" href="#3-findbypk">¶</a>3、findByPk</h4>
<p>  <code>findByPk</code>方法使用提供的主键从表中仅获得一行数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> User.findByPk(<span class="number">1024</span>) <span class="comment">// 主键的值是 1024</span></span><br></pre></td></tr></table></figure>
<h4 id="4-findone"><a class="header-anchor" href="#4-findone">¶</a>4、findOne</h4>
<p>  <code>findOne</code>方法获得它找到的<code>第一行</code>数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> User.findOne(&#123; <span class="attr">where</span>: &#123; <span class="attr">name</span>: <span class="string">'Tom'</span> &#125; &#125;)</span><br></pre></td></tr></table></figure>
<h4 id="5-findorcreate"><a class="header-anchor" href="#5-findorcreate">¶</a>5、findOrCreate</h4>
<p>  除非找到一个满足查询参数的结果,否则<code>findOrCreate</code>将在表中创建一行。具体参考：<a href="https://www.sequelize.com.cn/core-concepts/model-querying-finders#findorcreate" target="_black">findOrCreate</a></p>
<h4 id="6-findandcountall推荐"><a class="header-anchor" href="#6-findandcountall推荐">¶</a>6、findAndCountAll<code>推荐</code></h4>
<p>  结合了<code>findAll</code>和<code>count</code>的便捷方法。具体参考：<a href="https://www.sequelize.com.cn/core-concepts/model-querying-finders#findandcountall" target="_black">findAndCountAll</a>。findAndCountAll 方法返回有两个属性的对象：</p>
<ul>
<li>count —— 整数，符合查询条件的记录总数</li>
<li>rows —— 数组对象，获得的记录</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; count, rows &#125; = <span class="keyword">await</span> User.findAndCountAll(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      [Op.like]: <span class="string">'T%'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  offset: <span class="number">10</span>,</span><br><span class="line">  limit: <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(count)</span><br><span class="line"><span class="built_in">console</span>.log(rows)</span><br></pre></td></tr></table></figure>
<h3 id="二-作用域"><a class="header-anchor" href="#二-作用域">¶</a>二、作用域</h3>
<p>  <a href="https://www.sequelize.com.cn/other-topics/scopes" target="_black">作用域用于帮助复用代码</a></p>
]]></content>
      <categories>
        <category>node</category>
        <category>Sequelize</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>Sequelize</tag>
      </tags>
  </entry>
  <entry>
    <title>koa2 本地运行及 pm2 运行时如何区分 development 和 production</title>
    <url>/article/pm2-koa2-NODE_ENV.html</url>
    <content><![CDATA[<p>  最近项目本地开发时希望和生产环境区分数据库，本地是 nodemon 启动 app.js 的，生产环境是通过 pm2 启动的，记录在<code>macOS</code>开发时的配置。</p>
<a id="more"></a>
<p>  在 app.js 中打印<code>process.env.NODE_ENV</code>，可分别输出 development、production。</p>
<figure class="highlight shell"><figcaption><span>app.js</span></figcaption><table><tr><td class="code"><pre><span class="line">console.log('NODE_ENV', process.env.NODE_ENV)</span><br></pre></td></tr></table></figure>
<h3 id="一-本地运行"><a class="header-anchor" href="#一-本地运行">¶</a>一、本地运行</h3>
<p>  本地运行时希望<code>process.env.NODE_ENV</code>拿到的值是<code>development</code>，可以在<code>package.json</code>中的<code>script</code>设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;dev&quot;: &quot;export NODE_ENV=development &amp;&amp; nodemon app.js&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>其他文章看到说 Linux、macOS 使用 export，Windows 使用 set，未验证 set 是否有效</strong></li>
<li><strong>nodemon 参考 <a href="https://liuxianyu.cn/article/node-auto-compile.html" target="_black">node 自动编译</a></strong></li>
</ul>
</blockquote>
<p>  启动时执行<code>npm run dev</code>。</p>
<h3 id="二-生产环境"><a class="header-anchor" href="#二-生产环境">¶</a>二、生产环境</h3>
<p>  生产环境运行时希望<code>process.env.NODE_ENV</code>拿到的值是<code>production</code>，此随笔涉及到的项目是用 pm2 部署的，关于 pm2 可参考 <a href="https://liuxianyu.cn/article/node-pm2.html" target="_black">使用 pm2 部署 node 项目</a>。</p>
<p>  对应的 pm2 配置文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;jizhangla&quot;,</span><br><span class="line">  &quot;script&quot;: &quot;./app.js&quot;,</span><br><span class="line">  &quot;cwd&quot;   : &quot;./&quot;,</span><br><span class="line">  &quot;log_date_format&quot;: &quot;YYYY-MM-DD HH:mm:ss&quot;,</span><br><span class="line">  &quot;max_memory_restart&quot;: &quot;500M&quot;,</span><br><span class="line">  &quot;out_file&quot;   : &quot;./pm2/logs/pm2-out.log&quot;,</span><br><span class="line">  &quot;error_file&quot; : &quot;./pm2/logs/pm2-err.log&quot;,</span><br><span class="line">  &quot;env_production&quot;: &#123;</span><br><span class="line">    &quot;NODE_ENV&quot;: &quot;production&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  对应的 <a href="http://start.sh" target="_blank" rel="noopener">start.sh</a> 文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line">cnpm i</span><br><span class="line">pm2 restart ./pm2/config.json --env production</span><br><span class="line">pm2 monit</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>常见命令为：</strong><code>pm2 start app.js --env production</code></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>node</category>
        <category>pm2</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-nginx 配置 https 证书</title>
    <url>/article/hexo-nginx-https.html</url>
    <content><![CDATA[<p>  之前通过 <a href="https://liuxianyu.cn/article/centos-nginx-https.html" target="_black">使用 certbot 在 Cent OS 中给 nginx 配置 https</a> 给 hexo 配置的 https 似乎到期了，Chrome 会报危险，这次参考 <a href="https://liuxianyu.cn/article/nginx-https.html" target="_black">在阿里云通过 SSL证书和 nginx 配置 https</a>，对 https 证书进行了更新，记录下 nginx 配置。</p>
<a id="more"></a>
<p>  只在原有的 nginx 配置上进行了简单更改，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 博客的 nginx 配置</span><br><span class="line">server &#123; </span><br><span class="line">    server_name liuxianyu.cn;</span><br><span class="line"></span><br><span class="line">    root /mnt/projects/hexo-blog/blog;</span><br><span class="line">    index index.html;</span><br><span class="line">    location ^~ /static|img|js|css/ &#123;</span><br><span class="line">      gzip_static on;</span><br><span class="line">      expires max;</span><br><span class="line">      add_header Cache-Control public;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">      try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~* \.(css|js|gif|jpe?g|png)$ &#123;</span><br><span class="line">      expires 50d;</span><br><span class="line">      access_log off;</span><br><span class="line">      add_header Pragma public;</span><br><span class="line">      add_header Cache-Control &quot;public&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    listen 443 ssl; # managed by Certbot</span><br><span class="line">    ssl_certificate cert/liuxianyu.cn.pem;</span><br><span class="line">    ssl_certificate_key cert/liuxianyu.cn.key;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    if ($host = liuxianyu.cn) &#123;</span><br><span class="line">        return 301 https://$host$request_uri;</span><br><span class="line">    &#125; # managed by Certbot</span><br><span class="line"></span><br><span class="line">    listen 80; </span><br><span class="line">    server_name liuxianyu.cn;</span><br><span class="line">    return 404; # managed by Certbot</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nginx</category>
        <category>https-SSL</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>https-SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>node 微信公众号开发（四）—— 获取并缓存 jsapi_ticket 并生成 JS-SDK 权限验证的签名</title>
    <url>/article/node-wechat-jsapi_ticket.html</url>
    <content><![CDATA[<p>  最近想用 node 写一个微信公众号的项目，建议全程 https，这里记录一下如何获取并缓存 jsapi_ticket 并生成 JS-SDK 权限验证的签名。</p>
<a id="more"></a>
<h3 id="一-jsapi-ticket"><a class="header-anchor" href="#一-jsapi-ticket">¶</a>一、jsapi_ticket</h3>
<p>  这一部分可参考 <a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#62" target="_black">官方文档 - JS-SDK 使用权限签名算法</a>，<a href="https://liuxianyu.cn/article/node-wechat-base-koa.html#2-app-config-js" target="_black">app.config.js</a>。</p>
<h4 id="1-getjsapiticket-js"><a class="header-anchor" href="#1-getjsapiticket-js">¶</a>1、getJsapiTicket.js</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsapiTicket 的缓存和更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"><span class="keyword">const</span> appConfig = <span class="built_in">require</span>(<span class="string">'../../app.config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fileName = path.resolve(__dirname, <span class="string">'./jsapiTicket.json'</span>)</span><br><span class="line"><span class="keyword">let</span> accessTokenTemp, validTime = <span class="number">7200</span> <span class="comment">// jsapiTicket 的默认有效时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 access_token 获取 jsapiTicket</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">accessToken</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getJsapiTicket = <span class="keyword">async</span> (accessToken) =&gt; &#123;</span><br><span class="line">  accessTokenTemp = accessToken</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> readRes = fs.readFileSync(fileName, <span class="string">'utf8'</span>)</span><br><span class="line">    readRes = <span class="built_in">JSON</span>.parse(readRes)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果创建的时间超过现在时间默认 7200ms</span></span><br><span class="line">    <span class="keyword">const</span> createTime = <span class="keyword">new</span> <span class="built_in">Date</span>(readRes.createTime).getTime()</span><br><span class="line">    <span class="keyword">const</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">    <span class="keyword">if</span> ((nowTime - createTime) / <span class="number">1000</span> &gt;= validTime) &#123;</span><br><span class="line">      <span class="keyword">await</span> updateJsapiTicket()</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> getJsapiTicket()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> readRes.jsapiTicket</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 未读取到文件中的正确内容则更新接口</span></span><br><span class="line">    <span class="keyword">await</span> updateJsapiTicket()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> getJsapiTicket()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新本地缓存的 jsapiTicket</span></span><br><span class="line"><span class="keyword">const</span> updateJsapiTicket = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(<span class="keyword">await</span> getNewJsapiTicket())</span><br><span class="line">  <span class="keyword">if</span> (res.ticket) &#123;</span><br><span class="line">    validTime = res.expires_in</span><br><span class="line">    fs.writeFileSync(fileName, <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">createTime</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(), ...res &#125;))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> updateJsapiTicket()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 access_token 获取 jsapiTicket</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Promise&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 从微信获取新的 jsapiTicket，有效时间默认是 7200ms</span></span><br><span class="line"><span class="keyword">const</span> getNewJsapiTicket = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'从微信服务器获取 jsapiTicket 啦'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    request.get(<span class="string">`<span class="subst">$&#123; appConfig.wxapiBaseUrl &#125;</span>/ticket/getticket?access_token=<span class="subst">$&#123; accessTokenTemp &#125;</span>&amp;type=jsapi`</span>, (err, res, body) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(<span class="string">'获取 jsapiTicket 失败 检查 getJsapiTicket 函数'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(body)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsapiTicket 默认有效时间 7200ms，五分钟交替时间</span></span><br><span class="line">setInterval(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> updateJsapiTicket()</span><br><span class="line">&#125;, (validTime - <span class="number">300</span>) * <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = getJsapiTicket</span><br></pre></td></tr></table></figure>
<h4 id="2-外部获取-jsapi-ticket"><a class="header-anchor" href="#2-外部获取-jsapi-ticket">¶</a>2、外部获取 jsapi_ticket</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getAccessToken = <span class="built_in">require</span>(<span class="string">'../utils/wechat/getAccessToken'</span>)</span><br><span class="line"><span class="keyword">const</span> getJsapiTicket = <span class="built_in">require</span>(<span class="string">'../utils/wechat/getJsapiTicket'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsapiTicket = <span class="keyword">await</span> getJsapiTicket(<span class="keyword">await</span> getAccessToken())</span><br><span class="line"><span class="built_in">console</span>.log(jsapiTicket)</span><br></pre></td></tr></table></figure>
<h3 id="二-签名算法"><a class="header-anchor" href="#二-签名算法">¶</a>二、签名算法</h3>
<p>  这一部分可参考 <a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#62" target="_black">官方文档 - JS-SDK 使用权限签名算法</a></p>
<h4 id="1-sign-js"><a class="header-anchor" href="#1-sign-js">¶</a>1、sign.js</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从这里下载官方示例</span></span><br><span class="line"><span class="comment"> * http://demo.open.weixin.qq.com/jssdk/sample.zip</span></span><br><span class="line"><span class="comment"> * jssha 请用官方示例中的文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createNonceStr = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>, <span class="number">15</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createTimestamp = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() / <span class="number">1000</span>) + <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> raw = <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(args)</span><br><span class="line">  keys = keys.sort()</span><br><span class="line">  <span class="keyword">var</span> newArgs = &#123;&#125;</span><br><span class="line">  keys.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    newArgs[key.toLowerCase()] = args[key]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> string = <span class="string">''</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> newArgs) &#123;</span><br><span class="line">    string += <span class="string">'&amp;'</span> + k + <span class="string">'='</span> + newArgs[k]</span><br><span class="line">  &#125;</span><br><span class="line">  string = string.substr(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@synopsis </span>签名算法 </span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>appId 应用appId</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>jsapi_ticket 用于签名的 jsapi_ticket</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>url 用于签名的 url ，注意必须动态获取，不能 hardcode</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> sign = <span class="function"><span class="keyword">function</span> (<span class="params">appId, jsapi_ticket, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timestamp = createTimestamp()</span><br><span class="line">  <span class="keyword">let</span> nonceStr = createNonceStr()</span><br><span class="line">  <span class="keyword">var</span> ret = &#123; appId, jsapi_ticket, nonceStr, timestamp, url &#125;</span><br><span class="line">  <span class="keyword">var</span> string = raw(ret)</span><br><span class="line">  <span class="keyword">var</span> jsSHA = <span class="built_in">require</span>(<span class="string">'jssha'</span>)</span><br><span class="line">  <span class="keyword">var</span> shaObj = <span class="keyword">new</span> jsSHA(string, <span class="string">'TEXT'</span>)</span><br><span class="line">  <span class="keyword">var</span> signature = shaObj.getHash(<span class="string">'SHA-1'</span>, <span class="string">'HEX'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> config = &#123; appId, timestamp, nonceStr, signature &#125;</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = sign</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong><br>
jssha 建议与官方 demo 使用的版本一致，即1.5.0版本，可输入如下命令安装：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i jssha@1.5.0 -S</span><br></pre></td></tr></table></figure>
<h4 id="2-签名结果"><a class="header-anchor" href="#2-签名结果">¶</a>2、签名结果</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const appConfig = require(&apos;../app.config&apos;)</span><br><span class="line">const sign = require(&apos;../utils/wechat/sign&apos;)</span><br><span class="line">const getAccessToken = require(&apos;../utils/wechat/getAccessToken&apos;)</span><br><span class="line">const getJsapiTicket = require(&apos;../utils/wechat/getJsapiTicket&apos;)</span><br><span class="line"></span><br><span class="line">// 获取微信鉴权信息</span><br><span class="line">async getConfig () &#123;</span><br><span class="line">  let config</span><br><span class="line">  try &#123;</span><br><span class="line">    const jsapiTicket = await getJsapiTicket(await getAccessToken())</span><br><span class="line">    config = sign(appConfig.appId, jsapiTicket, ctx.query.url)</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    console.log(&apos;error&apos;, error)</span><br><span class="line">    config = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>微信开发</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>node 微信公众号开发（三）—— 获取并缓存 access_token</title>
    <url>/article/node-wechat-access_token.html</url>
    <content><![CDATA[<p>  最近想用 node 写一个微信公众号的项目，建议全程 https，这里记录一下如何获取并缓存 access_token。</p>
<a id="more"></a>
<h3 id="一-开发信息"><a class="header-anchor" href="#一-开发信息">¶</a>一、开发信息</h3>
<p>  在<code>微信公众号管理平台 -&gt; 开发 -&gt; 基本设置 -&gt; 公众号开发信息</code>中获取 appId、appSecret，并将服务器和本地的 ip 配置到<code>IP白名单</code>中，<a href="https://mp.weixin.qq.com/cgi-bin/announce?action=getannouncement&key=1495617578&version=1&lang=zh_CN&platform=2" target="_black">“获取access_token”接口新增IP白名单保护</a>。</p>
<h3 id="二-access-token"><a class="header-anchor" href="#二-access-token">¶</a>二、access_token</h3>
<p>  这一部分可参考 <a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html" target="_black">官方文档 - 获取Access token</a>，<a href="https://liuxianyu.cn/article/node-wechat-base-koa.html#2-app-config-js" target="_black">app.config.js</a>。</p>
<h4 id="1-getaccesstoken-js"><a class="header-anchor" href="#1-getaccesstoken-js">¶</a>1、getAccessToken.js</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * access_token 的缓存和更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"><span class="keyword">const</span> appConfig = <span class="built_in">require</span>(<span class="string">'../../app.config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fileName = path.resolve(__dirname, <span class="string">'./access_token.json'</span>)</span><br><span class="line"><span class="keyword">let</span> validTime = <span class="number">7200</span> <span class="comment">// access_token 的默认有效时间，单位秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过 appId 和 appSecret 获取 access_token</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Promise&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getAccessToken = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> readRes = fs.readFileSync(fileName, <span class="string">'utf8'</span>)</span><br><span class="line">    readRes = <span class="built_in">JSON</span>.parse(readRes)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果创建的时间超过现在时间默认 7200 秒</span></span><br><span class="line">    <span class="keyword">const</span> createTime = <span class="keyword">new</span> <span class="built_in">Date</span>(readRes.createTime).getTime()</span><br><span class="line">    <span class="keyword">const</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">    <span class="keyword">if</span> ((nowTime - createTime) / <span class="number">1000</span> &gt;= validTime) &#123;</span><br><span class="line">      <span class="keyword">await</span> updateAccessToken()</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> getAccessToken()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> readRes.access_token</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 未读取到文件中的正确内容则更新接口</span></span><br><span class="line">    <span class="keyword">await</span> updateAccessToken()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> getAccessToken()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新本地缓存的 access_token</span></span><br><span class="line"><span class="keyword">const</span> updateAccessToken = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(<span class="keyword">await</span> getNewAccessToken())</span><br><span class="line">  <span class="keyword">if</span> (res.access_token) &#123;</span><br><span class="line">    validTime = res.expires_in</span><br><span class="line">    fs.writeFileSync(fileName, <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">createTime</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(), ...res &#125;))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> updateAccessToken()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从微信获取新的 access_token，有效时间默认是 7200 秒</span></span><br><span class="line"><span class="keyword">const</span> getNewAccessToken = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'从微信服务器获取 access_token 啦'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    request.get(<span class="string">`<span class="subst">$&#123; appConfig.wxapiBaseUrl &#125;</span>/token?grant_type=client_credential&amp;appId=<span class="subst">$&#123; appConfig.appId &#125;</span>&amp;secret=<span class="subst">$&#123; appConfig.appSecret &#125;</span>`</span>, (err, res, body) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(<span class="string">'获取 access_token 失败 检查 getAccessToken 函数'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(body)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// access_token 默认有效时间 7200 秒，五分钟交替时间</span></span><br><span class="line">setInterval(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> updateAccessToken()</span><br><span class="line">&#125;, (validTime - <span class="number">300</span>) * <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = getAccessToken</span><br></pre></td></tr></table></figure>
<h4 id="2-外部获取-access-token"><a class="header-anchor" href="#2-外部获取-access-token">¶</a>2、外部获取 access_token</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getAccessToken = <span class="built_in">require</span>(<span class="string">'../utils/wechat/getAccessToken'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> accessToken = <span class="keyword">await</span> getAccessToken()</span><br><span class="line"><span class="built_in">console</span>.log(accessToken)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong><br>
在 getAccessToken() 中调用本身的地方需要注意，两处 await getAccessToken() 前都要加上 return，否则执行到这里时，外部调用 await getAccessToken() 拿到的会是 undefined，因为不加 return 意味着没有将此处拿到的返回值重新返回给外部。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>微信开发</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>node 微信公众号开发（二）—— 服务器配置</title>
    <url>/article/node-wechat-server.html</url>
    <content><![CDATA[<p>  最近想用 node 写一个微信公众号的项目，建议全程 https，这里记录一下怎么在微信公众号平台设置服务器及对应开发。</p>
<a id="more"></a>
<h3 id="一-开发内容"><a class="header-anchor" href="#一-开发内容">¶</a>一、开发内容</h3>
<p>  在刚刚搭建的基础框架中开发，<code>router/index.js</code>中写入如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模块化处理router</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"><span class="keyword">const</span> sha1 = <span class="built_in">require</span>(<span class="string">'sha1'</span>)</span><br><span class="line"><span class="keyword">const</span> appConfig = <span class="built_in">require</span>(<span class="string">'../app.config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动路由</span></span><br><span class="line"><span class="comment"> * allowedMethods, 在所有路由中间件最后调用, 此时根据 ctx.status 设置 response 响应头</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 验证消息的确来自微信服务器</span></span><br><span class="line">  router.get(<span class="string">'/'</span>, ctx =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; openid &#125; = ctx.query</span><br><span class="line">    <span class="keyword">if</span> (openid) &#123; <span class="comment">// 用户给公众号发消息</span></span><br><span class="line">      <span class="keyword">return</span> ctx.body = <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; signature, timestamp, nonce, echostr &#125; = ctx.query</span><br><span class="line">    <span class="keyword">let</span> str = [appConfig.Token, timestamp, nonce].sort().join(<span class="string">''</span>) <span class="comment">// 按字典排序，拼接字符串</span></span><br><span class="line">    <span class="keyword">let</span> sha = sha1(str)</span><br><span class="line">    ctx.body = (sha === signature) ? echostr : <span class="string">''</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  app.use(router.routes(), router.allowedMethods())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二-服务器配置"><a class="header-anchor" href="#二-服务器配置">¶</a>二、服务器配置</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/node-wechat/1.png" alt></p>
<p>  如上图在<code>微信公众号管理平台 -&gt; 开发 -&gt; 基本设置 -&gt; 服务器配置</code>中设置参数，注意<code>Token</code>字段需要与 <a href="https://liuxianyu.cn/article/node-wechat-base-koa.html#2-app-config-js" target="_black">app.config.js</a> 中的<code>Token</code>保持一致。<code>记得启用服务器配置</code>。配置后用户发给公众号的信息也会调用刚刚设置的服务器 URL，我这边暂时不对消息做处理，可依据 <a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html" target="_black">官方文档建议</a>，先返回空字符串。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>微信开发</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>node 微信公众号开发（一）—— 基础框架</title>
    <url>/article/node-wechat-base-koa.html</url>
    <content><![CDATA[<p>  最近想用 node 写一个微信公众号的项目，建议全程 https，这里记录一下基础框架的搭建。</p>
<a id="more"></a>
<h3 id="一-基于-koa2"><a class="header-anchor" href="#一-基于-koa2">¶</a>一、基于 koa2</h3>
<h4 id="1-安装-koa-相关包"><a class="header-anchor" href="#1-安装-koa-相关包">¶</a>1、安装 koa 相关包</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i koa koa-bodyparser koa-compress koa-logger koa-router -S</span><br></pre></td></tr></table></figure>
<h4 id="2-package-说明"><a class="header-anchor" href="#2-package-说明">¶</a>2、Package 说明</h4>
<ul>
<li>koa # 主程</li>
<li>koa-router # 路由</li>
<li>koa-logger # 日志</li>
<li>koa-compress # 压缩响应</li>
<li>koa-bodyparser # 获取 post 请求的参数</li>
</ul>
<h3 id="二-基础结构"><a class="header-anchor" href="#二-基础结构">¶</a>二、基础结构</h3>
<h4 id="1-项目结构"><a class="header-anchor" href="#1-项目结构">¶</a>1、项目结构</h4>
<p>  目前项目未完成，仅供初始参考。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jizhangla-api</span><br><span class="line">├─controller —— 控制器</span><br><span class="line">| ├─User.js</span><br><span class="line">| └─Wechat.js</span><br><span class="line">├─middleWares —— 中间件目录</span><br><span class="line">| ├─code.js —— 统一处理返回的 ctx.body</span><br><span class="line">| ├─error.js —— 错误处理</span><br><span class="line">| └─index.js</span><br><span class="line">├─model —— 模型</span><br><span class="line">| ├─user.js</span><br><span class="line">| └─wechat.js</span><br><span class="line">├─mysql —— MySQL 执行 sql 文件相关方法</span><br><span class="line">| ├─README.md</span><br><span class="line">| ├─index.js</span><br><span class="line">| ├─util</span><br><span class="line">| | ├─db.js</span><br><span class="line">| | ├─get-sql-content-map.js</span><br><span class="line">| | ├─get-sql-map.js</span><br><span class="line">| | └─walk-file.js</span><br><span class="line">| ├─sql</span><br><span class="line">| | └─base-table.sql</span><br><span class="line">├─pm2</span><br><span class="line">| ├─config.json —— pm2 配置文件</span><br><span class="line">| ├─logs —— pm2 输出日志</span><br><span class="line">| | ├─pm2-err.log —— 错误日志</span><br><span class="line">| | └─pm2-out.log —— 输出日志</span><br><span class="line">├─router —— 路由</span><br><span class="line">| ├─index.js</span><br><span class="line">| ├─user.js —— 用户相关</span><br><span class="line">| └─wechat.js —— 微信相关</span><br><span class="line">├─utils</span><br><span class="line">| ├─uuid.js —— 生成 uuid</span><br><span class="line">| ├─wechat —— 微信相关方法目录</span><br><span class="line">| | ├─access_token.json —— 暂存 access_token</span><br><span class="line">| | ├─getAccessToken.js —— 获取 access_token</span><br><span class="line">| | ├─getTicket.js —— 暂存 ticket</span><br><span class="line">| | ├─sign.js —— 微信鉴权签名算法</span><br><span class="line">| | └─ticket.json —— 获取 ticket</span><br><span class="line">├─app.config.js —— 配置文件</span><br><span class="line">├─app.js —— 入口文件</span><br><span class="line">├─package.json</span><br><span class="line">├─README.md —— README</span><br><span class="line">└─start.sh —— 服务器部署脚本文件</span><br></pre></td></tr></table></figure>
<h4 id="2-app-js"><a class="header-anchor" href="#2-app-js">¶</a>2、app.js</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'koa-logger'</span>)</span><br><span class="line"><span class="keyword">const</span> compress = <span class="built_in">require</span>(<span class="string">'koa-compress'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>)</span><br><span class="line"><span class="keyword">const</span> appConfig = <span class="built_in">require</span>(<span class="string">'./app.config'</span>)</span><br><span class="line"><span class="keyword">const</span> middles = <span class="built_in">require</span>(<span class="string">'./middleWares'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置中间件，通过 bodyParser 获取 post 请求传递过来的参数</span></span><br><span class="line">app.use(bodyParser())</span><br><span class="line"></span><br><span class="line">app.use(logger())</span><br><span class="line">app.use(compress(&#123;</span><br><span class="line">  threshold: <span class="number">1024</span> <span class="comment">// 超过大小即压缩，bytes</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动自定义中间件</span></span><br><span class="line">middles(app)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动路由</span></span><br><span class="line">router(app)</span><br><span class="line"></span><br><span class="line"><span class="comment">// app错误监听</span></span><br><span class="line">app.on(<span class="string">'error'</span>, (err) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'Server error: \n%s\n%s '</span>, err.stack || <span class="string">''</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(appConfig.appPort, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`app runs on port <span class="subst">$&#123; appConfig.appPort &#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="2-app-config-js"><a class="header-anchor" href="#2-app-config-js">¶</a>2、app.config.js</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  appPort: <span class="number">9002</span>, <span class="comment">// 服务端口</span></span><br><span class="line"></span><br><span class="line">  Token: <span class="string">'liuxy0551'</span>, <span class="comment">// 公众号平台 - 开发 - 基本配置/填写服务器配置</span></span><br><span class="line">  appId: <span class="string">'wx9a4ad27276******'</span>,</span><br><span class="line">  appSecret: <span class="string">'********************************'</span>, <span class="comment">// 重要，不可公开</span></span><br><span class="line">  wxapiBaseUrl: <span class="string">'https://api.weixin.qq.com/cgi-bin'</span> <span class="comment">// 请求微信信息时微信服务器的地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-middlewares-code-js"><a class="header-anchor" href="#3-middlewares-code-js">¶</a>3、middleWares/code.js</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ctx code 设置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  </span>ctx koa ctx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>next koa next </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.body = &#123; <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">message</span>: <span class="string">'成功'</span> &#125;</span><br><span class="line">  <span class="keyword">await</span> next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-middlewares-error-js"><a class="header-anchor" href="#4-middlewares-error-js">¶</a>4、middleWares/error.js</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 错误处理中间件，放在所有中间件之前，就可以捕获它们所有的同步或者异步代码中抛出的异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  </span>ctx koa ctx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>next koa next </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Node标识</span></span><br><span class="line">    ctx.set(<span class="string">'X-Proxy'</span>, <span class="string">'Node Server'</span>)</span><br><span class="line">    <span class="keyword">await</span> next()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'err'</span>, err)</span><br><span class="line">    ctx.status = err.status || <span class="number">500</span></span><br><span class="line">    ctx.body = <span class="string">'We are sorry. Internal server error occurred.'</span></span><br><span class="line">    ctx.app.emit(<span class="string">'error'</span>, err, ctx)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-middlewares-index-js"><a class="header-anchor" href="#5-middlewares-index-js">¶</a>5、middleWares/index.js</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file </span>中间件集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> errorMiddleWare = <span class="built_in">require</span>(<span class="string">'./error'</span>)</span><br><span class="line"><span class="keyword">const</span> codeMiddleWare = <span class="built_in">require</span>(<span class="string">'./code'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中间件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// error 放在所有中间件之前，就可以捕获它们所有的同步或者异步代码中抛出的异常</span></span><br><span class="line">  <span class="comment">// codeMiddleWare 放在所有中间件之后</span></span><br><span class="line">  <span class="keyword">const</span> middleWares = [errorMiddleWare, codeMiddleWare]</span><br><span class="line">  </span><br><span class="line">  middleWares.forEach(<span class="function">(<span class="params">middleware</span>) =&gt;</span> &#123;</span><br><span class="line">    app.use(middleware)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>微信开发</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>node 项目部署（pm2）</title>
    <url>/article/deploy-node.html</url>
    <content><![CDATA[<p>  最近在用 node 写个 Web Server，记录一下部署方法。</p>
<a id="more"></a>
<h3 id="一-部署项目"><a class="header-anchor" href="#一-部署项目">¶</a>一、部署项目</h3>
<h4 id="1-部署前准备"><a class="header-anchor" href="#1-部署前准备">¶</a>1、部署前准备</h4>
<p>  服务器端需要提前安装好 git、nginx、node、cnpm（<a href="https://liuxianyu.cn/article/cent-os-base.html#%E4%B8%89-%E5%AE%89%E8%A3%85-git" target="_black">安装 git、安装 nginx</a>）、pm2（<a href="https://liuxianyu.cn/article/node-pm2.html" target="_black">使用 pm2 部署 node 项目</a>）<br>
  1、ssh 到服务器，并在指定目录位置通过 git clone 拉取代码初始化文件夹<br>
  2、配置 node 服务的 nginx，服务启动在 9000 端口，http、https 均可访问(需要配置证书)，配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 记账啦后端 node api 的 nginx 配置</span><br><span class="line"># http</span><br><span class="line">server &#123;</span><br><span class="line">    listen          80;</span><br><span class="line">    server_name     api.jzl.liuxianyu.cn;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">	    proxy_pass http://localhost:9000/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># https</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  api.jzl.liuxianyu.cn;</span><br><span class="line">    client_max_body_size 50M; </span><br><span class="line">    client_body_timeout 10m;</span><br><span class="line">    ssl_certificate cert/api.jzl.liuxianyu.cn.pem;</span><br><span class="line">    ssl_certificate_key cert/api.jzl.liuxianyu.cn.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">	    proxy_pass http://localhost:9000/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-部署流程"><a class="header-anchor" href="#2-部署流程">¶</a>2、部署流程</h4>
<p>  1、本地修改代码，上传到 git<br>
  2、服务器通过 git 拉取最新代码<br>
  3、重启 pm2 对应进程</p>
<h3 id="二-操作"><a class="header-anchor" href="#二-操作">¶</a>二、操作</h3>
<p>  终端连接到服务器，进入对应目录，命令行执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./start.sh</span><br></pre></td></tr></table></figure>
<p>  <code>start.sh</code>文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line">cnpm i</span><br><span class="line">pm2 restart ./pm2/config.json</span><br><span class="line">pm2 monit</span><br></pre></td></tr></table></figure>
<p>  可按需要添加以下两条命令：</p>
<table>
<thead>
<tr>
<th style="text-align:center">含义</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">显示每个应用程序的 CPU 和内存占用情况</td>
<td>pm2 monit</td>
</tr>
<tr>
<td style="text-align:center">查看输出的日志</td>
<td>pm2 logs</td>
</tr>
</tbody>
</table>
<p><img src="https://images-hosting.liuxianyu.cn/posts/deploy-node/1.jpg" alt="pm2 monit"><br>
<img src="https://images-hosting.liuxianyu.cn/posts/deploy-node/2.jpg" alt="pm2 logs"></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令（十一）—— 解决每次拉代码都需要输入用户名和密码</title>
    <url>/article/git-order-k.html</url>
    <content><![CDATA[<p>  git 常用命令系列随笔会记录一些用到的常见命令，这里记录一下<code>解决每次拉代码都需要输入用户名和密码</code>：</p>
<a id="more"></a>
<h3 id="全局配置"><a class="header-anchor" href="#全局配置">¶</a>全局配置</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config credential.helper store</span><br></pre></td></tr></table></figure>
<p>  上述命令会在拉取时记录用户名和密码，下次再执行 git pull 时就不用再输入了。</p>
<p>  <strong>也可以使用 ssh 链接 clone 项目</strong></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云函数计算初接触</title>
    <url>/article/fc-serverless.html</url>
    <content><![CDATA[<p>  最近在公司项目中实践数据中台的概念，调研并使用了阿里云提供的函数计算服务，记录下相关内容：</p>
<a id="more"></a>
<h3 id="一-安装-fun-命令行工具"><a class="header-anchor" href="#一-安装-fun-命令行工具">¶</a>一、安装 fun 命令行工具</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install @alicloud/fun -g</span><br><span class="line">fun --version</span><br></pre></td></tr></table></figure>
<h3 id="二-搭建基于express的serverless-web应用"><a class="header-anchor" href="#二-搭建基于express的serverless-web应用">¶</a>二、搭建基于Express的Serverless Web应用</h3>
<p>  阿里云文档：<a href="https://help.aliyun.com/document_detail/147099.html?spm=a2c4g.11186623.6.752.43ed5e12IPyLRR" target="_black">搭建基于Express的Serverless Web应用</a></p>
<h4 id="1-通过-fun-模板生成项目"><a class="header-anchor" href="#1-通过-fun-模板生成项目">¶</a>1、通过 fun 模板生成项目</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun init -n wisejob-class https://github.com/muxiangqiu/fc-Express-nodejs8.git</span><br></pre></td></tr></table></figure>
<h4 id="2-本地运行"><a class="header-anchor" href="#2-本地运行">¶</a>2、本地运行</h4>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>本地需要安装 Docker 并启动</strong></li>
<li><strong>静态页面打包时的路径需带上访问域名的名称前缀</strong></li>
<li><strong>本地访问静态页面时 url 后需要带 /</strong></li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd demo</span><br><span class="line">yarn</span><br><span class="line">npm run dev</span><br><span class="line">fun local start</span><br></pre></td></tr></table></figure>
<p>  本地查看效果：<a href="http://localhost:8000/2016-08-15/proxy/wisejob-class-service/wisejob-class" target="_black">http://localhost:8000/2016-08-15/proxy/wisejob-class-service/wisejob-class</a></p>
<h4 id="3-通过-env-文件配置"><a class="header-anchor" href="#3-通过-env-文件配置">¶</a>3、通过 .env 文件配置</h4>
<p>  (1)、在项目目录即template.yml文件所在目录下，创建一个名为.env的文件。</p>
<blockquote>
<p><strong>说明</strong></p>
<ul>
<li><strong>建议将 .env 文件放到 .gitignore中，避免泄漏重要的账户信息。</strong></li>
</ul>
</blockquote>
<p>  (2)、在 .env 文件录入以下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ACCOUNT_ID=xxxxxxxx</span><br><span class="line">REGION=cn-shanghai</span><br><span class="line">ACCESS_KEY_ID=xxxxxxxxxxxx</span><br><span class="line">ACCESS_KEY_SECRET=xxxxxxxxxx</span><br><span class="line">TIMEOUT=10</span><br><span class="line">RETRIES=3</span><br></pre></td></tr></table></figure>
<h4 id="4-部署函数到控制台"><a class="header-anchor" href="#4-部署函数到控制台">¶</a>4、部署函数到控制台</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun deploy</span><br></pre></td></tr></table></figure>
<h3 id="三-阿里云控制台注意事项"><a class="header-anchor" href="#三-阿里云控制台注意事项">¶</a>三、阿里云控制台注意事项</h3>
<h4 id="1-自定义域名"><a class="header-anchor" href="#1-自定义域名">¶</a>1、自定义域名</h4>
<p>  操作路径：控制台 -&gt; 函数计算 -&gt; 自定义域名<br>
  每个路由的 版本/别名 在开发调试时先选择 LATEST，等待上线时，按照第4条的版本管理，选择别名。</p>
<h4 id="2-日志查询"><a class="header-anchor" href="#2-日志查询">¶</a>2、日志查询</h4>
<p>  操作路径：控制台 -&gt; 函数计算 -&gt; 服务/函数 -&gt; (选择一个函数)函数列表 -&gt; 函数名称(点击函数名称) -&gt; 日志查询<br>
  日志内容包含的内容如：接口url、报错信息</p>
<h4 id="3-配置导出"><a class="header-anchor" href="#3-配置导出">¶</a>3、配置导出</h4>
<p>  操作路径：控制台 -&gt; 函数计算 -&gt; 服务/函数 -&gt; (选择一个函数)函数列表 -&gt; 函数名称(点击函数名称) -&gt; 概览 -&gt; 导出 -&gt; 导出配置<br>
  将导出的 template.yml 文件放到项目中，这样控制台配置的配置项就不会被 deploy 覆盖掉。</p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>控制台导出的配置文件可能有部分缺失，需要和本地已有的 template.yml 文件对比，保留部分字段，如：CodeUri</strong></li>
</ul>
</blockquote>
<h4 id="4-版本管理"><a class="header-anchor" href="#4-版本管理">¶</a>4、版本管理</h4>
<p>  操作路径：控制台 -&gt; 函数计算 -&gt; 服务/函数 -&gt; (选择一个函数)版本管理 -&gt; 别名<br>
  （1）上线时可以新建一个版本，并对该版本新建别名且设置别名对应的版本占比，用来在自定义域名中使用(每个路径都选择该别名)，在 版本管理 -&gt; 别名 中可对该别名进行版本占比控制，达到灰度发布的效果。<br>
  （2）后续迭代时，deploy 后可在 版本管理 中新建一个版本，并在别名中选择该版本的占比。</p>
<h4 id="5-环境变量"><a class="header-anchor" href="#5-环境变量">¶</a>5、环境变量</h4>
<p>  待补充 <a href="https://help.aliyun.com/document_detail/164217.html?spm=a2c4g.11186623.6.629.3e0a283bkc5bnN" target="_black">https://help.aliyun.com/document_detail/164217.html?spm=a2c4g.11186623.6.629.3e0a283bkc5bnN</a></p>
<h4 id="6-请求环境区分"><a class="header-anchor" href="#6-请求环境区分">¶</a>6、请求环境区分</h4>
<p>  调用请求时需要区分生产环境和测试环境，可以发布不同的版本，并创建多个触发器，设置触发器指向不同的版本，如下图：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/fc-serverless/1.png" alt></p>
<p>  自定义域名中创建两个域名，用来区分环境，路径可按下方示例填写，生产和测试选择不同的版本/别名即可。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/fc-serverless/2.png" alt></p>
<h3 id="四-遇到的问题"><a class="header-anchor" href="#四-遇到的问题">¶</a>四、遇到的问题</h3>
<h4 id="1-regeneratorruntime-is-not-defined"><a class="header-anchor" href="#1-regeneratorruntime-is-not-defined">¶</a>1、regeneratorRuntime is not defined</h4>
<p>  在代码中使用 async/await 时报错，是 babel 编译的问题，安装<code>babel-plugin-transform-runtime</code>，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i babel-plugin-transform-runtime -D</span><br></pre></td></tr></table></figure>
<p>  然后在 .babelrc 中添加 plugins，重新运行即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...,</span><br><span class="line">    <span class="string">"plugins"</span>: [<span class="string">"transform-runtime"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-使用-扩展符"><a class="header-anchor" href="#2-使用-扩展符">¶</a>2、使用 … 扩展符</h4>
<p>  在代码中使用 … 扩展符时本地运行报错，是 babel 编译的问题，安装<code>babel-plugin-transform-object-rest-spread</code>，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i babel-plugin-transform-object-rest-spread -D</span><br></pre></td></tr></table></figure>
<p>  然后在 .babelrc 中添加 plugins，重新运行即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...,</span><br><span class="line">    <span class="string">"plugins"</span>: [<span class="string">"transform-object-rest-spread"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-load-code-for-handler-index-handler"><a class="header-anchor" href="#3-load-code-for-handler-index-handler">¶</a>3、load code for handler:index.handler</h4>
<p>  本地运行时项目刚启动，调用 POST 接口可能导致程序阻塞（deploy到线上不会阻塞），先调用一次 GET 接口再调用 POST 接口就不会阻塞，原因未知。</p>
<h4 id="4-静态文件使用自定义域名"><a class="header-anchor" href="#4-静态文件使用自定义域名">¶</a>4、静态文件使用自定义域名</h4>
<p>  需要每个文件都添加记录，等待后续必须上传到函数计算时，使用打包到 OSS 尝试解决。</p>
<h4 id="5-目录过深-运行报错"><a class="header-anchor" href="#5-目录过深-运行报错">¶</a>5、目录过深，运行报错</h4>
<p>  将项目拷贝到桌面，运行。</p>
]]></content>
      <categories>
        <category>Serverless</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
      </tags>
  </entry>
  <entry>
    <title>koa2 中解决跨域</title>
    <url>/article/koa2-cors.html</url>
    <content><![CDATA[<p>  最近在宜搭中有请求接口的场景，需要 https (<a href="https://liuxianyu.cn/article/nginx-https.html" target="_black">在阿里云通过 SSL证书和 nginx 配置 https</a>)，使用之前写的接口遇到了跨域问题，记录一下。</p>
<a id="more"></a>
<p><img src="https://images-hosting.liuxianyu.cn/posts/koa2-cors/1.png" alt></p>
<h3 id="一-安装-koa2-cors"><a class="header-anchor" href="#一-安装-koa2-cors">¶</a>一、安装 koa2-cors</h3>
<p><a href="https://www.npmjs.com/package/koa2-cors" target="_black">koa2-cors</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i koa2-cors -S</span><br></pre></td></tr></table></figure>
<h3 id="二-引入-koa2-cors-并配置中间件"><a class="header-anchor" href="#二-引入-koa2-cors-并配置中间件">¶</a>二、引入 koa2-cors 并配置中间件</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">'koa2-cors'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line">app.use(cors(&#123;</span><br><span class="line">  origin: <span class="function"><span class="params">ctx</span> =&gt;</span> ctx.header.origin,</span><br><span class="line">  credentials: <span class="literal">true</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
<p>  报错信息中提到的<code>Access-Control-Allow-Credentials</code>，表示是否允许发送 Cookie。</p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>如果要发送 Cookie，<code>Access-Control-Allow-Origin</code>就不能设置为<code>*</code>，需要设置为请求网页一致的域名。同时，Cookie 遵循同源政策。</strong></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>node</category>
        <category>Koa2</category>
      </categories>
      <tags>
        <tag>Koa2</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序实现左右滑动功能</title>
    <url>/article/wechat-scroll-left-right.html</url>
    <content><![CDATA[<p>  最近写了个教育机构的微信小程序，其中有个批阅的功能，产品希望切换题目的时候能通过左右滑动切换上一题下一题，说是客户抖音玩多了，记录一下实现方法。</p>
<a id="more"></a>
<h3 id="一-实现效果"><a class="header-anchor" href="#一-实现效果">¶</a>一、实现效果</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/wechat-scroll-left-right/1.gif" alt></p>
<h3 id="二-实现方法"><a class="header-anchor" href="#二-实现方法">¶</a>二、实现方法</h3>
<p>  在需要滑动的区域加上触摸事件的监听，文档可参考 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#%E4%BA%8B%E4%BB%B6%E8%AF%A6%E8%A7%A3" target="_black">事件详解</a>。主要使用到三个事件touchstart、touchmove、touchend，思路是：</p>
<blockquote>
<p><code>touchstart</code> 记录开始的位置，标识已开始移动；<code>touchmove</code> 记录移动的距离，超过设定的移动距离即认为进行了滑动操作；<code>touchend</code> 标识结束移动</p>
</blockquote>
<p>  代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div @touchstart=<span class="string">"touchStart"</span> @touchmove=<span class="string">"touchMove"</span> @touchend=<span class="string">"touchEnd"</span>&gt;</span><br><span class="line">    &lt;!--监听滑动的区域--&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">'@wepy/core'</span></span><br><span class="line"></span><br><span class="line">  wepy.page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">      <span class="comment">// 监听左右滑动</span></span><br><span class="line">      startX: <span class="string">''</span>, <span class="comment">// 横向移动开始的位置</span></span><br><span class="line">      endX: <span class="string">''</span>, <span class="comment">// 横向移动结束的位置</span></span><br><span class="line">      moveFlag: <span class="literal">true</span> <span class="comment">// 判断是否在滑动</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="comment">// 手指触摸动作开始</span></span><br><span class="line">      touchStart (e) &#123;</span><br><span class="line">        <span class="keyword">this</span>.startX = e.touches[<span class="number">0</span>].pageX <span class="comment">// 开始触摸时的原点</span></span><br><span class="line">        <span class="keyword">this</span>.moveFlag = <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 手指触摸后移动 50 为设定的移动距离</span></span><br><span class="line">      touchMove (e) &#123;</span><br><span class="line">        <span class="keyword">this</span>.endX = e.touches[<span class="number">0</span>].pageX <span class="comment">// 结束触摸时的原点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.moveFlag) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.endX - <span class="keyword">this</span>.startX &gt; <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'上一题'</span>)</span><br><span class="line">            <span class="keyword">this</span>.moveFlag = <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.startX - <span class="keyword">this</span>.endX &gt; <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'下一题'</span>)</span><br><span class="line">            <span class="keyword">this</span>.moveFlag = <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 手指触摸动作结束</span></span><br><span class="line">      touchEnd () &#123;</span><br><span class="line">        <span class="keyword">this</span>.moveFlag = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p><br><br></p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>touchstart、touchmove、touchend 为微信官方提供的 api，均为小写，对应的方法按习惯使用了驼峰命名。</strong></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>html2canvas 配合 jspdf 导出含有 echarts 图表的 pdf</title>
    <url>/article/html2canvas-jspdf.html</url>
    <content><![CDATA[<p>  最近有个导出 pdf 的需求，内容区域含有 echarts 图表，记录一下处理的代码。</p>
<a id="more"></a>
<p>  本篇随笔和另一篇 <a href="https://liuxianyu.cn/article/window-print-canvas-image.html" target="_black">使用 window.print() 时将 DOM 中的 canvas 转为 image</a> 是同一个问题的处理记录。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出页面为PDF格式</span></span><br><span class="line"><span class="keyword">import</span> html2Canvas <span class="keyword">from</span> <span class="string">'html2canvas'</span></span><br><span class="line"><span class="keyword">import</span> JsPDF <span class="keyword">from</span> <span class="string">'jspdf'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  install (Vue, options) &#123;</span><br><span class="line">    Vue.prototype.getPdf = <span class="function"><span class="params">title</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> target = <span class="built_in">document</span>.querySelector(<span class="string">'#pdfDom'</span>)</span><br><span class="line"></span><br><span class="line">      html2Canvas(target, &#123;</span><br><span class="line">        allowTaint: <span class="literal">true</span>,</span><br><span class="line">        scale: <span class="number">1.2</span> <span class="comment">// 用于渲染的比例尺，默认为浏览器设备像素比率。</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="params">canvas</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> contentWidth = canvas.width</span><br><span class="line">        <span class="keyword">let</span> contentHeight = canvas.height</span><br><span class="line">        <span class="comment">// A4纸的尺寸[595.28,841.89]，html页面生成的canvas在pdf中图片的宽高</span></span><br><span class="line">        <span class="keyword">let</span> pageHeight = contentWidth / <span class="number">595.28</span> * <span class="number">841.89</span></span><br><span class="line">        <span class="keyword">let</span> leftHeight = contentHeight</span><br><span class="line">        <span class="keyword">let</span> position = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> imgWidth = <span class="number">505</span></span><br><span class="line">        <span class="keyword">let</span> imgHeight = <span class="number">505</span> / contentWidth * contentHeight</span><br><span class="line">        <span class="keyword">let</span> pageData = canvas.toDataURL(<span class="string">'image/jpeg'</span>, <span class="number">1.0</span>)</span><br><span class="line">        <span class="keyword">let</span> PDF = <span class="keyword">new</span> JsPDF(<span class="string">''</span>, <span class="string">'pt'</span>, <span class="string">'a4'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (leftHeight &lt; pageHeight) &#123; <span class="comment">// 单页</span></span><br><span class="line">          PDF.addImage(pageData, <span class="string">'JPEG'</span>, <span class="number">45</span>, <span class="number">60</span>, imgWidth, imgHeight) <span class="comment">// 45 left, 60 top</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 多页</span></span><br><span class="line">          <span class="keyword">while</span> (leftHeight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            PDF.addImage(pageData, <span class="string">'JPEG'</span>, <span class="number">0</span>, position, imgWidth, imgHeight)</span><br><span class="line">            leftHeight -= pageHeight</span><br><span class="line">            position -= <span class="number">841.89</span></span><br><span class="line">            <span class="keyword">if</span> (leftHeight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              PDF.addPage()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        PDF.save(<span class="string">`<span class="subst">$&#123; title &#125;</span>.pdf`</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>
<blockquote>
<p><strong>注意</strong><br>
使用<code>html2canvas</code>时可参考官方文档 <a href="http://html2canvas.hertzen.com/configuration" target="_black">http://html2canvas.hertzen.com/configuration</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 window.print() 时将 DOM 中的 canvas 转为 image</title>
    <url>/article/window-print-canvas-image.html</url>
    <content><![CDATA[<p>  最近有个导出 pdf 的需求，尝试过程中遇到了 window.print() 导出时，内容区域有 echarts 图表，图表区域是个 canvas，导出后的 pdf 文件中 canvas 区域空白，记录一下解决方法。</p>
<a id="more"></a>
<h3 id="一-代码"><a class="header-anchor" href="#一-代码">¶</a>一、代码</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> oldInnerHtml = <span class="built_in">window</span>.document.body.innerHTML</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mainCanvas = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'canvas'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> mainRef = <span class="keyword">this</span>.$refs[<span class="string">'mainRef'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 canvas 转为图片</span></span><br><span class="line"><span class="keyword">const</span> mainImg = <span class="keyword">new</span> Image()</span><br><span class="line"><span class="keyword">const</span> mainImgSrc = mainCanvas.toDataURL(<span class="string">'image/png'</span>)</span><br><span class="line">mainImg.src = mainImgSrc</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片加载完成后</span></span><br><span class="line">mainImg.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  mainRef.innerHTML = <span class="string">`&lt;img src=<span class="subst">$&#123; mainImgSrc &#125;</span>&gt;`</span> <span class="comment">// 用图片替换 canvas</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.document.body.innerHTML = <span class="keyword">this</span>.$refs[<span class="string">'reportPdfRef'</span>].innerHTML</span><br><span class="line">  <span class="built_in">window</span>.print()</span><br><span class="line">  <span class="built_in">window</span>.document.body.innerHTML = oldInnerHtml</span><br><span class="line">  <span class="comment">// window.location.reload() // 或者刷新页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注意事项"><a class="header-anchor" href="#注意事项">¶</a>注意事项</h3>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>1、导出正常 pdf 后原先的 canvas 区域会空白</strong></li>
<li><strong>2、通过<code>window.location.reload()</code>可解决上一条问题，但是会刷新页面</strong></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>在阿里云通过 SSL证书和 nginx 配置 https</title>
    <url>/article/nginx-https.html</url>
    <content><![CDATA[<p>  前几天部署了一个 node 项目，在各个小程序配置中，基本都要求 https 请求，记录一下在阿里云通过 SSL证书和 nginx 配置 https。</p>
<a id="more"></a>
<h3 id="一-购买-下载-上传-ssl-证书"><a class="header-anchor" href="#一-购买-下载-上传-ssl-证书">¶</a>一、购买、下载、上传 SSL 证书</h3>
<p>  登录阿里云后在控制台搜索进入<code>SSL 证书</code>，点击购买证书，选择单个域名、DV域名级SSL、免费版、1年，支付0元购买。在证书列表页点击证书申请按钮，填入证书绑定域名<code>api.koa-app.liuxianyu.cn</code>，下一步（在阿里云购买的域名会自动在域名解析处添加域名验证信息，https 生效后可删除该条解析），下载证书（Nginx）。解压后将证书上传到<code>/etc/nginx/cert</code>目录下，建议将文件名都改为对应域名以作区分。</p>
<h3 id="二-配置-nginx"><a class="header-anchor" href="#二-配置-nginx">¶</a>二、配置 nginx</h3>
<p>  编辑已有的<code>koa-app.conf</code>，新的配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 学习 koa-app 的 nginx 配置</span><br><span class="line"># http</span><br><span class="line">#server &#123;</span><br><span class="line">#    listen          80;</span><br><span class="line">#    server_name     api.koa-app.liuxianyu.cn;</span><br><span class="line">#</span><br><span class="line">#    location / &#123;</span><br><span class="line">#	    proxy_pass http://localhost:9000/;</span><br><span class="line">#    &#125;</span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line"># https</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  api.koa-app.liuxianyu.cn;</span><br><span class="line">    client_max_body_size 50M; </span><br><span class="line">    client_body_timeout 10m;</span><br><span class="line">    ssl_certificate cert/api.koa-app.liuxianyu.cn.pem;</span><br><span class="line">    ssl_certificate_key cert/api.koa-app.liuxianyu.cn.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">	    proxy_pass http://localhost:9000/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">配置名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">client_max_body_size</td>
<td>限制上传文件的大小，默认 1M</td>
</tr>
<tr>
<td style="text-align:center">client_body_timeout</td>
<td>客户端与服务端建立连接后发送 request body 的超时时间，默认 60s</td>
</tr>
<tr>
<td style="text-align:center">ssl_certificate</td>
<td>证书文件目录</td>
</tr>
<tr>
<td style="text-align:center">ssl_certificate_key</td>
<td>私钥文件目录</td>
</tr>
<tr>
<td style="text-align:center">ssl_session_timeout</td>
<td>指定客户端可以重用会话参数的时间（超时之后不可使用）</td>
</tr>
<tr>
<td style="text-align:center">ssl_ciphers</td>
<td>密码加密方式</td>
</tr>
<tr>
<td style="text-align:center">ssl_protocols</td>
<td>指定密码为 openssl 支持的格式</td>
</tr>
<tr>
<td style="text-align:center">ssl_prefer_server_ciphers</td>
<td>依赖SSLv3和TLSv1协议的服务器密码将优先于客户端密码</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li>放开 80 的 server 注释，通过 http 也可以访问（vim 中的取消一行的注释快捷键是 X）</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>nginx</category>
        <category>https-SSL</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>https-SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>node 服务渲染支持 Markdown 中的数字公式 LaTeX、yUML 流程图支持</title>
    <url>/article/node-markdown.html</url>
    <content><![CDATA[<p>  最近在微信小程序中遇到了数学公式的显示，后端不好处理成图片，记录一下通过 node 生成 svg。</p>
<a id="more"></a>
<h3 id="一-获取项目"><a class="header-anchor" href="#一-获取项目">¶</a>一、获取项目</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/liuxy0551/markdown-server</span><br></pre></td></tr></table></figure>
<p>  项目结构比较简洁，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">markdown-server</span><br><span class="line">├─LICENSE</span><br><span class="line">├─README.md</span><br><span class="line">├─index.js</span><br><span class="line">└─package.json</span><br></pre></td></tr></table></figure>
<h3 id="二-运行项目"><a class="header-anchor" href="#二-运行项目">¶</a>二、运行项目</h3>
<h4 id="1-安装依赖"><a class="header-anchor" href="#1-安装依赖">¶</a>1、安装依赖</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i 或 yarn install</span><br></pre></td></tr></table></figure>
<h4 id="2-改变端口"><a class="header-anchor" href="#2-改变端口">¶</a>2、改变端口</h4>
<p>  出于个人偏好，将项目本身的 8001 端口改为了 9001。</p>
<h4 id="3-运行服务"><a class="header-anchor" href="#3-运行服务">¶</a>3、运行服务</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node index</span><br></pre></td></tr></table></figure>
<h3 id="三-配置-nginx"><a class="header-anchor" href="#三-配置-nginx">¶</a>三、配置 nginx</h3>
<p>  内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen          80;</span><br><span class="line">    server_name     markdown.liuxianyu.cn;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">	    proxy_pass http://localhost:9001/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  重启 nginx：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<h3 id="四-查看效果"><a class="header-anchor" href="#四-查看效果">¶</a>四、查看效果</h3>
<p><a href="http://markdown.liuxianyu.cn/?tex=r=%5Csqrt%7Bx^2+y^2%7D" target="_black">http://markdown.liuxianyu.cn/?tex=r=%5Csqrt%7Bx<sup>2+y</sup>2%7D</a></p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/node-markdown/1.png" alt></p>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p>1、<a href="https://github.com/sbfkcel/markdown-server" target="_black">https://github.com/sbfkcel/markdown-server</a><br>
2、<a href="https://github.com/sbfkcel/towxml" target="_black">https://github.com/sbfkcel/towxml</a><br>
3、<a href="https://github.com/sbfkcel/towxml/wiki/3.0-%E6%95%B0%E5%AD%97%E5%85%AC%E5%BC%8F&yuml%E6%B5%81%E7%A8%8B%E5%9B%BE%E6%94%AF%E6%8C%81" target="_black">3.0 数字公式&amp;yuml流程图支持</a></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 中的一些命令</title>
    <url>/article/linux-command.html</url>
    <content><![CDATA[<p>  记录 Linux 中的一些命令。</p>
<a id="more"></a>
<h4 id="1-netstat-查看端口"><a class="header-anchor" href="#1-netstat-查看端口">¶</a>1、netstat - 查看端口</h4>
<p>  查看是否在监听项目端口，无 PID：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -tpln</span><br></pre></td></tr></table></figure>
<h4 id="2-lsof-查看进程"><a class="header-anchor" href="#2-lsof-查看进程">¶</a>2、lsof - 查看进程</h4>
<p>  查看指定端口的进程，会返回 PID：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsof -i:9000</span><br></pre></td></tr></table></figure>
<h4 id="3-kill-杀死进程"><a class="header-anchor" href="#3-kill-杀死进程">¶</a>3、kill - 杀死进程</h4>
<p>  关闭某个进程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill 9127</span><br></pre></td></tr></table></figure>
<p>  -9 表明立即关闭：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill -9 9127</span><br></pre></td></tr></table></figure>
<h4 id="4-tailf-查看日志"><a class="header-anchor" href="#4-tailf-查看日志">¶</a>4、tailf - 查看日志</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tailf -100 pm2/logs/pm2-out.log</span><br></pre></td></tr></table></figure>
<h4 id="5-cp-复制文件-目录"><a class="header-anchor" href="#5-cp-复制文件-目录">¶</a>5、cp - 复制文件、目录</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp start.sh ../markdown-server/</span><br><span class="line">cp -r node_modules ../markdown-server/</span><br></pre></td></tr></table></figure>
<h4 id="6-mv-移动文件-重命名"><a class="header-anchor" href="#6-mv-移动文件-重命名">¶</a>6、mv - 移动文件、重命名</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv start.sh ../markdown-server/</span><br><span class="line">mv start.sh new-start.sh</span><br></pre></td></tr></table></figure>
<h4 id="7-ssh-copy-id-添加本机的-ssh-公钥到服务器"><a class="header-anchor" href="#7-ssh-copy-id-添加本机的-ssh-公钥到服务器">¶</a>7、ssh-copy-id - 添加本机的 SSH 公钥到服务器</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-copy-id deploy@47.65.55.62</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i .ssh/id_rsa_liuxy0551 deploy@47.65.55.62</span><br></pre></td></tr></table></figure>
<h4 id="8-du-查看文件夹空间占用"><a class="header-anchor" href="#8-du-查看文件夹空间占用">¶</a>8、du - 查看文件夹空间占用</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du -h --max-depth=1 /home</span><br></pre></td></tr></table></figure>
<p>  MacOS 系统下在当前文件夹下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du -h -d 1</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -size +10M | xargs ls -lah</span><br></pre></td></tr></table></figure>
<h4 id="9-ls-查看文件列表"><a class="header-anchor" href="#9-ls-查看文件列表">¶</a>9、ls - 查看文件列表</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -lahS</span><br></pre></td></tr></table></figure>
<ul>
<li>-l 每个文件一行列出</li>
<li>-a 所有文件，包含隐藏文件</li>
<li>-h 将文件内容大小以GB、KB等易读的方式显示</li>
<li>-S 以文件大小排序</li>
</ul>
<h4 id="10-查看-centos-的-cpu-内存-磁盘等信息"><a class="header-anchor" href="#10-查看-centos-的-cpu-内存-磁盘等信息">¶</a>10、查看 CentOS 的 CPU、内存、磁盘等信息</h4>
<p>查看每个物理CPU中core的个数(即核数)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo| grep &quot;cpu cores&quot;| uniq</span><br></pre></td></tr></table></figure>
<p>查看内存信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure>
<p>查看磁盘空间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure>
<h4 id="11-tar-压缩"><a class="header-anchor" href="#11-tar-压缩">¶</a>11、tar 压缩</h4>
<p>压缩</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -czf fileName.tar.gz /dist</span><br></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xzf fileName.tar.gz</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/MssGuo/article/details/117387213" target="_black">tar 打包压缩命令</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Cent OS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Cent OS</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 pm2 部署 node 项目</title>
    <url>/article/node-pm2.html</url>
    <content><![CDATA[<p>  最近在学习 node，写了个测试接口，想着学习一下如何部署 node 项目，这样方便日后写正式一点的项目好自行部署，这里记录下 pm2 的一些知识点。</p>
<a id="more"></a>
<h3 id="一-常用命令"><a class="header-anchor" href="#一-常用命令">¶</a>一、常用命令</h3>
<table>
<thead>
<tr>
<th style="text-align:center">含义</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">启动服务</td>
<td>pm2 start app.js</td>
</tr>
<tr>
<td style="text-align:center">指定名称启动服务</td>
<td>pm2 start app.js --name markdown</td>
</tr>
<tr>
<td style="text-align:center">当文件变化时自动重启</td>
<td>pm2 start app.js  --watch</td>
</tr>
<tr>
<td style="text-align:center">查看服务列表</td>
<td>pm2 list</td>
</tr>
<tr>
<td style="text-align:center">重启某个服务</td>
<td>pm2 restart 0 / app.js</td>
</tr>
<tr>
<td style="text-align:center">停止某个服务</td>
<td>pm2 stop 0 / app.js</td>
</tr>
<tr>
<td style="text-align:center">显示每个应用程序的 CPU 和内存占用情况</td>
<td>pm2 monit</td>
</tr>
<tr>
<td style="text-align:center">查看某个应用程序的详细信息</td>
<td>pm2 describe 0</td>
</tr>
<tr>
<td style="text-align:center">查看输出的日志</td>
<td>pm2 logs</td>
</tr>
<tr>
<td style="text-align:center">热更新，不停机</td>
<td>pm2 reload all</td>
</tr>
<tr>
<td style="text-align:center">停止所有服务</td>
<td>pm2 stop all</td>
</tr>
<tr>
<td style="text-align:center">删除某个服务</td>
<td>pm2 delete 0</td>
</tr>
<tr>
<td style="text-align:center">删除所有服务</td>
<td>pm2 delete all</td>
</tr>
</tbody>
</table>
<p><img src="https://images-hosting.liuxianyu.cn/posts/node-pm2/1.png" alt><br>
<img src="https://images-hosting.liuxianyu.cn/posts/node-pm2/2.png" alt></p>
<p>更多命令可参考：<a href="https://www.wodecun.com/blog/8010.html" target="_black">pm2 常用命令 开机自启</a></p>
<h3 id="二-配置文件"><a class="header-anchor" href="#二-配置文件">¶</a>二、配置文件</h3>
<p>  在<code>/pm2</code>下新建文件<code>config.json</code>，简单示例（单台服务器，非集群）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;koa-app&quot;,</span><br><span class="line">  &quot;script&quot;: &quot;./app.js&quot;,</span><br><span class="line">  &quot;cwd&quot;   : &quot;./&quot;,</span><br><span class="line">  &quot;log_date_format&quot;: &quot;YYYY-MM-DD HH:mm:ss&quot;,</span><br><span class="line">  &quot;max_memory_restart&quot;: &quot;500M&quot;,</span><br><span class="line">  &quot;out_file&quot;   : &quot;./pm2/logs/pm2-out.log&quot;,</span><br><span class="line">  &quot;error_file&quot; : &quot;./pm2/logs/pm2-err.log&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">含义</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">name</td>
<td>项目名称</td>
</tr>
<tr>
<td style="text-align:left">script</td>
<td>主程序入口</td>
</tr>
<tr>
<td style="text-align:left">cwd</td>
<td>启动目录</td>
</tr>
<tr>
<td style="text-align:left">log_date_format</td>
<td>日志的日期格式</td>
</tr>
<tr>
<td style="text-align:left">max_memory_restart</td>
<td>程序超过指定内存就重新启动</td>
</tr>
<tr>
<td style="text-align:left">out_file</td>
<td>输出文件路径</td>
</tr>
<tr>
<td style="text-align:left">error_file</td>
<td>错误日志路径</td>
</tr>
</tbody>
</table>
<h3 id="三-部署文件"><a class="header-anchor" href="#三-部署文件">¶</a>三、部署文件</h3>
<h4 id="1-通过-ip-地址请求"><a class="header-anchor" href="#1-通过-ip-地址请求">¶</a>1、通过 IP 地址请求</h4>
<p>  在项目内新建一个<code>start.sh</code>文件，在服务器端可执行<code>./start.sh</code>更新服务。服务启用后，可通过 ip + 端口号访问。脚本文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line">cnpm i</span><br><span class="line">pm2 restart ./pm2/config.json</span><br><span class="line">pm2 monit</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/node-pm2/3.png" alt></p>
<blockquote>
<p><strong>注意</strong><br>
<code>start.sh</code>需要有 x 权限，提示权限不够时可执行<code>chmod a+x start.sh</code></p>
</blockquote>
<h4 id="2-通过域名请求"><a class="header-anchor" href="#2-通过域名请求">¶</a>2、通过域名请求</h4>
<p>  先在阿里云控制台解析一个域名，因为服务使用的是 9000 端口，所以搭配 nginx 使用。在<code>/etc/nginx/conf</code>下新建一个配置文件<code>koa-app.conf</code>，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen          80;</span><br><span class="line">    server_name     api.koa-app.liuxianyu.cn;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:9000/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/node-pm2/4.png" alt></p>
<h3 id="四-项目代码"><a class="header-anchor" href="#四-项目代码">¶</a>四、项目代码</h3>
<p><a href="https://github.com/liuxy0551/koa-app" target="_black">https://github.com/liuxy0551/koa-app</a></p>
<blockquote>
<p><strong>注意</strong><br>
本项目使用的端口是 9000，通过 IP 地址请求时记得在阿里云安全组中添加对应规则</p>
</blockquote>
]]></content>
      <categories>
        <category>node</category>
        <category>pm2</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title>nuxt 中使用 vue-lazyload 进行图片懒加载</title>
    <url>/article/nuxt-vue-lazy-load.html</url>
    <content><![CDATA[<p>  最近用 nuxt 写了个 SSR 的页面，有很多图片展示，使用了图片懒加载，记录一下。</p>
<a id="more"></a>
<h3 id="一-依赖版本"><a class="header-anchor" href="#一-依赖版本">¶</a>一、依赖版本</h3>
<p>1、<a href="https://www.npmjs.com/package/nuxt" target="_blank" rel="noopener">nuxt v2.14.5</a><br>
2、<a href="https://www.npmjs.com/package/vue-lazyload" target="_blank" rel="noopener">vue-lazyload v1.3.3</a></p>
<h3 id="二-实现过程"><a class="header-anchor" href="#二-实现过程">¶</a>二、实现过程</h3>
<h4 id="1-安装"><a class="header-anchor" href="#1-安装">¶</a>1、安装</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i vue-lazyload -D</span><br></pre></td></tr></table></figure>
<h4 id="2-引入"><a class="header-anchor" href="#2-引入">¶</a>2、引入</h4>
<p>  在<code>plugins</code>目录下新建一个<code>vueLazyLoad.js</code>，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import VueLazyLoad from &apos;vue-lazyload&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(VueLazyLoad, &#123;</span><br><span class="line">  preLoad: 1.33, // 预加载的宽高比，4:3</span><br><span class="line">  error: &apos;/default.jpg&apos;, // 加载失败时使用的图片</span><br><span class="line">  loading: &apos;/default.jpg&apos;, // 加载时的loading图</span><br><span class="line">  attempt: 2 //尝试加载次数</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>  在<code>nuxt.config.js</code>中配置插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  &#123; src: &apos;~plugins/vueLazyLoad&apos;, ssr: false &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="3-使用"><a class="header-anchor" href="#3-使用">¶</a>3、使用</h4>
<p>  将需要懒加载处的<code>:src</code>属性改为<code>v-lazy</code>，刷新页面，即可看到效果。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>nuxt</category>
      </categories>
      <tags>
        <tag>nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>node 自动编译</title>
    <url>/article/node-auto-compile.html</url>
    <content><![CDATA[<p>  node 开发中自动编译无需重启是件很重要的事，记录一下几个工具。</p>
<a id="more"></a>
<ul>
<li><a href="https://www.npmjs.com/package/nodemon" target="_black">nodemon</a><code>推荐</code></li>
<li><a href="https://www.npmjs.com/package/supervisor" target="_black">supervisor</a></li>
</ul>
<p>  全局安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i nodemon -g</span><br></pre></td></tr></table></figure>
<p>  项目根目录运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 中使用 $once 清除定时器</title>
    <url>/article/vue-$once.html</url>
    <content><![CDATA[<p>  记录一下 vue 中使用 $once 清除定时器，<code>this.$once(‘hook:beforeDestroy’, () =&gt; { })</code>，<a href="https://cn.vuejs.org/v2/api/#vm-once" target="_black">官方文档</a>。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.time = <span class="keyword">new</span> <span class="keyword">this</span>.ExtDate().strftime(<span class="string">'%M月%d日 %H:%m:%s'</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 $once 来监听定时器，在 beforeDestroy 钩子可以被清除</span></span><br><span class="line"><span class="keyword">this</span>.$once(<span class="string">'hook:beforeDestroy'</span>, () =&gt; &#123;</span><br><span class="line">  clearInterval(timer)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong><br>
另一种使用方法：<br>
1、需要在 Vue 实例中创建定时器的实例，较为多余<br>
2、创建和销毁定时器的代码不在一起，容易遗忘这个定时器，不易维护</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 node 将本地 json 文件中的数据存储到 MySQL</title>
    <url>/article/node-mysql.html</url>
    <content><![CDATA[<p>  最近从 <a href="https://github.com/Tencent/wepy#%E5%93%AA%E4%BA%9B%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%98%AF%E7%94%A8-wepy-%E5%BC%80%E5%8F%91%E7%9A%84" target="_black">wepy 的案例</a> 中看到了一款<code>诗词墨客</code>的小程序，风格很喜欢，在这个小程序的<code>README.md</code>中又发现了中华古诗词数据库 <a href="https://github.com/chinese-poetry/chinese-poetry" target="_black">chinese-poetry</a>，便想着拿这些数据通过 node 导入 MySQL 练练手，<a href="https://github.com/liuxy0551/node-chinese-poetry" target="_black">https://github.com/liuxy0551/node-chinese-poetry</a>，<a href="https://github.com/liuxy0551/chinese-poetry/tree/master/node-mysql" target="_black">node 代码：node-mysql</a>。</p>
<a id="more"></a>
<p>  这些 json 文件的获取建议直接 clone <code>chinese-poetry</code>的仓库，我是使用<code>cnpm install chinese-poetry -D</code>后从<code>node_modules</code>中复制的文件内容，作了一些筛选。</p>
<h3 id="一-整理数据"><a class="header-anchor" href="#一-整理数据">¶</a>一、整理数据</h3>
<p>  将本地文件名和数据库表名对应：<a href="https://github.com/liuxy0551/chinese-poetry/blob/master/node-mysql/index.js" target="_black">/node-mysql/index.js</a></p>
<h3 id="二-读取文件"><a class="header-anchor" href="#二-读取文件">¶</a>二、读取文件</h3>
<p>  拼接路径和文件名，读取本地的 json 文件：<a href="https://github.com/liuxy0551/chinese-poetry/blob/master/node-mysql/file.js" target="_black">/node-mysql/file.js</a></p>
<h3 id="三-mysql"><a class="header-anchor" href="#三-mysql">¶</a>三、MySQL</h3>
<p>  存储到 MySQL 数据库主要使用<code>sequelize</code>模块：<a href="https://github.com/liuxy0551/chinese-poetry/blob/master/node-mysql/mysql.js" target="_black">/node-mysql/mysql.js</a><br>
  <code>sequelize</code>模块有一些注意事项，如下：</p>
<h4 id="1-区分版本"><a class="header-anchor" href="#1-区分版本">¶</a>1、区分版本</h4>
<p>注意 sequelize 的版本和 MySQL 版本的对应关系：<a href="https://github.com/demopark/sequelize-docs-Zh-CN#v6" target="_black">sequelize 版本</a></p>
<p>v6 版本</p>
<table>
<thead>
<tr>
<th style="text-align:center">引擎</th>
<th style="text-align:center">支持的最低版本</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Postgre</td>
<td style="text-align:center"><a href="https://www.postgresql.org/docs/9.5/" target="_blank" rel="noopener">9.5 </a></td>
</tr>
<tr>
<td style="text-align:center"><code>MySQL</code></td>
<td style="text-align:center"><code>5.7</code></td>
</tr>
<tr>
<td style="text-align:center">MariaDB</td>
<td style="text-align:center"><a href="https://mariadb.com/kb/en/changes-improvements-in-mariadb-101/" target="_blank" rel="noopener">10.1</a></td>
</tr>
<tr>
<td style="text-align:center">Microsoft SQL</td>
<td style="text-align:center">12.0.2000</td>
</tr>
<tr>
<td style="text-align:center">SQLite</td>
<td style="text-align:center"><a href="https://www.sqlite.org/version3.html" target="_blank" rel="noopener">3.0</a></td>
</tr>
</tbody>
</table>
<h4 id="2-mysql2"><a class="header-anchor" href="#2-mysql2">¶</a>2、mysql2</h4>
<p>  需要同时安装<code>mysql2</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i mysql2 -S</span><br></pre></td></tr></table></figure>
<h4 id="3-插入数据"><a class="header-anchor" href="#3-插入数据">¶</a>3、插入数据</h4>
<p>  create 接收 logging 参数，是否显示 sql 语句日志：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">insertData</span> (<span class="params">k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> resolve =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> Table.create(&#123;</span><br><span class="line">      id: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</span><br><span class="line">      title: k.title,</span><br><span class="line">      paragraphs: k.paragraphs.toString(),</span><br><span class="line">      isDelete: <span class="number">0</span></span><br><span class="line">    &#125;, &#123; <span class="attr">logging</span>: <span class="literal">false</span> &#125;) <span class="comment">// 不打印日志</span></span><br><span class="line">    resolve()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p>1、<a href="https://github.com/chinese-poetry/chinese-poetry" target="_black">chinese-poetry</a><br>
2、<a href="https://itbilu.com/nodejs/npm/V1PExztfb.html" target="_black">Sequelize 中文API文档</a></p>
]]></content>
      <categories>
        <category>node</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>node 爬虫尝试使用动态代理 IP</title>
    <url>/article/node-data-crawler-proxy-ip.html</url>
    <content><![CDATA[<p>  这两天在学习 node 爬虫，考虑到 IP 被封的可能性以及被豆瓣间歇性限制 IP，先记录一下如何使用代理 IP。</p>
<a id="more"></a>
<p>  <a href="https://github.com/liuxy0551/data-crawler/blob/master/proxy-ip/index.js" target="_black">Github：data-crawler-proxy-ip</a> 其实代理就是在<code>request</code>中把 options 写完整：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">  method: <span class="string">'GET'</span>,</span><br><span class="line">  url: <span class="string">'https://movie.douban.com/chart'</span>,</span><br><span class="line">  gzip: <span class="literal">true</span>,</span><br><span class="line">  encoding: <span class="literal">null</span>,</span><br><span class="line">  proxy: <span class="string">`http://<span class="subst">$&#123; proxyIp &#125;</span>`</span>, <span class="comment">// proxyIp 是动态获取到的代理 IP 及端口号</span></span><br><span class="line">  headers: &#123; <span class="string">'User-Agent'</span>: userAgent &#125;, <span class="comment">// 随机的请求头</span></span><br><span class="line">  timeout: <span class="number">5000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="一-代码"><a class="header-anchor" href="#一-代码">¶</a>一、代码</h3>
<h4 id="1-index-js"><a class="header-anchor" href="#1-index-js">¶</a>1、index.js</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"><span class="keyword">const</span> userAgents = <span class="built_in">require</span>(<span class="string">'./commons/userAgents'</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> proxyIPs = <span class="keyword">await</span> getProxyIPs()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// for (let proxyIP of proxyIPs) &#123;</span></span><br><span class="line">  <span class="comment">//   let IPCanUse = await testProxyIP(proxyIP)</span></span><br><span class="line">  <span class="comment">//   console.log(proxyIp, IPCanUse)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> proxyIP = proxyIPs[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * proxyIPs.length)]</span><br><span class="line">  <span class="keyword">let</span> IPCanUse = <span class="keyword">await</span> testProxyIP(proxyIP)</span><br><span class="line">  <span class="built_in">console</span>.log(proxyIp, IPCanUse)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一批代理 IP</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getProxyIPs</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">'http://www.66ip.cn/mo.php?sxb=&amp;tqsl=100&amp;port=&amp;export=&amp;ktip=&amp;sxa=&amp;submit=%CC%E1++%C8%A1&amp;textarea=http%3A%2F%2Fwww.66ip.cn%2F%3Fsxb%3D%26tqsl%3D100%26ports%255B%255D2%3D%26ktip%3D%26sxa%3D%26radio%3Dradio%26submit%3D%25CC%25E1%2B%2B%25C8%25A1'</span></span><br><span class="line">  <span class="keyword">let</span> options = &#123;</span><br><span class="line">    method: <span class="string">'GET'</span>,</span><br><span class="line">    url,</span><br><span class="line">    gzip: <span class="literal">true</span>,</span><br><span class="line">    encoding: <span class="literal">null</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class="line">      <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">      <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4'</span>,</span><br><span class="line">      <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36'</span>,</span><br><span class="line">      <span class="string">'referer'</span>: <span class="string">'http://www.66ip.cn/'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    request(options, (error, response, body) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!error &amp;&amp; response.statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(body.toString().match(<span class="regexp">/\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;:\d&#123;1,4&#125;/g</span>))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'getProxyIPs error'</span>, error)</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).catch(<span class="built_in">console</span>.log)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代理 IP 是否可用</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testProxyIP</span> (<span class="params">proxyIp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userAgent = userAgents[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * userAgents.length)]</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//这里修改成你要访问的目标网站</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`开始测试这个IP <span class="subst">$&#123; proxyIp &#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">let</span> options = &#123;</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">      url: <span class="string">'https://movie.douban.com/chart'</span>,</span><br><span class="line">      gzip: <span class="literal">true</span>,</span><br><span class="line">      encoding: <span class="literal">null</span>,</span><br><span class="line">      proxy: <span class="string">`http://<span class="subst">$&#123; proxyIp &#125;</span>`</span>,</span><br><span class="line">      headers: &#123; <span class="string">'User-Agent'</span>: userAgent &#125;,</span><br><span class="line">      timeout: <span class="number">5000</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request(options, (error, response, body) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">11111111</span>, body)</span><br><span class="line">      <span class="keyword">if</span> (!error &amp;&amp; response.statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(body)</span><br><span class="line">        resolve(<span class="literal">true</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'testProxyIP error'</span>, error)</span><br><span class="line">        reject(<span class="literal">false</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).catch(<span class="built_in">console</span>.log)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-useragents-js"><a class="header-anchor" href="#2-useragents-js">¶</a>2、userAgents.js</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userAgents = [</span><br><span class="line">  <span class="string">'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.0.12) Gecko/20070731 Ubuntu/dapper-security Firefox/1.5.0.12'</span>,</span><br><span class="line">  <span class="string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)'</span>,</span><br><span class="line">  <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11'</span>,</span><br><span class="line">  <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20'</span>,</span><br><span class="line">  <span class="string">'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6'</span>,</span><br><span class="line">  <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER'</span>,</span><br><span class="line">  <span class="string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0) ,Lynx/2.8.5rel.1 libwww-FM/2.14 SSL-MM/1.4.1 GNUTLS/1.2.9'</span>,</span><br><span class="line">  <span class="string">'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)'</span>,</span><br><span class="line">  <span class="string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)'</span>,</span><br><span class="line">  <span class="string">'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)'</span>,</span><br><span class="line">  <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre'</span>,</span><br><span class="line">  <span class="string">'Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52'</span>,</span><br><span class="line">  <span class="string">'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.0.12) Gecko/20070731 Ubuntu/dapper-security Firefox/1.5.0.12'</span>,</span><br><span class="line">  <span class="string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)'</span>,</span><br><span class="line">  <span class="string">'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6'</span>,</span><br><span class="line">  <span class="string">'Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6'</span>,</span><br><span class="line">  <span class="string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)'</span>,</span><br><span class="line">  <span class="string">'Opera/9.25 (Windows NT 5.1; U; en), Lynx/2.8.5rel.1 libwww-FM/2.14 SSL-MM/1.4.1 GNUTLS/1.2.9'</span>,</span><br><span class="line">  <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = userAgents</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p>1、<a href="https://www.cnblogs.com/bruce-gou/p/9315592.html" target="_black">node.js 爬虫动态代理 ip</a><br>
2、<a href="https://segmentfault.com/q/1010000008196143" target="_black">nodejs 代理 IP 发送 HTTP 请求</a></p>
]]></content>
      <categories>
        <category>node</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 node 进行简单爬虫学习</title>
    <url>/article/node-data-crawler.html</url>
    <content><![CDATA[<p>  最近在公众号看到篇 node 爬虫的文章，比较简单，本着学习的态度看完觉得可以加大点难度试一试。</p>
<a id="more"></a>
<p>  <a href="https://github.com/liuxy0551/data-crawler" target="_black">Github：data-crawler</a></p>
<h3 id="一-top250-爬取页面"><a class="header-anchor" href="#一-top250-爬取页面">¶</a>一、Top250 - 爬取页面</h3>
<p>  <a href="https://movie.douban.com/top250" target="_black">豆瓣电影 Top250</a> 是基于网页爬取，每页25条数据，访问 URL 有一定规律。思路是获取 DOM 节点的内容，写入到 json 文件，下载电影的封面图片。<code>cheerio</code>用来解析 html 非常方便，写法可参考 <a href="https://liuxianyu.cn/article/node-data-crawler.html#2-%E6%8A%93%E5%8F%96%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2">抓取当前页面</a>。</p>
<h4 id="1-入口文件"><a class="header-anchor" href="#1-入口文件">¶</a>1、入口文件</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getFilmsInfo = <span class="built_in">require</span>(<span class="string">'./tools/getFilmsInfo'</span>)</span><br><span class="line"><span class="keyword">const</span> downloadImages = <span class="built_in">require</span>(<span class="string">'./tools/downloadImages'</span>)</span><br><span class="line"></span><br><span class="line">getAllFilms()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * https://movie.douban.com/top250 页面分页的规则</span></span><br><span class="line"><span class="comment"> * get 请求，参数为 start，含义是每页25条数据，从第几条开始</span></span><br><span class="line"><span class="comment"> * 如 https://movie.douban.com/top250?start=25, https://movie.douban.com/top250?start=100</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 根据 url 抓取当前页面所有电影的信息</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllFilms</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> pageNum = <span class="number">0</span>; pageNum &lt; <span class="number">10</span>; pageNum++) &#123;</span><br><span class="line">    <span class="comment">// 爬取数据并将需要的数据写到 json 文件</span></span><br><span class="line">    <span class="keyword">let</span> films = <span class="keyword">await</span> getFilmsInfo(<span class="string">`https://movie.douban.com/top250?start=<span class="subst">$&#123; pageNum * <span class="number">25</span> &#125;</span>`</span>, pageNum)</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 下载图片</span></span><br><span class="line">    <span class="keyword">await</span> downloadImages(films.map(<span class="function"><span class="params">i</span> =&gt;</span> i.pic), pageNum)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-抓取当前页面"><a class="header-anchor" href="#2-抓取当前页面">¶</a>2、抓取当前页面</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 url 抓取当前页面所有电影的信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>)</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// url 爬取的网址，pageNum 已存在多少条数据</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getFilmsInfo</span> (<span class="params">url, pageNum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    https.get(url, res =&gt; &#123;</span><br><span class="line">      <span class="comment">// 分段返回的 自己拼接</span></span><br><span class="line">      <span class="keyword">let</span> html = <span class="string">''</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 有数据产生的时候 拼接</span></span><br><span class="line">      res.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">        html += chunk</span><br><span class="line">      &#125;)</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 拼接完成</span></span><br><span class="line">      res.on(<span class="string">'end'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> $ = cheerio.load(html)</span><br><span class="line">        <span class="keyword">let</span> films = []</span><br><span class="line">        $(<span class="string">'li .item'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">const</span> sort = pageNum * <span class="number">25</span> + films.length + <span class="number">1</span></span><br><span class="line">          <span class="keyword">const</span> title = $(<span class="string">'.title'</span>, <span class="keyword">this</span>).text()</span><br><span class="line">          <span class="keyword">const</span> star = $(<span class="string">'.rating_num'</span>, <span class="keyword">this</span>).text()</span><br><span class="line">          <span class="keyword">const</span> slogan = $(<span class="string">'.inq'</span>, <span class="keyword">this</span>).text()</span><br><span class="line">          <span class="keyword">const</span> pic = $(<span class="string">'.pic img'</span>, <span class="keyword">this</span>).attr(<span class="string">'src'</span>)</span><br><span class="line">          films.push(&#123; sort, title, star, slogan, pic &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 按页码写入 json 文件</span></span><br><span class="line">        <span class="keyword">let</span> fileName = pageNum + <span class="number">1</span></span><br><span class="line">        <span class="keyword">await</span> fs.writeFile(<span class="string">`./result/top250/page-<span class="subst">$&#123; fileName &#125;</span>.json`</span>, <span class="built_in">JSON</span>.stringify(films, <span class="literal">null</span>, <span class="number">2</span>), err =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123; fileName &#125;</span>页数据保存成功`</span>)</span><br><span class="line">            resolve(films)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-下载电影封面图片"><a class="header-anchor" href="#3-下载电影封面图片">¶</a>3、下载电影封面图片</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">downloadImage</span> (<span class="params">pics, pageNum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> pics) &#123;</span><br><span class="line">    https.get(pics[i], res =&gt; &#123;</span><br><span class="line">      res.setEncoding(<span class="string">'binary'</span>)</span><br><span class="line">      <span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">      res.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">        str += chunk</span><br><span class="line">      &#125;)</span><br><span class="line">      res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        fs.writeFile(<span class="string">`./result/top250/images/page-<span class="subst">$&#123; pageNum + <span class="number">1</span> &#125;</span>-<span class="subst">$&#123; <span class="built_in">Number</span>(i) + <span class="number">1</span> &#125;</span>.jpg`</span>, str, <span class="string">'binary'</span>, err =&gt; &#123;</span><br><span class="line">          err &amp;&amp; <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二-电影列表-调用接口"><a class="header-anchor" href="#二-电影列表-调用接口">¶</a>二、电影列表 - 调用接口</h3>
<p>  <a href="https://movie.douban.com/tag/#/" target="_black">豆瓣电影全量列表（9900+条信息）</a> 是通过接口去请求的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sleepTime = <span class="number">5000</span> <span class="comment">// 过指定时间后返回结果，可以实现相邻请求有间隔时间</span></span><br><span class="line"><span class="keyword">let</span> errorCount = <span class="number">0</span> <span class="comment">// 失败计数</span></span><br><span class="line"><span class="keyword">let</span> errorMaxCount = <span class="number">2</span> <span class="comment">// 失败后尝试指定次数，依旧失败则停止</span></span><br><span class="line">asyncGetAllFilms()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncGetAllFilms</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">127</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> getAllFilms(<span class="string">`https://movie.douban.com/j/new_search_subjects?start=<span class="subst">$&#123; i * <span class="number">20</span> &#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存数据到 json 文件</span></span><br><span class="line">    <span class="keyword">await</span> fs.writeFile(<span class="string">`./result/douban/page-<span class="subst">$&#123; i + <span class="number">1</span> &#125;</span>.json`</span>, <span class="built_in">JSON</span>.stringify(res.data, <span class="literal">null</span>, <span class="number">2</span>), err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'writeFile'</span>, err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123; i + <span class="number">1</span> &#125;</span>页数据保存成功`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有电影</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllFilms</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    request(url, (error, res, body) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!error &amp;&amp; res.statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          resolve(<span class="built_in">JSON</span>.parse(body))</span><br><span class="line">        &#125;, sleepTime)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'error'</span>, error)</span><br><span class="line">        <span class="keyword">if</span> (errorCount &lt; errorMaxCount) &#123;</span><br><span class="line">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            errorCount++</span><br><span class="line">            getAllFilms(url)</span><br><span class="line">          &#125;, sleepTime)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          reject(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).catch(<span class="built_in">console</span>.log)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p><a href="https://mp.weixin.qq.com/s/yO8zuFB20eQEg6S37SPEww" target="_black">你不知道的 node 爬虫原来这么简单</a></p>
]]></content>
      <categories>
        <category>node</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>目录结构小工具 treer</title>
    <url>/article/project-treer.html</url>
    <content><![CDATA[<p>  最近写了几个 npm 包，发现了一个比较好用的目录结构小工具 <a href="https://www.npmjs.com/package/treer" target="_black">treer</a>。</p>
<a id="more"></a>
<h4 id="1-安装"><a class="header-anchor" href="#1-安装">¶</a>1、安装</h4>
<p>  建议在全局安装，无需写到 package.json。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i treer -g</span><br></pre></td></tr></table></figure>
<h4 id="2-使用"><a class="header-anchor" href="#2-使用">¶</a>2、使用</h4>
<p>  项目路径内，输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">treer -e ./result.txt -i '/node_modules|.git|.idea|.DS_Store/'</span><br></pre></td></tr></table></figure>
<h4 id="3-处理"><a class="header-anchor" href="#3-处理">¶</a>3、处理</h4>
<p>  会在项目路径下生成一个<code>result.txt</code>文件，稍微处理一下即可得到美观的目录结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">syvue-cli</span><br><span class="line">├─.gitignore</span><br><span class="line">├─README.md</span><br><span class="line">├─package-lock.json</span><br><span class="line">├─package.json</span><br><span class="line">├─bin</span><br><span class="line">|  ├─index.js</span><br><span class="line">|  ├─tools</span><br><span class="line">|  |   ├─index.js</span><br><span class="line">|  |   └templateConfig.js</span><br><span class="line">|  ├─actions</span><br><span class="line">|  |    └create.js</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>写一个快速创建 vue 项目的脚手架</title>
    <url>/article/syvue-cli.html</url>
    <content><![CDATA[<p>  最近新建项目挺多，刚好有现成的模板，就写了个适用于公司内部的脚手架工具，基于 vue cli 3.x + 快速生成 vue 项目基础结构。</p>
<a id="more"></a>
<p>  具体如何使用，可移步 <a href="https://www.npmjs.com/package/syvue-cli" target="_black">syvue-cli</a> 查看。这里不过多介绍使用方法，主要记录一下遇到的一些点。</p>
<h3 id="一-node-模块"><a class="header-anchor" href="#一-node-模块">¶</a>一、node 模块</h3>
<h4 id="1-commander"><a class="header-anchor" href="#1-commander">¶</a>1、commander</h4>
<p>  用来接收终端输入的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123; program &#125; = require(&apos;commander&apos;)</span><br><span class="line">const packageJson = require(&apos;../package.json&apos;)</span><br><span class="line"></span><br><span class="line">program.version(packageJson.version, &apos;-V, -v, --version&apos;)</span><br><span class="line">// create</span><br><span class="line">program.command(&apos;create&apos;).arguments(&apos;&lt;project-name&gt;&apos;).description(&apos;create project&apos;).action(require(&apos;./actions/create&apos;))</span><br><span class="line"></span><br><span class="line">// 解析参数这一行要放到定义的命令最后面</span><br><span class="line">program.parse(process.argv)</span><br></pre></td></tr></table></figure>
<h4 id="2-chalk"><a class="header-anchor" href="#2-chalk">¶</a>2、chalk</h4>
<p>  用来输出不同颜色的信息内容到终端，起到不同的提示作用，不同软件可能输出的颜色有色差，主要集中在 blue 和 cyan。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(chalk.cyan(&apos;hello deployvue&apos;))</span><br></pre></td></tr></table></figure>
<h4 id="3-inquirer"><a class="header-anchor" href="#3-inquirer">¶</a>3、inquirer</h4>
<p>  在命令行和用户互动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let answer = await inquirer.prompt([</span><br><span class="line">  &#123;</span><br><span class="line">    type: &apos;list&apos;,</span><br><span class="line">    name: &apos;template&apos;,</span><br><span class="line">    message: `$&#123; chalk.bold(&apos;Please pick template type: &apos;) &#125;`,</span><br><span class="line">    choices: [`admin ($&#123; chalk.yellow(&apos;management template&apos;) &#125;)`, `mobile ($&#123; chalk.yellow(&apos;mobile template&apos;) &#125;)`]</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/syvue-cli/1.png" alt></p>
<h4 id="4-ora"><a class="header-anchor" href="#4-ora">¶</a>4、ora</h4>
<p>  命令行加载中的动画效果 <a href="https://www.npmjs.com/package/ora" target="_black">ora</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let cnpmSpinner = ora(`Installing npm plugins. This might take a while` + &apos;...&apos;)</span><br><span class="line">cnpmSpinner.start()</span><br><span class="line">shell.exec(`cd $&#123; process.cwd() &#125;/$&#123; projectName &#125;; cnpm i`, &#123; silent: true &#125;)</span><br><span class="line">cnpmSpinner.stop()</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/syvue-cli/2.svg" alt></p>
<h4 id="5-shelljs"><a class="header-anchor" href="#5-shelljs">¶</a>5、shelljs</h4>
<p>  用来在本地执行命令、结束程序，将 silent 设为 true 可隐藏在终端的内容输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (let command of buildCommands) &#123;</span><br><span class="line">  console.log(`+ $&#123; command &#125;`)</span><br><span class="line">  if (shell.exec(`$&#123; command &#125;`).code !== 0) &#123;</span><br><span class="line">    shell.echo(`Run: $&#123; command &#125; Error`)</span><br><span class="line">    shell.exit(1)</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(chalk.cyan(`DONE  $&#123; command &#125; complete`))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/syvue-cli/3.png" alt><br>
<img src="https://images-hosting.liuxianyu.cn/posts/syvue-cli/4.png" alt></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli3 打包时去除 console.log</title>
    <url>/article/vue-cli3-build-console.html</url>
    <content><![CDATA[<p>  通过 terser-webpack-plugin 可以在打包时去除 console.log，记录一下实现。</p>
<a id="more"></a>
<h3 id="1-安装"><a class="header-anchor" href="#1-安装">¶</a>1、安装</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i terser-webpack-plugin -D</span><br></pre></td></tr></table></figure>
<h3 id="2-配置"><a class="header-anchor" href="#2-配置">¶</a>2、配置</h3>
<p>  在<code>vue.config.js</code>中添加如下配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">  configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.optimization.minimizer[<span class="number">0</span>].options.terserOptions.compress.drop_console = process.env.NODE_ENV === <span class="string">'production'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>configureWebpack 加上 config 的写法会影响到 <a href="https://liuxianyu.cn/article/vue-cli3-cdn.html#2-vue-config-js" target="_black">vue.config.js</a> 中 externals 的使用，更改写法即可：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  config.externals = &#123;</span><br><span class="line">    vue: <span class="string">'Vue'</span>,</span><br><span class="line">    <span class="string">'vue-router'</span>: <span class="string">'VueRouter'</span>,</span><br><span class="line">    vuex: <span class="string">'Vuex'</span>,</span><br><span class="line">    axios: <span class="string">'axios'</span>,</span><br><span class="line">    vant: <span class="string">'vant'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 vuex-persistedstate 持久化 vuex</title>
    <url>/article/vuex-persistedstate.html</url>
    <content><![CDATA[<p>  vuex 的持久化可避免刷新页面就更新状态，记录一下简单使用。</p>
<a id="more"></a>
<h3 id="一-所有模块持久化"><a class="header-anchor" href="#一-所有模块持久化">¶</a>一、所有模块持久化</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">'vuex-persistedstate'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> moduleFiles = <span class="built_in">require</span>.context(<span class="string">'./modules'</span>, <span class="literal">true</span>, /\.js$/)</span><br><span class="line"><span class="keyword">let</span> modules = &#123;&#125;</span><br><span class="line">moduleFiles.keys().forEach(<span class="function"><span class="params">modulePath</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> moduleName = modulePath.replace(<span class="regexp">/^\.\/(.*)\.\w+$/</span>, <span class="string">'$1'</span>)</span><br><span class="line">  modules[moduleName] = moduleFiles(modulePath).default</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  plugins: [createPersistedState()],</span><br><span class="line">  modules</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="二-部分模块持久化"><a class="header-anchor" href="#二-部分模块持久化">¶</a>二、部分模块持久化</h3>
<p>  仅针对某个模块持久化时，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">'vuex-persistedstate'</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">'./modules/user'</span></span><br><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">'./modules/app'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// state 持久化，防止f5刷新，导致数据消失</span></span><br><span class="line">  plugins: [createPersistedState(&#123;</span><br><span class="line">    storage: <span class="built_in">window</span>.localStorage,</span><br><span class="line">    reducer (val) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 只保存module user内部所有变量持久化</span></span><br><span class="line">        user: val.user</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)],</span><br><span class="line">  state: &#123;&#125;,</span><br><span class="line">  mutations: &#123;&#125;,</span><br><span class="line">  actions: &#123;&#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">    app,</span><br><span class="line">    user</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="三-modules-user-js"><a class="header-anchor" href="#三-modules-user-js">¶</a>三、/modules/user.js</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    accessToken: <span class="string">''</span>,</span><br><span class="line">    userInfo: <span class="literal">null</span>,</span><br><span class="line">    bayonet: <span class="literal">null</span>,</span><br><span class="line">    corpId: <span class="string">''</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;&#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    setUserInfo: <span class="function">(<span class="params">state, userInfo</span>) =&gt;</span> &#123;</span><br><span class="line">      state.userInfo = userInfo</span><br><span class="line">    &#125;,</span><br><span class="line">    setAccessToken: <span class="function">(<span class="params">state, accessToken</span>) =&gt;</span> &#123;</span><br><span class="line">      state.accessToken = accessToken</span><br><span class="line">    &#125;,</span><br><span class="line">    setCorpId: <span class="function">(<span class="params">state, corpId</span>) =&gt;</span> &#123;</span><br><span class="line">      state.corpId = corpId</span><br><span class="line">    &#125;,</span><br><span class="line">    setBayonet: <span class="function">(<span class="params">state, bayonet</span>) =&gt;</span> &#123;</span><br><span class="line">      state.bayonet = bayonet</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 webpack 的 require.context 函数实现前端自动化引入</title>
    <url>/article/require-context.html</url>
    <content><![CDATA[<p>  <code>require.context</code>是 webpack 中用于生成上下文模块的一个方法，传入要搜索的目录，将目录下所有模块通过正则表达式匹配后 require 进来，新增模块时无需再依次引入。可参考 <a href="https://webpack.js.org/guides/dependency-management/#requirecontext" target="_black">官方文档</a></p>
<a id="more"></a>
<h3 id="一-require-context"><a class="header-anchor" href="#一-require-context">¶</a>一、require.context</h3>
<p>  官方示例接收四个参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.context(directory, useSubdirectories = <span class="literal">true</span>, regExp = <span class="regexp">/^\.\/.*$/</span>, mode = <span class="string">'sync'</span>);</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">参数名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">directory</td>
<td>要查询的目录</td>
</tr>
<tr>
<td style="text-align:center">useSubdirectories</td>
<td>是否要查询子孙目录，默认值为 false</td>
</tr>
<tr>
<td style="text-align:center">regExp</td>
<td>要匹配的文件的后缀，是一个正则表达式</td>
</tr>
<tr>
<td style="text-align:center">mode</td>
<td>模块加载模式，常用值为 sync、lazy、lazy-once、eager</td>
</tr>
</tbody>
</table>
<h3 id="二-使用-require-context"><a class="header-anchor" href="#二-使用-require-context">¶</a>二、使用 require.context</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> moduleFiles = <span class="built_in">require</span>.context(<span class="string">'./modules'</span>, <span class="literal">true</span>, /\.js$/)</span><br><span class="line"><span class="keyword">let</span> modules = &#123;&#125;</span><br><span class="line">moduleFiles.keys().forEach(<span class="function"><span class="params">modulePath</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> moduleName = modulePath.replace(<span class="regexp">/^\.\/(.*)\.\w+$/</span>, <span class="string">'$1'</span>)</span><br><span class="line">  modules[moduleName] = moduleFiles(modulePath).default</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="三-未使用-require-context"><a class="header-anchor" href="#三-未使用-require-context">¶</a>三、未使用 require.context</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> permission <span class="keyword">from</span> <span class="string">'./modules/permission'</span></span><br><span class="line"><span class="keyword">import</span> settings <span class="keyword">from</span> <span class="string">'./modules/settings'</span></span><br><span class="line"><span class="keyword">import</span> tagsView <span class="keyword">from</span> <span class="string">'./modules/tagsView'</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">'./modules/user'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    permission,</span><br><span class="line">    settings,</span><br><span class="line">    tagsView,</span><br><span class="line">    user</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>基于钉钉 JSAPI 封装 DingTalk 类</title>
    <url>/article/dingtalk-jsapi.html</url>
    <content><![CDATA[<p>  钉钉 JSAPI 为 H5 微应用开发提供了调用钉钉控件的能力，这里记录一下自己封装的 DingTalk 类，方便开发。可参考 <a href="https://developers.dingtalk.com/document/app/jsapi-overview" target="_black">钉钉开发文档</a></p>
<a id="more"></a>
<h3 id="一-钉钉-jsapi"><a class="header-anchor" href="#一-钉钉-jsapi">¶</a>一、钉钉 JSAPI</h3>
<p>  封装的 DingTalk 类也是基于钉钉 JSAPI，所以项目中需要安装钉钉的 JSAPI：</p>
<h4 id="1-npm"><a class="header-anchor" href="#1-npm">¶</a>1、npm</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i dingtalk-jsapi -S</span><br></pre></td></tr></table></figure>
<h4 id="2-cdn-引入"><a class="header-anchor" href="#2-cdn-引入">¶</a>2、CDN 引入</h4>
<p>  详见 <a href="https://liuxianyu.cn/article/vue-cli3-cdn.html" target="_black">前端项目优化之旅（六）—— 引入并使用 CDN</a></p>
<h3 id="二-dingtalk-类"><a class="header-anchor" href="#二-dingtalk-类">¶</a>二、DingTalk 类</h3>
<h4 id="1-封装"><a class="header-anchor" href="#1-封装">¶</a>1、封装</h4>
<p>  新建<code>/src/utils/DingTalk/index.js</code>，内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> dd <span class="keyword">from</span> <span class="string">'dingtalk-jsapi'</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DingTalk</span> </span>&#123;</span><br><span class="line">  <span class="comment">// dd.ready</span></span><br><span class="line">  <span class="keyword">static</span> ready () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      dd.ready(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 钉钉 JSAPI 鉴权</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> getJsApiTicket () &#123;</span><br><span class="line">    <span class="keyword">let</span> params = &#123;</span><br><span class="line">      corpId: store.state.user.corpId,</span><br><span class="line">      url: location.origin + <span class="string">'/'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> jsApiList = [ <span class="comment">// 必填，需要使用的jsapi列表，注意：不要带dd。</span></span><br><span class="line">      <span class="string">'biz.contact.complexPicker'</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      Vue.prototype.axios.post(<span class="string">`<span class="subst">$&#123; process.env.VUE_APP_BASE_API || <span class="string">''</span> &#125;</span>/api/getJsApiTicket`</span>, params).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.data.code === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> config = &#123;</span><br><span class="line">            agentId: res.data.data.agentId,</span><br><span class="line">            corpId: res.data.data.corpId,</span><br><span class="line">            timeStamp: res.data.data.timeStamp,</span><br><span class="line">            nonceStr: res.data.data.nonceStr,</span><br><span class="line">            signature: res.data.data.signature,</span><br><span class="line">            jsApiList: jsApiList</span><br><span class="line">          &#125;</span><br><span class="line">          dd.config(config)</span><br><span class="line">        &#125;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取 authCode</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> requestAuthCode (corpId) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">      <span class="keyword">await</span> DingTalk.ready()</span><br><span class="line">      dd.runtime.permission.requestAuthCode(&#123;</span><br><span class="line">        corpId,</span><br><span class="line">        onSuccess: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          resolve(res)</span><br><span class="line">        &#125;,</span><br><span class="line">        onFail: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'error: '</span> + <span class="built_in">JSON</span>.stringify(err))</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通讯录选人 - 选人和选部门</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> complexPicker (options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">      <span class="keyword">await</span> DingTalk.ready()</span><br><span class="line">      dd.biz.contact.complexPicker(&#123;</span><br><span class="line">        title: options.title || <span class="string">'请选择'</span>,  <span class="comment">// 标题</span></span><br><span class="line">        corpId: options.corpId || store.state.user.corpId,  <span class="comment">// 企业 id，corpId 必须是用户所属的企业的 corpId</span></span><br><span class="line">        multiple: options.multiple || <span class="literal">false</span>,  <span class="comment">// 是否多选</span></span><br><span class="line">        maxUsers: options.maxUsers || <span class="number">1</span>,  <span class="comment">// 人数限制，当 multiple 为 true 才生效，可选范围 1-1500</span></span><br><span class="line">        limitTips: options.limitTips || <span class="string">'仅需选择一个审批人'</span>,  <span class="comment">// 超出选人的人数限制之后的提示</span></span><br><span class="line">        pickedUsers: options.pickedUsers || [], <span class="comment">// 已选用户</span></span><br><span class="line">        pickedDepartments: options.pickedDepartments || [], <span class="comment">// 已选部门</span></span><br><span class="line">        disabledUsers: options.disabledUsers || [], <span class="comment">// 不可选用户</span></span><br><span class="line">        disabledDepartments: options.disabledDepartments || [], <span class="comment">// 不可选部门</span></span><br><span class="line">        requiredUsers: options.requiredUsers || [], <span class="comment">// 必选用户（不可取消选中状态）</span></span><br><span class="line">        requiredDepartments: options.requiredDepartments || [], <span class="comment">// 必选部门（不可取消选中状态）</span></span><br><span class="line">        appId: options.appId, <span class="comment">// 微应用的Id</span></span><br><span class="line">        permissionType: options.permissionType || <span class="string">'GLOBAL'</span>,  <span class="comment">// 选人权限，目前只有GLOBAL这个参数，非必填</span></span><br><span class="line">        responseUserOnly: options.responseUserOnly || <span class="literal">true</span>,  <span class="comment">// true: 返回人员信息 false: 返回人员和部门信息</span></span><br><span class="line">        startWithDepartmentId: options.startWithDepartmentId || <span class="number">0</span>, <span class="comment">// 0: 表示从企业最上层开始 -1: 表示从自己所在部门开始</span></span><br><span class="line">        onSuccess: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          resolve(res)</span><br><span class="line">        &#125;,</span><br><span class="line">        onFail: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'error: '</span> + <span class="built_in">JSON</span>.stringify(err))</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> install (Vue) &#123;</span><br><span class="line">    Vue.prototype.isDingTalk = dd?.env?.platform !== <span class="string">'notInDingTalk'</span></span><br><span class="line">    Vue.prototype.DingTalk = DingTalk</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DingTalk</span><br></pre></td></tr></table></figure>
<h4 id="2-引入"><a class="header-anchor" href="#2-引入">¶</a>2、引入</h4>
<p>  在<code>/src/utils/index.js</code>中添加如下引入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> DingTalk <span class="keyword">from</span> <span class="string">'./DingTalk'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install (Vue) &#123;</span><br><span class="line">    Vue.use(DingTalk)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-使用"><a class="header-anchor" href="#3-使用">¶</a>3、使用</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="comment">// 获取 authCode</span></span><br><span class="line">  <span class="keyword">async</span> getAuthCode () &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.DingTalk.requestAuthCode(<span class="keyword">this</span>.corpId)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">mounted () &#123;</span><br><span class="line">  <span class="keyword">this</span>.DingTalk.getJsApiTicket() <span class="comment">// 钉钉鉴权</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-判断是否是钉钉环境"><a class="header-anchor" href="#4-判断是否是钉钉环境">¶</a>4、判断是否是钉钉环境</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import * as dd from &apos;dingtalk-jsapi&apos;</span><br><span class="line">...</span><br><span class="line">console.log(dd.env.platform === &apos;notInDingTalk&apos;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>钉钉开发</category>
      </categories>
      <tags>
        <tag>钉钉开发</tag>
      </tags>
  </entry>
  <entry>
    <title>写一个 Vue 项目的自动化部署插件 —— deployvue</title>
    <url>/article/deploy-vue.html</url>
    <content><![CDATA[<p>  最近抽空写了个 Vue 项目的部署插件<code>deployvue</code>，设置部署参数后可以实现<code>npm run deploy</code>一条命令完成部署更新。</p>
<a id="more"></a>
<p>  具体如何使用，可移步 <a href="https://github.com/liuxy0551/deployvue#readme" target="_black">README.md</a> 查看。这里不过多介绍使用方法，主要记录一下遇到的一些点。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/deploy-vue/1.gif" alt></p>
<h3 id="一-部署流程"><a class="header-anchor" href="#一-部署流程">¶</a>一、部署流程</h3>
<p>  公司的部署发布流程是：<br>
  1、git 提交代码到远程仓库<br>
  2、用 Jenkins 点击对应工程的 Build 按钮，执行脚本<br>
  3、运维服务器端执行 git pull 拉取对应分支的代码<br>
  4、npm install<br>
  5、npm run build<br>
  6、在运维服务器通过 scp 命令将打包后的文件夹传输到（多台，做了负载均衡）部署服务器。</p>
<p>  <code>deployvue</code>的部署流程是：<br>
  1、执行 build 命令<br>
  2、自动压缩打包后的文件夹<br>
  3、连接服务器，创建部署目录及备份目录（用于回退版本）<br>
  4、scp 将打包后的压缩包上传到服务器指定路径<br>
  5、利用已有的服务器连接，在服务器端解压压缩包<br>
  6、删除本地的打包文件及压缩包，部署完成。<br>
  相较于公司当前的部署方式，有个优点就是不需要在服务器存放代码，主要是不需要在服务器存储<code>node_modules</code>，毕竟<code>node_modules</code>文件夹动辄200M+，公用本地的<code>node_modules</code>可以减少服务器磁盘占用。</p>
<h3 id="二-node-模块"><a class="header-anchor" href="#二-node-模块">¶</a>二、node 模块</h3>
<h4 id="1-commander"><a class="header-anchor" href="#1-commander">¶</a>1、commander</h4>
<p>  用来接收终端输入的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123; program &#125; = require(&apos;commander&apos;)</span><br><span class="line">const packageJson = require(&apos;../package.json&apos;)</span><br><span class="line"></span><br><span class="line">program.version(packageJson.version, &apos;-V, --version&apos;)</span><br><span class="line">program.command(&apos;build&apos;).description(&apos;build code&apos;).option(&apos;-e, --env &lt;env&gt;&apos;, &apos;environment&apos;, &apos;&apos;).action(require(&apos;./actions/build&apos;))</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// 解析参数这一行要放到定义的命令最后面</span><br><span class="line">program.parse(process.argv)</span><br></pre></td></tr></table></figure>
<h4 id="2-archiver"><a class="header-anchor" href="#2-archiver">¶</a>2、archiver</h4>
<p>  用来压缩打包后的文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">archive.directory(`$&#123; process.cwd() &#125;/$&#123; deployConfig.archiveRootDir &#125;`, false)</span><br></pre></td></tr></table></figure>
<h4 id="3-chalk"><a class="header-anchor" href="#3-chalk">¶</a>3、chalk</h4>
<p>  用来输出不同颜色的信息内容到终端，起到不同的提示作用，不同软件可能输出的颜色有色差，主要集中在 blue 和 cyan。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(chalk.cyan(&apos;hello deployvue&apos;))</span><br></pre></td></tr></table></figure>
<h4 id="4-node-ssh"><a class="header-anchor" href="#4-node-ssh">¶</a>4、node-ssh</h4>
<p>  用来连接服务器，需要在指定目录下操作的，需要把命令连起来，因为 execCommand 执行时都是从 <code>~</code> 路径下开始执行的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 把压缩包 move 到备份文件夹</span><br><span class="line">await ssh.execCommand(`cd $&#123; deployConfig.deployTo &#125;; $&#123; unArchiveCommand &#125;; mv $&#123; deployConfig.archiveRootDir &#125;-$&#123; date &#125;.tar $&#123; deployConfig.archiveRootDir &#125;-history`)</span><br><span class="line">// 仅保留特定数量的压缩包文件 - 保留文件夹下最新的特定数量文件</span><br><span class="line">await ssh.execCommand(`cd $&#123; deployConfig.deployTo &#125;/$&#123; deployConfig.archiveRootDir &#125;-history; ls -t | awk &apos;NR &gt; $&#123; deployConfig.keepReleases + 1 &#125; &#123;print &quot;rm -rf &quot;$0&#125;&apos; | sh`)</span><br></pre></td></tr></table></figure>
<h4 id="5-shelljs"><a class="header-anchor" href="#5-shelljs">¶</a>5、shelljs</h4>
<p>  用来在本地执行命令、结束程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (let command of buildCommands) &#123;</span><br><span class="line">  console.log(`+ $&#123; command &#125;`)</span><br><span class="line">  if (shell.exec(`$&#123; command &#125;`).code !== 0) &#123;</span><br><span class="line">    shell.echo(`Run: $&#123; command &#125; Error`)</span><br><span class="line">    shell.exit(1)</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(chalk.cyan(`DONE  $&#123; command &#125; complete`))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三-npm-link"><a class="header-anchor" href="#三-npm-link">¶</a>三、npm link</h3>
<p>  在本地开发 npm 命令行工具时，可以使用<code>npm link</code>将开发模块指向到对应的运行项目中，方便调试。</p>
<h4 id="1-绑定指向"><a class="header-anchor" href="#1-绑定指向">¶</a>1、绑定指向</h4>
<p>  在<code>deployvue</code>项目目录下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm link</span><br></pre></td></tr></table></figure>
<ul>
<li>（Mac OS）会在<code>/usr/local/lib/node_modules</code>下新增<code>deployvue</code>整体项目的快捷方式</li>
<li>（Mac OS）会在<code>/usr/local/bin</code>下新增<code>deployvue/bin/index.js</code>的快捷方式</li>
</ul>
<h4 id="2-解除绑定指向"><a class="header-anchor" href="#2-解除绑定指向">¶</a>2、解除绑定指向</h4>
<p>  在<code>deployvue</code>项目目录下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm unlink</span><br></pre></td></tr></table></figure>
<h3 id="四-npm-删除发布"><a class="header-anchor" href="#四-npm-删除发布">¶</a>四、npm 删除发布</h3>
<p>  在<code>deployvue</code>项目目录下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm unpublish deployvue --force</span><br></pre></td></tr></table></figure>
<p>  在删除 npm 包的24小时内不可再次发布该 npm 包。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>自动化部署</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>node</tag>
        <tag>npm</tag>
        <tag>自动化部署</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 CDN 引入 element-ui 时，如何改变其全局配置 (size, z-index)</title>
    <url>/article/element-cdn-global-settings.html</url>
    <content><![CDATA[<p>  最近在写一个后台管理的项目，自己觉得按钮默认的尺寸比较大，遂加上了<code>size=&quot;small&quot;</code>，但是发现每个页面的按钮都需要加上才够统一、协调，想起了 Element 官方有推荐全局配置，改之。</p>
<a id="more"></a>
<p>  以上是通过 npm 引入 Element 的写法，为提升加载速度，项目中大部分基本库都是通过 CDN 引入的，Element 亦然。那么<code>通过 CDN 引入 element-ui 时，如何改变其全局配置 (size, z-index)</code>呢，记录如下：</p>
<h3 id="一-官方推荐-npm-安装法"><a class="header-anchor" href="#一-官方推荐-npm-安装法">¶</a>一、官方推荐（npm 安装法）</h3>
<p>  size 的值有：medium、small、mini，默认值为空字符串，比 medium 大。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/element-cdn-global-settings/1.png" alt></p>
<h3 id="二-编译源码-cdn-引入"><a class="header-anchor" href="#二-编译源码-cdn-引入">¶</a>二、编译源码，CDN 引入</h3>
<p>  拉取 <a href="https://github.com/ElemeFE/element" target="_black">element-ui</a> 源码(master 分支)，在<code>package.json</code>中查找如何编译出 js，注意<code>dist</code>命令。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/element-cdn-global-settings/2.png" alt></p>
<p>  在<code>/build/bin/build-entry.js</code>中将：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.prototype.$ELEMENT = &#123;</span><br><span class="line">  size: opts.size || &apos;&apos;,</span><br><span class="line">  zIndex: opts.zIndex || 2000</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.prototype.$ELEMENT = &#123;</span><br><span class="line">  size: opts.size || &apos;small&apos;,</span><br><span class="line">  zIndex: opts.zIndex || 3000</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>  接着执行<code>npm run dist</code>，上传<code>/lib/index.js</code>到 OSS 并引用，再次刷新，页面上的按钮就变小啦！</p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><code>npm run dist</code>也会打包样式文件</li>
<li>至于如何在众多命令中使用正确合适的命令，可以通过全局搜索<code>Vue.prototype.$ELEMENT</code>，一层一层地去发现查找到的各个文件之间的关联，不难发现<code>/src/index.js</code>中的代码是依据<code>build-entry.js</code>来生成的。</li>
</ul>
</blockquote>
<h3 id="三-类似随笔"><a class="header-anchor" href="#三-类似随笔">¶</a>三、类似随笔</h3>
<p><a href="https://liuxianyu.cn/article/build-element-ui.html" target="_black">通过 CDN 引入 element-ui 时，如何改变其主题色</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>Element UI</tag>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 项目中使用友盟埋点</title>
    <url>/article/vue-umeng.html</url>
    <content><![CDATA[<p>  产品给用户使用后，想要感知项目的 PV（浏览次数）、UV（独立访客），可以使用第三方埋点，这里记录的是 Vue 项目（hash 路由）基于友盟的埋点方法，包含事件统计。</p>
<a id="more"></a>
<h3 id="一-pv-uv"><a class="header-anchor" href="#一-pv-uv">¶</a>一、PV、UV</h3>
<p>  新建一个<code>/src/mixins/mixUmeng.js</code>文件，内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="comment">/******************* 友盟埋点 *******************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SITE_ID = <span class="number">1234567890</span> <span class="comment">// 替换成自己的站点ID          </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">      script.src = <span class="string">`https://v1.cnzz.com/z_stat.php?id=<span class="subst">$&#123; SITE_ID &#125;</span>&amp;web_id=<span class="subst">$&#123; SITE_ID &#125;</span>`</span></span><br><span class="line">      script.language = <span class="string">'JavaScript'</span></span><br><span class="line">      script.id = <span class="string">'cnzz'</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  接下来在<code>App.vue</code>中引入该 mixins 即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  import mixUmeng from &apos;@/mixins/mixUmeng&apos;</span><br><span class="line">  </span><br><span class="line">  export default &#123;</span><br><span class="line">    mixins: [mixUmeng]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="二-事件统计"><a class="header-anchor" href="#二-事件统计">¶</a>二、事件统计</h3>
<p>  事件埋点可用来统计页面上的一些交互动作，如播放、暂停、跳往第三方页面前的次数统计等。友盟事件统计官方文档链接：<a href="https://open.cnzz.com/a/api/trackevent/" target="_black">https://open.cnzz.com/a/api/trackevent</a>。<br>
使用 <a href="https://cn.vuejs.org/v2/guide/custom-directive.html#ad" target="_black">vue 的自定义指令</a> 来注册一下埋点指令<code>v-log</code>，如下：</p>
<p>  新建一个 /src/utils/directive/eventLog.js 文件，内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***************** 埋点自定义指令 *******************/</span></span><br><span class="line"><span class="comment">// readme: https://open.cnzz.com/a/api/trackevent/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install (Vue) &#123;</span><br><span class="line">    Vue.directive(<span class="string">'log'</span>, &#123;</span><br><span class="line">      bind (el, binding) &#123;</span><br><span class="line">        el.addEventListener(<span class="string">'click'</span>, () =&gt; &#123; <span class="built_in">window</span>._czc.push([<span class="string">'_trackEvent'</span>, ...binding.value]) &#125;, <span class="literal">false</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      unbind (el) &#123;</span><br><span class="line">        el.removeEventListener(<span class="string">'click'</span>, () =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">'remove'</span>) &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  在<code>main.js</code>中引用该文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> eventLog <span class="keyword">from</span> <span class="string">'@utils/directive/eventLog.js'</span></span><br><span class="line">Vue.use(eventLog)</span><br></pre></td></tr></table></figure>
<p>  接下来在 dom 元素加上自定义指令：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">plain</span> <span class="attr">type</span>=<span class="string">"info"</span> <span class="attr">:disabled</span>=<span class="string">"cameraStatus !== 'ready'"</span> @<span class="attr">click</span>=<span class="string">"startCamera"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-log</span>=<span class="string">"['H5 页面调用摄像头与拾音器', '开始']"</span>&gt;</span>开 始<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>v-log 后的数组最少需要两个元素，否则统计不到该事件，友盟默认3个</strong></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>埋点</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PhotoShop 把图片裁剪成圆形</title>
    <url>/article/ps-img-round.html</url>
    <content><![CDATA[<p>  最近经常使用 logo，但是给到的不是圆形，本着学习和做笔记的态度，记录一下使用 PS 把图片裁剪成圆形。</p>
<a id="more"></a>
<h4 id="一-前后效果对比"><a class="header-anchor" href="#一-前后效果对比">¶</a>一、前后效果对比</h4>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/ps-img-round/1.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/ps-img-round/2.png" alt></div></div></div></div>
<h4 id="二-操作步骤"><a class="header-anchor" href="#二-操作步骤">¶</a>二、操作步骤</h4>
<p>  1、PS 打开需要处理的图片，在左侧工具栏，选择椭圆选框工具</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/ps-img-round/3.png" alt></p>
<p>  2、按住 shift 可以画圆，框出需要的部位，如果贴边的话 PS 会有提示线</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/ps-img-round/4.png" alt></p>
<p>  3、按 ⌘ + J 拷贝图层（图层 -&gt; 新建 -&gt; 通过拷贝的图层），并删除之前的图层</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/ps-img-round/5.png" alt></p>
<p>  4、保存即可</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/ps-img-round/6.png" alt></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx 部署 vue 项目</title>
    <url>/article/nginx-vue.html</url>
    <content><![CDATA[<p>  记录一下自己在阿里云服务器上部署 vue 项目的一些点。</p>
<a id="more"></a>
<p>  这里以 <a href="https://github.com/liuxy0551/my-vue" target="_blank" rel="noopener">my-vue</a> 为例进行打包部署，准备内容：服务器（阿里云 Cent OS）、域名（阿里云）。</p>
<h4 id="1-打包上传"><a class="header-anchor" href="#1-打包上传">¶</a>1、打包上传</h4>
<p>  将打包后的 dist 文件夹上传到服务器的<code>/mnt/projects/my-vue</code>路径下。</p>
<h4 id="2-安装-nginx"><a class="header-anchor" href="#2-安装-nginx">¶</a>2、安装 nginx</h4>
<p>  参考 <a href="https://liuxianyu.cn/article/cent-os-base.html#%E5%9B%9B-%E5%AE%89%E8%A3%85-nginx" target="_black">Cent OS 基础环境搭建 - 安装 nginx</a></p>
<h4 id="3-解析域名"><a class="header-anchor" href="#3-解析域名">¶</a>3、解析域名</h4>
<p><img src="https://images-hosting.liuxianyu.cn/posts/nginx-vue/1.png" alt></p>
<h4 id="4-配置-nginx"><a class="header-anchor" href="#4-配置-nginx">¶</a>4、配置 nginx</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /etc/nginx/conf.d</span><br><span class="line">vim my-vue.conf</span><br></pre></td></tr></table></figure>
<p>输入以下内容并保存：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen          80;</span><br><span class="line">    server_name     my-vue.liuxianyu.cn;</span><br><span class="line">    root            /mnt/projects/my-vue;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    location /api &#123;</span><br><span class="line">        client_max_body_size 15m;</span><br><span class="line">        proxy_pass http://localhost:8081/api;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>location /api</code>是通过 nginx 转发网络请求，无请求的项目可不添加。</p>
<h4 id="5-检查-重启-nginx"><a class="header-anchor" href="#5-检查-重启-nginx">¶</a>5、检查、重启 nginx</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 检测配置文件是否有语法错误，然后退出</span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 项目打包时自动把所有图片的本地路径改为 CDN 路径</title>
    <url>/article/vue-build-img-cdn.html</url>
    <content><![CDATA[<p>  vue-cli 3 + 在项目优化的时候，可以考虑把图片资源放到 CDN 上，减少对服务器带宽的压力。</p>
<a id="more"></a>
<p>  开发时，写的图片路径通常是相对路径，在 webpack 的配置中可以进行配置，配置后在打包时就可以自动将我们写的相对路径转换成 CDN 路径：<br>
<code>@/assets/images/logo.png</code>或<code>../../assets/images/logo.png</code> -&gt; <code>https://images-hosting.liuxianyu.cn/images</code>。</p>
<h4 id="1-vue-config-js"><a class="header-anchor" href="#1-vue-config-js">¶</a>1、vue.config.js</h4>
<ul>
<li>1、process.env.NODE_ENV 判断项目环境</li>
<li>2、相关选项写在了 url-loader 里, url-loader 的作用是将图片引用方式转换为 base64 的内联引用方式</li>
<li>3、配置 limit (默认 10000)，可使文件大小小于此 limit 值(单位为 byte)的文件转换为 base64 格式, 大于此 limit 的, 会执行 options 中的 fallback 配置项</li>
<li>4、fallback 默认值为 file-loader, 而且 url-loader 的 options 配置项也会被传递给 <a href="https://webpack.docschina.org/loaders/file-loader/#publicpath" target="_black">file-loader</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config</span><br><span class="line">      .module</span><br><span class="line">      .rule(<span class="string">"images"</span>)</span><br><span class="line">      .test(<span class="regexp">/\.(jpe?g|png|gif)$/i</span>)</span><br><span class="line">      .use(<span class="string">"url-loader"</span>)</span><br><span class="line">      .loader(<span class="string">"url-loader"</span>)</span><br><span class="line">      .options(&#123;</span><br><span class="line">        limit: <span class="number">10000</span>,</span><br><span class="line">        publicPath: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'https://images-hosting.liuxianyu.cn/images'</span> : <span class="string">''</span>,</span><br><span class="line">        outputPath: <span class="string">'img'</span>,</span><br><span class="line">        name: <span class="string">'[name].[ext]'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .end()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h4>
<p>  1、<a href="https://www.cnblogs.com/skura23/p/10825795.html" target="_black">配置vue项目将打包后图片文件的引用路径改为cdn路径?</a><br>
  2、<a href="https://webpack.docschina.org/loaders/url-loader/#fallback" target="_black">webpack url-loader</a><br>
  3、<a href="https://webpack.docschina.org/loaders/file-loader/#publicpath" target="_black">webpack file-loader</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>项目优化</category>
      </categories>
      <tags>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>微信分享第三方页面时设置标题和缩略图（非微信开发）</title>
    <url>/article/wechat-share-others.html</url>
    <content><![CDATA[<p>  之前做过微信的自定义分享，是基于微信开发，这次是钉钉内开发，分享页面时标题和缩略图有点问题，记录一下。</p>
<a id="more"></a>
<h3 id="一-非-vue-项目"><a class="header-anchor" href="#一-非-vue-项目">¶</a>一、非 vue 项目</h3>
<h4 id="1-标题"><a class="header-anchor" href="#1-标题">¶</a>1、标题</h4>
<ul>
<li>自动生成：获取当前页的 title</li>
<li>自定义：设置页面标题，也可以使用<code>document.title = '微信分享第三方页面时设置标题和缩略图（非微信开发）'</code>动态设置标题</li>
</ul>
<h4 id="2-缩略图"><a class="header-anchor" href="#2-缩略图">¶</a>2、缩略图</h4>
<ul>
<li>自动生成：默认取当前页面，从顶部开始，<code>高度为屏幕宽度 80%</code>的图片作为缩略图，若页面中没有符合该规则的图片，则显示灰色的链接 icon</li>
<li>自定义：在 body 标签的最前面放入一张<code>高度为屏幕宽度 80%</code>的正方形图片，放在 body 标签的最前面。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"position:fixed;width:80%;opacity:0;z-index:-1"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">src</span>=<span class="string">"http://zju123.oss-cn-hangzhou.aliyuncs.com/zju_graduate/images/zju-logo.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="二-vue-项目"><a class="header-anchor" href="#二-vue-项目">¶</a>二、vue 项目</h3>
<p>  基于<code>vue-cli 3.x +</code>，在<code>public/index.html</code>中的 head 中设置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"庆祝中国科学院海洋研究所建所70周年"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:title"</span> <span class="attr">content</span>=<span class="string">"庆祝中国科学院海洋研究所建所70周年"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:image"</span> <span class="attr">content</span>=<span class="string">"http://159.226.158.199/media/logo.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:description"</span> <span class="attr">content</span>=<span class="string">"庆祝中国科学院海洋研究所建所70周年"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>庆祝中国科学院海洋研究所建所70周年<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong><br>
1、标题长度尽量不要超过15个字<br>
2、内容简介尽量不要超过30个字，不能含敏感词违规字眼</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>微信开发</category>
      </categories>
      <tags>
        <tag>h5</tag>
      </tags>
  </entry>
  <entry>
    <title>跳到钉钉并打开指定 URL</title>
    <url>/article/dingtalk-open-url.html</url>
    <content><![CDATA[<p>  平常公司开发中一直围绕钉钉，这里记录一下如何在浏览器访问特定地址可以跳到钉钉并打开指定 URL，适用部分业务场景。</p>
<a id="more"></a>
<h4 id="1-移动端"><a class="header-anchor" href="#1-移动端">¶</a>1、移动端</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">'https://www.baidu.com/'</span></span><br><span class="line">location.href = <span class="string">`http://qr.dingtalk.com/page/link?url=<span class="subst">$&#123; <span class="built_in">encodeURIComponent</span>(url) &#125;</span>`</span></span><br></pre></td></tr></table></figure>
<h4 id="2-pc-端"><a class="header-anchor" href="#2-pc-端">¶</a>2、PC 端</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">'https://www.baidu.com/'</span></span><br><span class="line">location.href = <span class="string">`dingtalk://dingtalkclient/page/link?url=<span class="subst">$&#123; <span class="built_in">encodeURIComponent</span>(url) &#125;</span>`</span></span><br></pre></td></tr></table></figure>
<h4 id="3-a-href-https-developers-dingtalk-com-document-app-message-link-description-1-title-6ld-qfs-yi0-target-black-消息链接在pc-客户端侧边栏打开-a"><a class="header-anchor" href="#3-a-href-https-developers-dingtalk-com-document-app-message-link-description-1-title-6ld-qfs-yi0-target-black-消息链接在pc-客户端侧边栏打开-a">¶</a>3、<a href="https://developers.dingtalk.com/document/app/message-link-description-1/title-6ld-qfs-yi0" target="_black">消息链接在<code>PC 客户端</code>侧边栏打开</a></h4>
<p>  在<code>PC 客户端</code>点击消息中的 URL 链接时，希望控制链接的打开方式，可以使用以下方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">'https://www.baidu.com/'</span></span><br><span class="line"><span class="string">`dingtalk://dingtalkclient/page/link?url=<span class="subst">$&#123; <span class="built_in">encodeURIComponent</span>(url) &#125;</span>&amp;pc_slide=true`</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">url</td>
<td style="text-align:center">表示要打开的链接，必须urlEncode</td>
</tr>
<tr>
<td style="text-align:center">pc_slide</td>
<td style="text-align:center">true 表示在<code>PC 客户端</code>侧边栏打开，false 表示在浏览器打开</td>
</tr>
</tbody>
</table>
<h4 id="4-a-href-https-developers-dingtalk-com-document-app-message-link-description-1-title-ffd-028-66i-target-black-消息链接在pc-客户端工作台打开-a"><a class="header-anchor" href="#4-a-href-https-developers-dingtalk-com-document-app-message-link-description-1-title-ffd-028-66i-target-black-消息链接在pc-客户端工作台打开-a">¶</a>4、<a href="https://developers.dingtalk.com/document/app/message-link-description-1/title-ffd-028-66i" target="_black">消息链接在<code>PC 客户端</code>工作台打开</a></h4>
<p>  当消息中的 URL 链接是某个微应用链接时，希望在<code>PC 客户端</code>工作台打开，可以使用以下方式:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const url = &apos;https://www.baidu.com/&apos;</span><br><span class="line">`dingtalk://dingtalkclient/action/openapp?corpid=$&#123; 免登企业 corpId &#125;&amp;container_type=work_platform&amp;app_id=0_$&#123; 应用 agentid &#125;&amp;redirect_type=jump&amp;redirect_url=$&#123; encodeURIComponent(url) &#125;`</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">corpid</td>
<td style="text-align:center">表示免登微应用用户的所属企业</td>
</tr>
<tr>
<td style="text-align:center">container_type</td>
<td style="text-align:center">表示使用哪种方式打开链接  work_platform 表示用工作台打开</td>
</tr>
<tr>
<td style="text-align:center">app_id</td>
<td style="text-align:center">由数字 0、下划线、agentid 拼接组成；agentid 是企业内部应用 id，<a href="https://ding-doc.dingtalk.com/doc#/bgb96b/mzd9qg/M753O" target="_black">获取 agentid 查看文档</a></td>
</tr>
<tr>
<td style="text-align:center">redirect_type</td>
<td style="text-align:center">只能填写 jump</td>
</tr>
<tr>
<td style="text-align:center">redirect_url</td>
<td style="text-align:center">表示要跳转的地址，必须 urlEncode</td>
</tr>
</tbody>
</table>
<p><a href="https://developers.dingtalk.com/document/app/message-link-description" target="_black">消息链接说明</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>钉钉开发</category>
      </categories>
      <tags>
        <tag>钉钉开发</tag>
      </tags>
  </entry>
  <entry>
    <title>ngrok 出现 Invalid Host header 的解决方案</title>
    <url>/article/ngrok-disable-host-check.html</url>
    <content><![CDATA[<p>  最近有个公司的甲方拿了个项目来让我们改改再用，不是熟悉的 vue 项目，记录一些点。</p>
<a id="more"></a>
<p>  使用 ngrok 工具，在浏览器访问给出的地址，出现了<code>Invalid Host header</code>字样。这是因为新版的 webpack-dev-server 出于安全考虑，默认检查 hostname，如果 hostname 不是配置内的就不能访问。</p>
<h3 id="一-ngrok-com"><a class="header-anchor" href="#一-ngrok-com">¶</a>一、<a href="http://ngrok.com" target="_blank" rel="noopener">ngrok.com</a></h3>
<ul>
<li>优点：启动方便</li>
<li>缺点：网速慢，不能自定义域名</li>
</ul>
<p>  官网的工具包链接: <a href="https://pan.baidu.com/s/1r8noo1iQbEt3DJJRkdJhbQ" target="_black">https://pan.baidu.com/s/1r8noo1iQbEt3DJJRkdJhbQ</a>  密码:<code>vcvj</code></p>
<h3 id="二-ngrok-cc"><a class="header-anchor" href="#二-ngrok-cc">¶</a>二、<a href="http://ngrok.cc" target="_blank" rel="noopener">ngrok.cc</a></h3>
<ul>
<li>优点：网速好一点，自定义域名</li>
<li>缺点：配置麻烦</li>
</ul>
<h3 id="三-解决办法"><a class="header-anchor" href="#三-解决办法">¶</a>三、解决办法</h3>
<p>  因为不是熟悉的 vue 项目，所以记录一下，vue 项目中解决较为简单，不做赘述。</p>
<h4 id="1-修改-node-modules"><a class="header-anchor" href="#1-修改-node-modules">¶</a>1、修改 node_modules</h4>
<p>  进入<code>/node_modules/_webpack-dev-server@2.11.5@webpack-dev-server/lib</code>，在<code>Server.js</code>中查找，将</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.disableHostCheck) <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<p>  改为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<p>  即可，不对 hostname 做检查就返回通过。</p>
<h4 id="2-修改启动命令推荐"><a class="header-anchor" href="#2-修改启动命令推荐">¶</a>2、修改启动命令<code>推荐</code></h4>
<p>  修改 script 中的启动命令，添加参数：<code>--disableHostCheck=true</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;npm run development&quot;,</span><br><span class="line">    &quot;development&quot;: &quot;cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,</span><br><span class="line">    &quot;watch&quot;: &quot;cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,</span><br><span class="line">    &quot;watch-poll&quot;: &quot;npm run watch -- --watch-poll&quot;,</span><br><span class="line">    &quot;hot&quot;: &quot;cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --disableHostCheck=true --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,</span><br><span class="line">    &quot;prod&quot;: &quot;npm run production&quot;,</span><br><span class="line">    &quot;production&quot;: &quot;cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ngrok</category>
      </categories>
      <tags>
        <tag>ngrok</tag>
      </tags>
  </entry>
  <entry>
    <title>PC 和移动端实现长按效果</title>
    <url>/article/long-press.html</url>
    <content><![CDATA[<p>  最近公司有个项目甲方想要个点赞的效果，有长按事件的身影，记录一下。</p>
<a id="more"></a>
<h4 id="1-实现效果"><a class="header-anchor" href="#1-实现效果">¶</a>1、实现效果</h4>
<p><img src="https://images-hosting.liuxianyu.cn/posts/long-press/1.gif" alt></p>
<h4 id="2-html"><a class="header-anchor" href="#2-html">¶</a>2、HTML</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"thumb-up-icon"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">oncontextmenu</span>=<span class="string">'self.event.returnValue=false'</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">touchstart</span>=<span class="string">"addStart"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">touchend</span>=<span class="string">"addStop"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">touchmove</span>=<span class="string">"addStop"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">mousedown</span>=<span class="string">"addStart"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">mouseup</span>=<span class="string">"addStop"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">mouseout</span>=<span class="string">"addStop"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click</span>=<span class="string">"thumbUp"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><code>oncontextmenu='self.event.returnValue=false'</code>禁用右键点击</li>
<li><code>touch</code>是移动端的方法</li>
<li><code>mouse</code>是 PC 端的方法</li>
</ul>
</blockquote>
<h4 id="3-script"><a class="header-anchor" href="#3-script">¶</a>3、Script</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> ThumbsUpAni <span class="keyword">from</span> <span class="string">'../portal/canvas'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'ThumbUp'</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        thumbsUpAni: <span class="literal">null</span>,</span><br><span class="line">        timer: <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="comment">// 添加 icon</span></span><br><span class="line">      thumbUp () &#123;</span><br><span class="line">        <span class="keyword">this</span>.thumbsUpAni.start()</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 持续添加 icon</span></span><br><span class="line">      addStart () &#123;</span><br><span class="line">        <span class="keyword">this</span>.timer &amp;&amp; <span class="keyword">this</span>.addStop()</span><br><span class="line">        <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.thumbUp()</span><br><span class="line">        &#125;, <span class="number">80</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 停止添加 icon</span></span><br><span class="line">      addStop () &#123;</span><br><span class="line">        clearInterval(<span class="keyword">this</span>.timer)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      <span class="keyword">this</span>.thumbsUpAni = <span class="keyword">new</span> ThumbsUpAni()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-附件"><a class="header-anchor" href="#4-附件">¶</a>4、附件</h4>
<p>1、点赞的 canvas 文件：<a href="https://github.com/liuxy0551/liuxy0551.github.io/blob/master/assets/posts/long-press/canvas.js" target="_black">canvas.js</a><br>
2、点赞的组件代码：<a href="https://github.com/liuxy0551/liuxy0551.github.io/blob/master/assets/posts/long-press/ThumbUp.vue" target="_black">ThumbUp.vue</a><br>
3、点赞图标：<a href="https://images-hosting.liuxianyu.cn/posts/long-press/thumb-up.png" target="_black">thumb-up.png</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令（十）—— github Fork 的代码如何更新并新建 pull request</title>
    <url>/article/git-order-j.html</url>
    <content><![CDATA[<p>  git 常用命令系列随笔会记录一些用到的常见命令，这里记录一下<code>github Fork 的代码如何更新并新建 pull request</code>：</p>
<a id="more"></a>
<h3 id="1-拉取-fork-后的代码"><a class="header-anchor" href="#1-拉取-fork-后的代码">¶</a>1、拉取 Fork 后的代码</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/liuxy0551/vue-base-structrue.git</span><br></pre></td></tr></table></figure>
<h3 id="2-将原项目和本地项目关联"><a class="header-anchor" href="#2-将原项目和本地项目关联">¶</a>2、将原项目和本地项目关联</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add author https://github.com/vue-quick-framework/vue-base-structrue.git</span><br></pre></td></tr></table></figure>
<p>  此时可以使用<code>git remote -v</code>查看远程仓库信息：<br>
<img src="https://images-hosting.liuxianyu.cn/posts/git-order/2.png" alt></p>
<h3 id="3-fetch-原项目的最新代码到本地"><a class="header-anchor" href="#3-fetch-原项目的最新代码到本地">¶</a>3、fetch 原项目的最新代码到本地</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch author</span><br></pre></td></tr></table></figure>
<p>  从原项目 fetch 来的内容，会被存储在本地分支<code>author/master</code></p>
<h3 id="4-合并author-master和master"><a class="header-anchor" href="#4-合并author-master和master">¶</a>4、合并<code>author/master</code>和<code>master</code></h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge author/master</span><br></pre></td></tr></table></figure>
<h3 id="5-推送到-fork-的项目中"><a class="header-anchor" href="#5-推送到-fork-的项目中">¶</a>5、推送到 fork 的项目中</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<h3 id="6-新建-pull-request"><a class="header-anchor" href="#6-新建-pull-request">¶</a>6、新建 pull request</h3>
<p>  在自己的项目中，点击<code>New pull request</code> -&gt; <code>Create pull request</code></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 CDN 引入 element-ui 时，如何改变其主题色</title>
    <url>/article/build-element-ui.html</url>
    <content><![CDATA[<p>  最近公司有个项目，使用了 element-ui，而且使用了自己项目的主题色 —— 橙色。<br>
  按照 <a href="https://element.eleme.cn/#/zh-CN/component/custom-theme#zai-xiang-mu-zhong-gai-bian-scss-bian-liang" target="_blank">Element UI -&gt; 自定义主题 -&gt; 在项目中改变 SCSS 变量</a> 中的设置就可以把项目中的 element-ui 的主题色改为橙色了。</p>
<a id="more"></a>
<p>  然而，在我根据 <a href="https://liuxianyu.cn/article/vue-cli3-cdn.html" target="_black">前端项目优化之旅（六）—— 引入并使用 CDN</a> 优化项目的时候，通过 CDN 引入 element-ui 的 js 和 css 文件(<code>/element-ui/lib/theme-chalk/index.css</code>)，这个时候问题就来了，项目的主题色全变为默认的蓝色了，吓死人了。赶紧来解决吧：</p>
<h3 id="一-第一次尝试"><a class="header-anchor" href="#一-第一次尝试">¶</a>一、第一次尝试</h3>
<p>  element-ui 的 css 文件是经过编译的，<code>$--color-primary</code>早已被编译成了蓝色(#409EFF)，那就全局替换吧，替换成我的橙色，上传 OSS，一气呵成。<br>
  一刷新，咦，怎么按钮边线有股淡淡的蓝色，到其他页面一看，事情并不简单，一片淡蓝色，想起主题色带透明的颜色都没有进行替换。如果替换的话，还得挨个计算加上透明度后色号是多少再替换，还可能遗漏，而且很显然，这不是程序员干的事儿。那么，第二种解法来了：</p>
<h3 id="二-第二次尝试-正解"><a class="header-anchor" href="#二-第二次尝试-正解">¶</a>二、第二次尝试 <code>正解</code></h3>
<p>  好嘛，你是经过编译的嘛，来，编译你。拉取 <a href="https://github.com/ElemeFE/element" target="_black">element-ui</a> 源码(master 分支)。拿到一个项目，如何直击灵魂呢，查看<code>package.json</code>即可，还别说，大厂就是大厂，代码写得让人很舒服。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/build-element-ui/1.png" alt></p>
<p>  可以看到，script 中的<code>build:theme</code>就是我们想要的命令，命令行先走一个试一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run build:theme</span><br></pre></td></tr></table></figure>
<p>  报错了，仔细一看，sass-loader 要求 node 版本为 11.x 了，那当前的 13.x 咋办呢，学一下 <a href="https://liuxianyu.cn/article/node-n.html" target="_blank">Mac OS 中管理 node 版本的工具 —— n</a> 吧。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/build-element-ui/2.png" alt></p>
<p>  整好环境后，再来一次吧，结果还凑合。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/build-element-ui/3.png" alt></p>
<p>  那找到 element-ui 设置的<code>$--color-primary</code>改为我的橙色再编译一下，不就可以了嘛，机智，说干就干。全局搜索<code>$--color-primary</code>，发现 element-ui 是在<code>/element-ui/packages/theme-chalk/src/common/var.scss</code>中设置主题色的，找到<code>$--color-primary</code>，将色号从默认的<code>#409EFF</code>改为橙色就可以了，连带着透明度的颜色变量都会在编译后改变，SASS 的美妙。</p>
<p>  这个时候再<code>npm run build:theme</code>一次，上传<code>/element-ui/lib/theme-chalk/index.css</code>到 OSS，再次刷新，就是特别好看的橙色啦!</p>
<h3 id="三-新遇到的问题"><a class="header-anchor" href="#三-新遇到的问题">¶</a>三、新遇到的问题</h3>
<p>  最近再次编译的时候发现会报如下错误：意思是<code>postcss</code>版本高了，引用需要修改，将<code>/packages/theme-thalk/gulpfile.js</code>中的<code>browsers</code>改为<code>overrideBrowserslist</code>再次编译即可。<br>
<img src="https://images-hosting.liuxianyu.cn/posts/build-element-ui/4.png" alt></p>
<h3 id="四-类似随笔"><a class="header-anchor" href="#四-类似随笔">¶</a>四、类似随笔</h3>
<p><a href="https://liuxianyu.cn/article/element-cdn-global-settings.html" target="_black">通过 CDN 引入 element-ui 时，如何改变其全局配置 (size, z-index)</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS 中的 brew 长时间停留在 Updating Homebrew 这个步骤</title>
    <url>/article/mac-brew.html</url>
    <content><![CDATA[<p>  国内的网络环境对于 brew 不太友好，使用 brew 命令时经常会卡在 Updating Homebrew 这个步骤，记录一下处理方法。</p>
<a id="more"></a>
<h3 id="一-临时取消本次更新"><a class="header-anchor" href="#一-临时取消本次更新">¶</a>一、临时取消本次更新</h3>
<p>  按住 control + c 取消本次更新操作，按下快捷键后会出现<code>^C</code>，代表已经取消了<code>Updating Homebrew</code>操作，大概一两秒后就会执行我们需要进行的安装操作了。</p>
<h3 id="二-使用国内的镜像源进行加速-阿里云"><a class="header-anchor" href="#二-使用国内的镜像源进行加速-阿里云">¶</a>二、使用国内的镜像源进行加速（阿里云）</h3>
<p>  执行 brew 命令安装软件的时候，跟以下三部分有关：<code>本体 brew.git</code>、<code>核心 homebrew-core.git</code>、<code>二进制预编译包 homebrew-bottles</code></p>
<h4 id="1-替换-还原-brew-git-仓库地址"><a class="header-anchor" href="#1-替换-还原-brew-git-仓库地址">¶</a>1、替换 / 还原 brew.git 仓库地址</h4>
<p>  1、替换成阿里云的 brew.git 仓库地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd "$(brew --repo)"</span><br><span class="line">git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git</span><br></pre></td></tr></table></figure>
<p>  2、还原成官方的 brew.git 仓库地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd "$(brew --repo)"</span><br><span class="line">git remote set-url origin https://github.com/Homebrew/brew.git</span><br></pre></td></tr></table></figure>
<h4 id="2-替换-还原-homebrew-core-git-仓库地址"><a class="header-anchor" href="#2-替换-还原-homebrew-core-git-仓库地址">¶</a>2、替换 / 还原 homebrew-core.git 仓库地址</h4>
<p>  1、替换成阿里云的 homebrew-core.git 仓库地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"</span><br><span class="line">git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>
<p>  2、还原成官方的 homebrew-core.git 仓库地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"</span><br><span class="line">git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>
<h4 id="3-替换-还原-homebrew-bottles-仓库地址-zsh"><a class="header-anchor" href="#3-替换-还原-homebrew-bottles-仓库地址-zsh">¶</a>3、替换 / 还原 homebrew-bottles 仓库地址（zsh）</h4>
<p>  1、替换成阿里云的 homebrew-bottles 仓库地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>  2、还原成官方的 homebrew-bottles 仓库地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span></span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>  刷新源的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure>
<h3 id="三-附录-中科大-清华大学"><a class="header-anchor" href="#三-附录-中科大-清华大学">¶</a>三、附录（中科大、清华大学）</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 替换brew.git:</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 中国科大:</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清华大学:</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 替换homebrew-core.git:</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 中国科大:</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清华大学:</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 替换homebrew-bottles:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 中国科大:</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bash_profile</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清华大学:</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bash_profile</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Mac OS</category>
      </categories>
      <tags>
        <tag>Mac OS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS 中管理 node 版本的工具 —— n</title>
    <url>/article/node-n.html</url>
    <content><![CDATA[<p>  有时候项目中需要老版本的 node 支持，所以记录一下如何通过 <a href="https://github.com/tj/n" target="_blank" rel="noopener">n</a> 管理多个 node 版本。</p>
<a id="more"></a>
<p><img src="https://images-hosting.liuxianyu.cn/posts/node-n/1.gif" alt></p>
<p>  <a href="https://nodejs.org/en/download/releases/" target="_blank" rel="noopener">node 以往的版本</a></p>
<h3 id="一-管理工具-n"><a class="header-anchor" href="#一-管理工具-n">¶</a>一、管理工具 —— n</h3>
<h4 id="1-通过-brew-安装n："><a class="header-anchor" href="#1-通过-brew-安装n：">¶</a>1、通过 brew 安装<code>n</code>：</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install n</span><br><span class="line">n -V</span><br></pre></td></tr></table></figure>
<h4 id="2-通过-npm-安装n："><a class="header-anchor" href="#2-通过-npm-安装n：">¶</a>2、通过 npm 安装<code>n</code>：</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -g n</span><br><span class="line">n -V</span><br></pre></td></tr></table></figure>
<h3 id="二-使用第三方镜像"><a class="header-anchor" href="#二-使用第三方镜像">¶</a>二、使用第三方镜像</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/node-n/2.png" alt></p>
<p>  n 安装 node 版本时是从 nodejs 官网进行下载的，鉴于国内的网络环境，可以配置使用第三方镜像：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc 或 ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>在上述配置文件尾添加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># node n 第三方镜像</span><br><span class="line">export N_NODE_MIRROR=https://npmmirror.com/mirrors/node</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc 或 ~/.bashrc</span><br></pre></td></tr></table></figure>
<h3 id="三-常用命令"><a class="header-anchor" href="#三-常用命令">¶</a>三、常用命令</h3>
<h4 id="1-安装-激活版本："><a class="header-anchor" href="#1-安装-激活版本：">¶</a>1、安装、激活版本：</h4>
<p>  只需执行<code>n &lt;version&gt;</code>即可安装对应版本的 node。如果<code>&lt;version&gt;</code>已经安装（通过 n），n 将激活该版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo n 16.20.2</span><br></pre></td></tr></table></figure>
<h4 id="2-查看当前安装的版本："><a class="header-anchor" href="#2-查看当前安装的版本：">¶</a>2、查看当前安装的版本：</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">n ls</span><br></pre></td></tr></table></figure>
<h4 id="3-选取已安装的版本："><a class="header-anchor" href="#3-选取已安装的版本：">¶</a>3、选取已安装的版本：</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">n</span><br></pre></td></tr></table></figure>
<p>  键盘上下键选择版本后回车确认，mac 偶尔有权限问题，执行 <code>sudo n</code></p>
<h4 id="4-运行脚本时选择版本："><a class="header-anchor" href="#4-运行脚本时选择版本：">¶</a>4、运行脚本时选择版本：</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">n use 16.20.2 app.js</span><br></pre></td></tr></table></figure>
<h4 id="6-删除版本："><a class="header-anchor" href="#6-删除版本：">¶</a>6、删除版本：</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo n rm 12.20.2</span><br><span class="line">sudo n rm v12.20.2</span><br><span class="line">sudo n - 12.20.2</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong><br>
<strong>如果删除不成功，可进入<code>/usr/local/n/versions/node</code>目录删除版本</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local/n/versions/node</span><br><span class="line">sudo rm -rf 12.20.2</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p>  以下两篇结合着看：<br>
  <a href="https://blog.csdn.net/wmzy1067111110/article/details/52963856" target="_black">linux 下使用&quot;n&quot;配置使用淘宝镜像</a></p>
]]></content>
      <categories>
        <category>node</category>
        <category>版本管理</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>Mac OS</tag>
      </tags>
  </entry>
  <entry>
    <title>WebStorm、vscode 配置识别 vue 项目的别名 alias @</title>
    <url>/article/webstorm-vscode-alias.html</url>
    <content><![CDATA[<p>  记录一下如何配置可以让 WebStorm 和 vscode 识别 Vue CLI 3 项目中的别名 alias @。</p>
<a id="more"></a>
<h3 id="一-webstorm"><a class="header-anchor" href="#一-webstorm">¶</a>一、WebStorm</h3>
<h4 id="1-全局设置-推荐"><a class="header-anchor" href="#1-全局设置-推荐">¶</a>1、全局设置 <code>推荐</code></h4>
<p>  可以在 WebStorm 的项目空间中添加一个<code>alias.config.js</code>文件，然后使用该文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/Users/liuyi/Library/Preferences/WebStorm2019.3/alias.config.js</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 由于 Vue CLI 3 不再使用传统的 webpack 配置文件，故 WebStorm 无法识别别名</span></span><br><span class="line"><span class="comment"> * 本文件对项目无任何作用，仅作为 WebStorm 识别别名用</span></span><br><span class="line"><span class="comment"> * 进入 WebStorm preferences -&gt; Language &amp; Framework -&gt; JavaScript -&gt; Webpack，选择这个文件即可</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">dir</span> =&gt;</span> <span class="built_in">require</span>(<span class="string">'path'</span>).join(__dirname, dir)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@'</span>: resolve(<span class="string">'src'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/webstorm-vscode-alias/1.png" alt></p>
<h4 id="2-项目单独设置"><a class="header-anchor" href="#2-项目单独设置">¶</a>2、项目单独设置</h4>
<p>  参考 <a href="https://juejin.im/post/5c9477ad6fb9a070ce31b050" target="_blank" rel="noopener">在 WebStorm 中，配置能够识别 Vue CLI 3 创建的项目的别名 alias @</a><br>
  进入 WebStorm -&gt; Preferences -&gt; Language &amp; Framework -&gt; JavaScript -&gt; Webpack，选择<code>项目目录\node_modules\@vue\cli-service\webpack.config.js</code>即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/Users/liuyi/Desktop/Projects/Shengya/zjedu-sky-admin/node_modules/@vue/cli-service/webpavk.config.js</span><br></pre></td></tr></table></figure>
<h3 id="二-vscode"><a class="header-anchor" href="#二-vscode">¶</a>二、vscode</h3>
<p>  vscode 中 vue 项目的<code>@</code>不会提示，在根目录添加一个<code>jsconfig.json</code>文件，即可在 script 标签中使用<code>@</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    &quot;baseUrl&quot;: &quot;.&quot;,</span><br><span class="line">    &quot;paths&quot;: &#123;</span><br><span class="line">      &quot;@/*&quot;: [&quot;src/*&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;target&quot;: &quot;ES6&quot;,</span><br><span class="line">    &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class="line">    &quot;allowSyntheticDefaultImports&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;include&quot;: [&quot;src/**/*&quot;],</span><br><span class="line">  &quot;exclude&quot;: [&quot;node_modules&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>WebStorm</tag>
      </tags>
  </entry>
  <entry>
    <title>eslint 的配置</title>
    <url>/article/eslintrc.html</url>
    <content><![CDATA[<p>  记录一下 eslint 的配置，不定时更新。</p>
<a id="more"></a>
<p>  参考：<a href="https://github.com/PanJiaChen/vue-element-admin/edit/master/.eslintrc.js" target="_blank" rel="noopener">https://github.com/PanJiaChen/vue-element-admin/edit/master/.eslintrc.js</a><br>
  中文注释可参考：<a href="https://blog.csdn.net/weixin_41767649/article/details/90115453" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41767649/article/details/90115453</a>。<br>
  腾讯云 eslint Rules（全量详解）：<a href="https://cloud.tencent.com/developer/chapter/12618" target="_black">https://cloud.tencent.com/developer/chapter/12618</a></p>
<h4 id="我的常用"><a class="header-anchor" href="#我的常用">¶</a>我的常用</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    node: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  extends: [</span><br><span class="line">    <span class="string">'plugin:vue/essential'</span>,</span><br><span class="line">    <span class="string">'@vue/standard'</span></span><br><span class="line">  ],</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    parser: <span class="string">'babel-eslint'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'no-console'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'dot-notation'</span>: [<span class="number">0</span>, &#123; <span class="attr">allowKeywords</span>: <span class="literal">true</span> &#125;], <span class="comment">// 支持 $refs['form]</span></span><br><span class="line">    <span class="string">'space-before-function-paren'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],  <span class="comment">// 方法名与括号之间没有空格</span></span><br><span class="line">    <span class="string">'template-curly-spacing'</span>: [<span class="number">2</span>, <span class="string">'always'</span>],  <span class="comment">// 模板字符串需要空格，$&#123; name &#125;</span></span><br><span class="line">    <span class="string">'no-useless-catch'</span>: <span class="string">'off'</span>,  <span class="comment">// 可以使用不必要的 catch 语句</span></span><br><span class="line">    <span class="string">'no-unused-vars'</span>: <span class="string">'off'</span>, <span class="comment">// 封装 js class 时可能需要</span></span><br><span class="line">    <span class="string">'no-async-promise-executor'</span>: <span class="string">'off'</span>, <span class="comment">// 将 async 函数做为 new Promise 的回调函数</span></span><br><span class="line">    <span class="string">'prefer-const'</span>: <span class="number">0</span>, <span class="comment">// 不使用 const</span></span><br><span class="line">    <span class="string">'vue/script-indent'</span>: [<span class="string">'error'</span>, <span class="number">2</span>, &#123; <span class="comment">// vue script 标签缩进设置，数字2表示统一缩进2个空格，数字1表示1倍缩进</span></span><br><span class="line">      <span class="string">'baseIndent'</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">'switchCase'</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">'ignores'</span>: []</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  overrides: [</span><br><span class="line">    &#123; <span class="comment">// vue script 标签缩进设置</span></span><br><span class="line">      <span class="string">"files"</span>: [<span class="string">"*.vue"</span>],</span><br><span class="line">      <span class="string">"rules"</span>: &#123;</span><br><span class="line">        <span class="string">"indent"</span>: <span class="string">"off"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>eslint</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>Prettier 的配置</title>
    <url>/article/prettierrc.html</url>
    <content><![CDATA[<p>  代码格式化插件，记录一下自定义配置。</p>
<a id="more"></a>
<h3 id="一-vscode-中使用-prettier"><a class="header-anchor" href="#一-vscode-中使用-prettier">¶</a>一、vscode 中使用 Prettier</h3>
<h4 id="1-安装插件"><a class="header-anchor" href="#1-安装插件">¶</a>1、安装插件</h4>
<p>  搜索并安装插件<code>Prettier - Code formatter</code></p>
<h4 id="2-添加配置文件"><a class="header-anchor" href="#2-添加配置文件">¶</a>2、添加配置文件</h4>
<p>  在项目根目录添加配置文件<code>.prettierrc</code>，如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"printWidth"</span>: <span class="number">140</span>,</span><br><span class="line">  <span class="attr">"semi"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"trailingComma"</span>: <span class="string">"none"</span>,</span><br><span class="line">  <span class="attr">"arrowParens"</span>: <span class="string">"avoid"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>序号</th>
<th>配置项</th>
<th>参数值</th>
<th>代表意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>printWidth</td>
<td>140</td>
<td>int，达到该宽度即换行</td>
</tr>
<tr>
<td>2</td>
<td>semi</td>
<td>false</td>
<td>bool，在语句末尾添加分号</td>
</tr>
<tr>
<td>3</td>
<td>singleQuote</td>
<td>true</td>
<td>bool，使用单引号而非双引号</td>
</tr>
<tr>
<td>4</td>
<td>trailingComma</td>
<td>‘none’</td>
<td>‘none’/‘es5’/‘all’，在任何可能的多行中输入尾逗号</td>
</tr>
<tr>
<td>5</td>
<td>arrowParens</td>
<td>‘avoid’</td>
<td>(x) =&gt; {} 箭头函数参数只有一个时是否要有小括号。avoid：省略括号</td>
</tr>
</tbody>
</table>
<h4 id="3-保存自动格式化代码-可选"><a class="header-anchor" href="#3-保存自动格式化代码-可选">¶</a>3、保存自动格式化代码 <code>可选</code></h4>
<p>  在<code>settings.json</code>中添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;editor.formatOnSave&quot;: false</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>H5 中的高德地图开发</title>
    <url>/article/h5-amap.html</url>
    <content><![CDATA[<p>  最近写了个浙大校庆的活动页 <a href="https://123.zju.edu.cn" target="_blank" rel="noopener">https://123.zju.edu.cn</a>，里面涉及到了一些高德地图的开发，记录一下。</p>
<a id="more"></a>
<h3 id="一-注册开发账号"><a class="header-anchor" href="#一-注册开发账号">¶</a>一、注册开发账号</h3>
<p>  公司项目一定要使用企业开发者，各类服务的调用配额会有很多差别。个人兴趣项目可以使用个人开发者账号。</p>
<h3 id="二-https"><a class="header-anchor" href="#二-https">¶</a>二、https</h3>
<p>  目前已经有很多浏览器禁止 http 站点使用定位，所以建议使用 https，同时使用 https 也是保障网站安全的一种手段。</p>
<h3 id="三-web-端-和-web-服务"><a class="header-anchor" href="#三-web-端-和-web-服务">¶</a>三、Web 端 和 Web 服务</h3>
<p>  Web 端是给 h5 页面使用的，Web 服务一般是给后端同学调用接口如：逆地理编码、搜索 POI 等。</p>
<h3 id="四-加载地图-js-文件"><a class="header-anchor" href="#四-加载地图-js-文件">¶</a>四、加载地图 js 文件</h3>
<p>  可以参考 <a href="https://liuxianyu.cn/article/load-js.html">动态加载 js 文件</a> 的写法，在 js 文件加载完毕后初始化地图。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 地图 js 动态加载</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadMap</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">  script.charset = <span class="string">'utf-8'</span></span><br><span class="line">  script.type = <span class="string">'text/javascript'</span></span><br><span class="line">  script.src = amapUrl</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> callback == <span class="string">'function'</span>) &#123;</span><br><span class="line">    script.onload = script.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.readyState || <span class="keyword">this</span>.readyState === <span class="string">"loaded"</span> || <span class="keyword">this</span>.readyState === <span class="string">"complete"</span>) &#123;   <span class="comment">// 动态 script 加载完毕</span></span><br><span class="line">        callback()</span><br><span class="line">        script.onload = script.onreadystatechange = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  head.appendChild(script)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mapStyle 是自定义地图</span></span><br><span class="line"><span class="keyword">let</span> mapConfig = &#123;</span><br><span class="line">  mapStyle: <span class="string">'amap://styles/a22f2eb96ee3725363b7bc7b0f162599'</span>,</span><br><span class="line">  zoom: <span class="number">4</span>,</span><br><span class="line">  zooms: [<span class="number">3</span>, <span class="number">6</span>],</span><br><span class="line">  features: [<span class="string">'bg'</span>, <span class="string">'road'</span>],     <span class="comment">// 'bg'（地图背景，必需）、'point'（POI点）、'road'（道路）、'building'（建筑物）</span></span><br><span class="line">  center: [<span class="string">'104.964785'</span>, <span class="string">'34.049395'</span>], <span class="comment">// 中国中心</span></span><br><span class="line">  viewMode: <span class="string">'3D'</span>,      <span class="comment">// 2D, 3D</span></span><br><span class="line">  pitch: <span class="number">30</span>            <span class="comment">// 仰角</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化地图</span></span><br><span class="line">loadMap(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.map = <span class="keyword">new</span> AMap.Map(<span class="string">'map'</span>, mapConfig)</span><br><span class="line">  <span class="keyword">this</span>.map.on(<span class="string">'complete'</span>, () =&gt; &#123;    <span class="comment">// 地图加载成功</span></span><br><span class="line">    <span class="comment">// 海量点</span></span><br><span class="line">    <span class="keyword">this</span>.loadMassMarks(<span class="keyword">this</span>.map).then(<span class="function"><span class="params">count</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.count = count</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><a href="https://lbs.amap.com/api/amap-ui/reference-amap-ui/mass-data/pointsimplifier" target="_blank" rel="noopener">PointSimplifier（海量点展示）</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 海量点</span></span><br><span class="line"><span class="keyword">async</span> loadMassMarks (map) &#123;</span><br><span class="line">  <span class="keyword">let</span> style = &#123; <span class="comment">// 设置样式对象</span></span><br><span class="line">    url: <span class="built_in">require</span>(<span class="string">'../assets/images/map/1.png'</span>),  <span class="comment">// 图标地址</span></span><br><span class="line">    size: <span class="keyword">new</span> AMap.Size(<span class="number">4</span>, <span class="number">4</span>),      <span class="comment">// 图标大小</span></span><br><span class="line">    anchor: <span class="keyword">new</span> AMap.Pixel(<span class="number">2</span>, <span class="number">2</span>)    <span class="comment">// 图标显示位置偏移量，基准点为图标左上角</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> massMarks = <span class="keyword">new</span> AMap.MassMarks([], &#123;</span><br><span class="line">    zIndex: <span class="number">5</span>,  <span class="comment">// 海量点图层叠加的顺序</span></span><br><span class="line">    alwaysRender: <span class="literal">false</span>,  <span class="comment">// 表示是否在拖拽缩放过程中实时重绘，默认true，建议超过10000的时候设置false</span></span><br><span class="line">    style</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绘制海量点</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.api.getLngLatAll()</span><br><span class="line">  <span class="keyword">if</span> (res.data.IP 城市定位data.url) &#123;</span><br><span class="line">    <span class="keyword">this</span>.api.getDataByUrl(res.data.data.url).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      massMarks.setData(res.data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    massMarks.setData(res.data.data.addr)</span><br><span class="line">  &#125;</span><br><span class="line">  massMarks.setMap(map)</span><br><span class="line">  <span class="keyword">return</span> res.data.data.count || <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="五-定位"><a class="header-anchor" href="#五-定位">¶</a>五、定位</h3>
<h4 id="1-精确定位"><a class="header-anchor" href="#1-精确定位">¶</a>1、精确定位</h4>
<p>  AMap.Geolocation, getCurrentPosition</p>
<h4 id="2-ip-城市定位"><a class="header-anchor" href="#2-ip-城市定位">¶</a>2、IP 城市定位</h4>
<p>  AMap.CitySearch, getLocalCity</p>
<h4 id="3-h5-自带的定位"><a class="header-anchor" href="#3-h5-自带的定位">¶</a>3、H5 自带的定位</h4>
<p>  navigator.geolocation.getCurrentPosition</p>
]]></content>
      <categories>
        <category>其他</category>
        <category>高德地图</category>
      </categories>
      <tags>
        <tag>h5</tag>
      </tags>
  </entry>
  <entry>
    <title>微信 H5 自动播放视频防止全屏</title>
    <url>/article/wechat-video-autoplay.html</url>
    <content><![CDATA[<p>  记录一下微信 H5 中如何防止自动播放视频时打开全屏。</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">ref</span>=<span class="string">"videoRef"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">controls</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">preload</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">:src</span>=<span class="string">"videoUrl"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">x5-video-player-type</span>=<span class="string">"h5-page"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">playsinline</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">x5-playsinline</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">webkit-playsinline</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>动态加载 js 文件</title>
    <url>/article/load-js.html</url>
    <content><![CDATA[<p>  记录一下 vue 中动态加载 js 文件的写法。</p>
<a id="more"></a>
<h3 id="一-load"><a class="header-anchor" href="#一-load">¶</a>一、load</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadJS</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">  script.charset = <span class="string">'utf-8'</span></span><br><span class="line">  script.type = <span class="string">'text/javascript'</span></span><br><span class="line">  script.src = <span class="string">'https://webapi.amap.com/ui/1.1/main-async.js'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> callback == <span class="string">'function'</span>) &#123;</span><br><span class="line">    script.onload = script.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 动态 script 加载完毕</span></span><br><span class="line">      <span class="keyword">if</span> (!script.readyState || script.readyState === <span class="string">"loaded"</span> || script.readyState === <span class="string">"complete"</span>) &#123;</span><br><span class="line">        callback()</span><br><span class="line">        script.onload = script.onreadystatechange = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  head.appendChild(script)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二-loaded"><a class="header-anchor" href="#二-loaded">¶</a>二、loaded</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js 加载完成</span></span><br><span class="line">loadJS(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'js 加载完成'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端项目优化之旅（六）—— 引入并使用 CDN</title>
    <url>/article/vue-cli3-cdn.html</url>
    <content><![CDATA[<p>  <code>前端项目优化之旅</code>系列随笔主要记录工作中遇到的一些优化方案，这里记录一下引入和使用 CDN 的过程。</p>
<a id="more"></a>
<h3 id="一-为什么"><a class="header-anchor" href="#一-为什么">¶</a>一、为什么</h3>
<p>  当引入的组件越来越多时，运用 webpack 打包后的 app.js 文件容易变得过大，对首屏加载很不友好。</p>
<h3 id="二-怎么办"><a class="header-anchor" href="#二-怎么办">¶</a>二、怎么办</h3>
<h4 id="1-package-json"><a class="header-anchor" href="#1-package-json">¶</a>1、package.json</h4>
<p>  在<code>package.json</code>中删除即将通过 CDN 引入的组件，主要在 dependencies 和 devDependencies 中，删除 node_modules 后重新安装</p>
<h4 id="2-vue-config-js"><a class="header-anchor" href="#2-vue-config-js">¶</a>2、vue.config.js</h4>
<p>  引入 CDN 文件并配置 webpack，可以有效缓解加载速度慢的问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    externals: &#123;</span><br><span class="line">      vue: <span class="string">'Vue'</span>,</span><br><span class="line">      <span class="string">'vue-router'</span>: <span class="string">'VueRouter'</span>,</span><br><span class="line">      vuex: <span class="string">'Vuex'</span>,</span><br><span class="line">      axios: <span class="string">'axios'</span>,</span><br><span class="line">      vant: <span class="string">'vant'</span>,</span><br><span class="line">      <span class="string">'element-ui'</span>: <span class="string">'ELEMENT'</span>,</span><br><span class="line">      <span class="string">'dingtalk-jsapi'</span>: <span class="string">'dd'</span>,</span><br><span class="line">      echarts: <span class="string">'echarts'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> cdn = &#123;</span><br><span class="line">      css: [</span><br><span class="line">        <span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/vant/index.css'</span>,</span><br><span class="line">        <span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/element-ui/element-ui-index.css'</span></span><br><span class="line">      ],</span><br><span class="line">      js: [</span><br><span class="line">        process.env.NODE_ENV === <span class="string">'development'</span> ? <span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/vue/v2.6.11.js'</span> : <span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/vue/v2.6.11.min.js'</span>,</span><br><span class="line">        <span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/vue-router/v3.1.6.min.js'</span>,</span><br><span class="line">        <span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/vant/vant.min.js'</span>,</span><br><span class="line">        <span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/vuex/v3.1.2.min.js'</span>,</span><br><span class="line">        <span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/axios/v0.19.2.min.js'</span>,</span><br><span class="line">        <span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/dingtalk-jsapi/dingtalk.open.js'</span>,</span><br><span class="line">        <span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/element-ui/index.js'</span>,</span><br><span class="line">        <span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/echarts/echarts.min.js'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果使用多页面打包，使用 vue inspect --plugins 查看 html 是否在结果数组中</span></span><br><span class="line">    config.plugin(<span class="string">'html'</span>).tap(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// html中添加cdn</span></span><br><span class="line">      args[<span class="number">0</span>].cdn = cdn</span><br><span class="line">      <span class="keyword">return</span> args</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-public-index-html"><a class="header-anchor" href="#3-public-index-html">¶</a>3、public/index.html</h4>
<p>  在<code>&lt;head&gt;&lt;/head&gt;</code>标签中添加以下代码使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用CDN的CSS文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span> (<span class="attr">var</span> <span class="attr">i</span> <span class="attr">in</span> <span class="attr">htmlWebpackPlugin.options.cdn</span> &amp;&amp; <span class="attr">htmlWebpackPlugin.options.cdn.css</span>) &#123; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用CDN的JS文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span> (<span class="attr">var</span> <span class="attr">i</span> <span class="attr">in</span> <span class="attr">htmlWebpackPlugin.options.cdn</span> &amp;&amp; <span class="attr">htmlWebpackPlugin.options.cdn.js</span>) &#123; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-main-js"><a class="header-anchor" href="#4-main-js">¶</a>4、main.js</h4>
<p>  main.js 中可能有引入相关组件的 css 文件，当使用了 css 文件的 CDN 时，无需在 main.js 中继续引用。如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vant <span class="keyword">from</span> <span class="string">'vant'</span>;</span><br><span class="line"><span class="comment">// import 'vant/lib/index.css'; // 使用了该 css 文件的 CDN 时，无需在 main.js 中引用</span></span><br><span class="line">Vue.use(Vant);</span><br><span class="line"></span><br><span class="line"><span class="comment">// import 'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"><span class="comment">// import Element from 'element-ui'</span></span><br><span class="line"><span class="comment">// Vue.use(Element, &#123; size: 'small' &#125;)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>项目优化</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 项目在 360 浏览器中设置默认内核</title>
    <url>/article/360-browser-default-kernel.html</url>
    <content><![CDATA[<p>  测试同学说项目在 360 浏览器中白屏，了解了下是 360 浏览器内核设置的原因，记录下解决方法。</p>
<a id="more"></a>
<h4 id="1-解决办法"><a class="header-anchor" href="#1-解决办法">¶</a>1、解决办法</h4>
<p>  <strong>请用域名测试为准，不要用IP地址测试</strong>。在<code>&lt;head&gt;&lt;/head&gt;</code>标签中增加<code>meta</code>标签：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2-官方文档"><a class="header-anchor" href="#2-官方文档">¶</a>2、官方文档</h4>
<p>  <a href="https://bbs.360.cn/thread-14958904-1-1.html" target="_black">360 浏览器自定义设置内核模式说明</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>设置 Host 解决 GitHub 头像不显示</title>
    <url>/article/github-avatar-host.html</url>
    <content><![CDATA[<p>  GitHub 头像和 icon 大部分时间不能正常显示，很影响使用感受，可以通过设置 hosts 文件来解决。</p>
<a id="more"></a>
<p>  编辑 hosts 文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>
<p>  在原有配置后追加即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># GitHub Avatar Start </span><br><span class="line">192.30.253.112     Build software better, together </span><br><span class="line">192.30.253.119     gist.github.com</span><br><span class="line">151.101.184.133    assets-cdn.github.com</span><br><span class="line">151.101.184.133    raw.githubusercontent.com</span><br><span class="line">151.101.184.133    gist.githubusercontent.com</span><br><span class="line">151.101.184.133    cloud.githubusercontent.com</span><br><span class="line">151.101.184.133    camo.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars0.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars2.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars3.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars4.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars5.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars6.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars7.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars8.githubusercontent.com</span><br><span class="line"># GitHub Avatar End</span><br></pre></td></tr></table></figure>
<p><code>以下为老版，效果自测</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># github avatar</span><br><span class="line">199.232.28.133 assets-cdn.github.com</span><br><span class="line">199.232.28.133 raw.githubusercontent.com</span><br><span class="line">199.232.28.133 gist.githubusercontent.com</span><br><span class="line">199.232.28.133 cloud.githubusercontent.com</span><br><span class="line">199.232.28.133 camo.githubusercontent.com</span><br><span class="line">199.232.28.133 avatars0.githubusercontent.com</span><br><span class="line">199.232.28.133 avatars1.githubusercontent.com</span><br><span class="line">199.232.28.133 avatars2.githubusercontent.com</span><br><span class="line">199.232.28.133 avatars3.githubusercontent.com</span><br><span class="line">199.232.28.133 avatars4.githubusercontent.com</span><br><span class="line">199.232.28.133 avatars5.githubusercontent.com</span><br><span class="line">199.232.28.133 avatars6.githubusercontent.com</span><br><span class="line">199.232.28.133 avatars7.githubusercontent.com</span><br><span class="line">199.232.28.133 avatars8.githubusercontent.com</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 项目初始化（三）—— 开发环境设置 proxy 代理</title>
    <url>/article/vue-init-c.html</url>
    <content><![CDATA[<p>  Vue 移动端项目使用了 scss 的话，可以设置自动转换 px 为 rem。</p>
<a id="more"></a>
<h4 id="axios-js"><a class="header-anchor" href="#axios-js">¶</a>axios.js</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.NODE_ENV === <span class="string">'development'</span> ? <span class="string">''</span> : process.env.VUE_APP_BASE_URL</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="vue-config-js"><a class="header-anchor" href="#vue-config-js">¶</a>vue.config.js</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">`<span class="subst">$&#123; process.env.VUE_APP_BASE_URL &#125;</span>`</span>,</span><br><span class="line">        secure: <span class="literal">false</span>,  <span class="comment">// 如果是 https 接口，需要配置这个参数</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">// 开启代理，在本地创建一个虚拟服务端，如果接口跨域，需要进行这个参数配置</span></span><br><span class="line">        ws: <span class="literal">false</span>, <span class="comment">// 是否启用websockets</span></span><br><span class="line">        pathRewrite: &#123;  <span class="comment">// 如果接口本身没有/api需要通过pathRewrite来重写了地址</span></span><br><span class="line">          <span class="string">"^/api"</span>: <span class="string">"/"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 项目初始化（二）—— 移动端支持 rem</title>
    <url>/article/vue-init-b.html</url>
    <content><![CDATA[<p>  Vue 移动端项目使用了 scss 的话，可以设置自动转换 px 为 rem。</p>
<a id="more"></a>
<h3 id="一-创建项目"><a class="header-anchor" href="#一-创建项目">¶</a>一、创建项目</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue create my-vue-wap</span><br></pre></td></tr></table></figure>
<h3 id="二-rem-support"><a class="header-anchor" href="#二-rem-support">¶</a>二、Rem support</h3>
<h4 id="1-安装postcss-pxtorem-amfe-flexible"><a class="header-anchor" href="#1-安装postcss-pxtorem-amfe-flexible">¶</a>1、安装<code>postcss-pxtorem</code>、<code>amfe-flexible</code></h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm i amfe-flexible -S</span><br><span class="line">cnpm i postcss-pxtorem -D</span><br></pre></td></tr></table></figure>
<h4 id="2-src-main-js"><a class="header-anchor" href="#2-src-main-js">¶</a>2、<code>src/main.js</code></h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'amfe-flexible'</span></span><br></pre></td></tr></table></figure>
<h4 id="3-vue-config-js"><a class="header-anchor" href="#3-vue-config-js">¶</a>3、<code>vue.config.js</code></h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      <span class="comment">// pass options to sass-loader</span></span><br><span class="line">      sass: &#123;</span><br><span class="line">        <span class="comment">// @/ is an alias to src/</span></span><br><span class="line">        <span class="comment">// before key is 'data', now change to 'prependData'  so this assumes you have a file named `src/variables.scss`</span></span><br><span class="line">        prependData: <span class="string">`@import "@/assets/stylesheets/mixins/_variables.scss";`</span></span><br><span class="line">      &#125;,</span><br><span class="line">      postcss: &#123;</span><br><span class="line">        plugins: [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-pxtorem'</span>)(&#123;</span><br><span class="line">            rootValue: <span class="number">37.5</span>, <span class="comment">// 效果图375，动态基准值可以传入function</span></span><br><span class="line">            propList: [<span class="string">'*'</span>], <span class="comment">// 属性的选择器，*表示通用</span></span><br><span class="line">            selectorBlackList: [<span class="string">'.px-'</span>] <span class="comment">//   忽略的选择器   .ig-  表示 .ig- 开头的都不会转换</span></span><br><span class="line">          &#125;)</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        ** You can extend webpack config here</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        extend(config, ctx) &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 项目初始化（一）—— 常用配置</title>
    <url>/article/vue-init-a.html</url>
    <content><![CDATA[<p>  Vue 项目初始化较为简单，常用的基础配置可参考 <a href="https://github.com/staven630/vue-cli4-config" target="_blank">https://github.com/staven630/vue-cli4-config</a>。</p>
<a id="more"></a>
<h3 id="常用参考"><a class="header-anchor" href="#常用参考">¶</a>常用参考</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span> (<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  transpileDependencies: [<span class="regexp">/shengya-ui/</span>],</span><br><span class="line">  productionSourceMap: <span class="literal">false</span>, <span class="comment">// 生产环境的 source map</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">    port: <span class="string">'9000'</span>,</span><br><span class="line">    disableHostCheck: <span class="literal">true</span>  <span class="comment">// 解决127.0.0.1指向其他域名时出现"Invalid Host header"问题</span></span><br><span class="line">  &#125;,</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    externals: &#123;</span><br><span class="line">      vue: <span class="string">'Vue'</span>,</span><br><span class="line">      <span class="string">'vue-router'</span>: <span class="string">'VueRouter'</span>,</span><br><span class="line">      vuex: <span class="string">'Vuex'</span>,</span><br><span class="line">      axios: <span class="string">'axios'</span>,</span><br><span class="line">      vant: <span class="string">'vant'</span>,</span><br><span class="line">      <span class="string">'dingtalk-jsapi'</span>: <span class="string">'dd'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  publicPath: process.env.NODE_ENV !== <span class="string">'development'</span> ? <span class="string">'./'</span> : <span class="string">'/'</span>,</span><br><span class="line">  outputDir: <span class="string">'dist'</span>,</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// key, value自行定义，比如.set('@@', resolve('src/components'))</span></span><br><span class="line">    config.resolve.alias.set(<span class="string">'vue$'</span>, <span class="string">'vue/dist/vue.common.js'</span>)</span><br><span class="line">      .set(<span class="string">'@'</span>, resolve(<span class="string">'src'</span>))</span><br><span class="line">      .set(<span class="string">'mixData'</span>, resolve(<span class="string">'src/mixins/mixData'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> cdn = &#123;</span><br><span class="line">      css: [<span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/vant/index.css'</span>],</span><br><span class="line">      js: [</span><br><span class="line">        <span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/vue/v2.6.11.min.js'</span>,</span><br><span class="line">        <span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/vue-router/v3.1.6.min.js'</span>,</span><br><span class="line">        <span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/vant/v2.9.0.min.js'</span>,</span><br><span class="line">        <span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/vuex/v3.1.2.min.js'</span>,</span><br><span class="line">        <span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/axios/v0.19.2.min.js'</span>,</span><br><span class="line">        <span class="string">'//wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/dingtalk-jsapi/dingtalk.open.js'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果使用多页面打包，使用vue inspect --plugins查看html是否在结果数组中</span></span><br><span class="line">    config.plugin(<span class="string">'html'</span>).tap(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// html中添加cdn</span></span><br><span class="line">      args[<span class="number">0</span>].cdn = cdn</span><br><span class="line">      <span class="keyword">return</span> args</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      <span class="comment">// pass options to sass-loader</span></span><br><span class="line">      sass: &#123;</span><br><span class="line">        <span class="comment">// @/ is an alias to src/</span></span><br><span class="line">        <span class="comment">// so this assumes you have a file named `src/variables.scss`</span></span><br><span class="line">        data: <span class="string">`@import '@/assets/stylesheets/scss/mixins/_variables.scss';`</span></span><br><span class="line">      &#125;,</span><br><span class="line">      postcss: &#123;</span><br><span class="line">        plugins: [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-pxtorem'</span>)(&#123;</span><br><span class="line">            rootValue: <span class="number">37.5</span>, <span class="comment">// 效果图375</span></span><br><span class="line">            propList: [<span class="string">'*'</span>], <span class="comment">// 属性的选择器，*表示通用</span></span><br><span class="line">            selectorBlackList: [<span class="string">'.px-'</span>] <span class="comment">//   忽略的选择器   .ig-  表示 .ig- 开头的都不会转换</span></span><br><span class="line">          &#125;)</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        ** You can extend webpack config here</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        extend(config, ctx) &#123; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Submodules 的使用</title>
    <url>/article/git-submodules.html</url>
    <content><![CDATA[<p>  git submodules 是为了多个项目（模块）都能够及时更新到最新的公共资源，解决需要把最新代码拷贝到各个项目的痛点。刚好最近公司开发的产品需要分为各个版本，但是主体功能一致，所以点上 git submodules 的技能点。对于 vue 项目，公共库可以分为 pages、components、styles 等几个目录。</p>
<a id="more"></a>
<h3 id="一-准备项目"><a class="header-anchor" href="#一-准备项目">¶</a>一、准备项目</h3>
<p>  <strong>这篇随笔暂时只记录多个项目使用一个公共库的过程。</strong><br>
  准备好公共库（以 git-public 为例，称为子模块），准备好使用子模块的项目若干（以 git-a 和 git-b 为例，称为主项目）。</p>
<h3 id="二-为主项目添加-submodules"><a class="header-anchor" href="#二-为主项目添加-submodules">¶</a>二、为主项目添加 submodules</h3>
<h4 id="2-1-主项目初次引入"><a class="header-anchor" href="#2-1-主项目初次引入">¶</a>2.1、主项目初次引入</h4>
<p>  在 git-a 主项目下执行：<code>git submodules add &lt;url&gt; &lt;path&gt;</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git submodules add https://github.com/liuxy0551/git-public.git src/submodules</span><br></pre></td></tr></table></figure>
<h4 id="2-2-多人协同"><a class="header-anchor" href="#2-2-多人协同">¶</a>2.2、多人协同</h4>
<h5 id="2-2-1-clone"><a class="header-anchor" href="#2-2-1-clone">¶</a>2.2.1、clone</h5>
<p>  如果你是第一次在项目中引入子模块的开发人员，那么项目新加入的成员可以按照以下方法 clone 带有 submodules 的项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/liuxy0551/git-a.git</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure>
<p>或：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone --recursive https://github.com/liuxy0551/git-a.git</span><br></pre></td></tr></table></figure>
<p><code>--recursive</code>代表 clone 项目的同时 clone 关联的 submodules。</p>
<h5 id="2-2-2-pull"><a class="header-anchor" href="#2-2-2-pull">¶</a>2.2.2、pull</h5>
<p>  如果你是第一次在项目中引入子模块的开发人员，那么项目的其他成员可以按照以下方法 pull 到带有 submodules 的项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull origin &lt;当前分支&gt;</span><br></pre></td></tr></table></figure>
<h3 id="三-获取-更新子模块代码"><a class="header-anchor" href="#三-获取-更新子模块代码">¶</a>三、获取、更新子模块代码</h3>
<h4 id="3-1-获取子模块代码"><a class="header-anchor" href="#3-1-获取子模块代码">¶</a>3.1、获取子模块代码</h4>
<p>  在主项目中的子模块路径下执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>
<p>  多个子模块可在主项目路径下执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git submodule foreach git pull origin master</span><br></pre></td></tr></table></figure>
<h4 id="3-2-更新子模块代码"><a class="header-anchor" href="#3-2-更新子模块代码">¶</a>3.2、更新子模块代码</h4>
<h5 id="3-2-1-在子模块项目中更新"><a class="header-anchor" href="#3-2-1-在子模块项目中更新">¶</a>3.2.1、在子模块项目中更新</h5>
<p>  按照正常的 git 项目更新提交代码，其他开发成员获取参照<code>3.1、获取子模块代码</code></p>
<h5 id="3-2-2-在主项目中更新子模块的代码"><a class="header-anchor" href="#3-2-2-在主项目中更新子模块的代码">¶</a>3.2.2、在主项目中更新子模块的代码</h5>
<p>  <code>在子模块路径下</code>按照正常的 git 项目更新提交代码，其他开发成员获取参照<code>3.1、获取子模块代码</code>。主项目的代码应在子模块的代码提交后再提交，否则主项目检测不到子模块具体的变动。</p>
<h3 id="四-删除-git-submodules"><a class="header-anchor" href="#四-删除-git-submodules">¶</a>四、删除 git submodules</h3>
<p>  删除公共库的步骤较为复杂，如下：</p>
<h4 id="1-删除公共库目录及代码"><a class="header-anchor" href="#1-删除公共库目录及代码">¶</a>1、删除公共库目录及代码</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf src/submodules</span><br></pre></td></tr></table></figure>
<h4 id="2-删除-更改-子项目根目录下的-gitmodules"><a class="header-anchor" href="#2-删除-更改-子项目根目录下的-gitmodules">¶</a>2、删除（更改）子项目根目录下的 .gitmodules</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf .gitmodules</span><br></pre></td></tr></table></figure>
<h4 id="3-删除-更改-git-config-文件中的公共库部分"><a class="header-anchor" href="#3-删除-更改-git-config-文件中的公共库部分">¶</a>3、删除（更改）.git/config 文件中的公共库部分</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// .git/config</span><br><span class="line">[submodule &quot;src/submodules&quot;]</span><br><span class="line">        url = https://github.com/liuxy0551/git-public.git</span><br><span class="line">        active = true</span><br></pre></td></tr></table></figure>
<h4 id="4-删除模块下的公共库目录"><a class="header-anchor" href="#4-删除模块下的公共库目录">¶</a>4、删除模块下的公共库目录</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf .git/modules/src</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p>1、<a href="https://www.cnblogs.com/lsgxeva/p/8540758.html" target="_blank" rel="noopener">Git Submodule使用完整教程</a><br>
2、<a href="https://github.com/wuyuedefeng/blogs/issues/48" target="_blank" rel="noopener">git submodules学习笔记</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>深拷贝和浅拷贝</title>
    <url>/article/deep-copy-shallow-copy.html</url>
    <content><![CDATA[<p>深拷贝、浅拷贝在实际开发中经常应用到，这里记录一些理解。</p>
<a id="more"></a>
<h3 id="一-内存中的堆栈-heap-stack"><a class="header-anchor" href="#一-内存中的堆栈-heap-stack">¶</a>一、内存中的堆栈（heap、stack）</h3>
<p><a href="https://liuxianyu.cn/article/js-typeof.html">JavaScript 中的数据类型以及内存分配</a></p>
<p>  堆和栈都是内存中用来存储的区域：<strong>栈</strong>是自动分配的内存，由系统自动释放；<strong>堆</strong>是动态分配的内存，大小不定同时也不会自动释放。深拷贝和浅拷贝的区别也在于两者在内存中的存储类型有所不同。<br>
  介绍一下基本数据类型和引用数据类型的概念，<code>基本数据类型</code>包括：String、Number、Boolean、null、undefined 五类（es6 新引入 Symbol，代表独一无二的值），<code>引用数据类型</code>统称为 Object 类型，包括：对象、数组、Date、RefExp、函数等。</p>
<ul>
<li>栈：基本数据类型存放在<strong>栈</strong>里面，数据段简单，数据大小也确定，占用内存空间大小确定，是直接按值存放的，可以直接访问。</li>
<li>堆：引用数据类型存放在<strong>堆</strong>里面，object 实际上是一个存放在栈内存的指针，这个指针指向的是堆内存中的地址。</li>
</ul>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li>1、js 中基本数据类型的值不可变、引用数据类型的值可变</li>
<li>2、操作字符串返回的都是新字符串，并没有改变原有的字符串</li>
<li>3、基本数据类型比较值，引用数据类型比较引用是否指向同一个对象</li>
</ul>
</blockquote>
<h3 id="二-赋值-copy"><a class="header-anchor" href="#二-赋值-copy">¶</a>二、赋值（Copy）</h3>
<ul>
<li>基本数据类型：<code>赋值</code>，赋值之后两个变量互不影响</li>
<li>引用数据类型：<code>赋址</code>，两个变量具有相同的引用，指向同一个对象，相互之间有影响。</li>
</ul>
<p>举个赋值的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'old'</span></span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line">a = <span class="string">'new'</span></span><br><span class="line"><span class="built_in">console</span>.log(a, b)  <span class="comment">// 'new', 'old'</span></span><br></pre></td></tr></table></figure>
<p>举个赋址的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="built_in">console</span>.log(a, b)  <span class="comment">// [0, 2, 3, 4, 5, 6], [0, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>
<h3 id="三-浅拷贝-shallowcopy"><a class="header-anchor" href="#三-浅拷贝-shallowcopy">¶</a>三、浅拷贝（ShallowCopy）</h3>
<p>  拷贝原始对象，如果原始对象的属性是基本数据类型，拷贝的就是基本数据类型的值；如果原始对象的属性是引用数据类型，那么拷贝的就是引用数据类型的内存地址，如果两个对象中的某一个改变属性值从而影响内存地址，则另一个对象也会受到影响。</p>
<h4 id="1-object-assign"><a class="header-anchor" href="#1-object-assign">¶</a>1、Object.assign()</h4>
<p>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">Object.assign()</a> 可以将多个对象的属性复制到目标对象，返回目标对象。下面的代码中，改变对象 a 之后，b 对象的属性中，基本数据类型保持不变，但是引用数据类型发生了对应的变化。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  name: <span class="string">'old'</span>,</span><br><span class="line">  info: &#123;</span><br><span class="line">    sex: <span class="number">1</span>,</span><br><span class="line">    height: <span class="number">170</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Object</span>.assign(&#123;&#125;, a)</span><br><span class="line"><span class="built_in">console</span>.log(b)  <span class="comment">// &#123; name: 'old', info: &#123; sex: 1, height: 170 &#125;&#125;</span></span><br><span class="line"></span><br><span class="line">a.name = <span class="string">'new'</span></span><br><span class="line">a.info.height = <span class="number">185</span></span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">// &#123; name: 'new', info: &#123; sex: 1, height: 185 &#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b)  <span class="comment">// &#123; name: 'old', info: &#123; sex: 1, height: 185 &#125;&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-解构"><a class="header-anchor" href="#2-解构">¶</a>2、… 解构</h4>
<p>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener">展开语法(Spread syntax)</a> 通过实验可以看出效果和<code>Object.assgin()</code>一致。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  name: <span class="string">'old'</span>,</span><br><span class="line">  info: &#123;</span><br><span class="line">    sex: <span class="number">1</span>,</span><br><span class="line">    height: <span class="number">170</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = &#123; ...a &#125;</span><br><span class="line"><span class="built_in">console</span>.log(b)  <span class="comment">// &#123; name: 'old', info: &#123; sex: 1, height: 170 &#125;&#125;</span></span><br><span class="line"></span><br><span class="line">a.name = <span class="string">'new'</span></span><br><span class="line">a.info.height = <span class="number">185</span></span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">// &#123; name: 'new', info: &#123; sex: 1, height: 185 &#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b)  <span class="comment">// &#123; name: 'old', info: &#123; sex: 1, height: 185 &#125;&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-array-slice"><a class="header-anchor" href="#3-array-slice">¶</a>3、Array.slice()</h4>
<p>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">slice()</a> 方法的效果可以说明<code>slice()</code>方法是浅拷贝。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">'old'</span>, <span class="literal">true</span>, [<span class="number">0</span>, <span class="number">1</span>]]</span><br><span class="line"><span class="keyword">let</span> b = a.slice()</span><br><span class="line">b[<span class="number">0</span>] = <span class="string">'new'</span></span><br><span class="line">b[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(a, b)   <span class="comment">// ['old', true, [1, 1]], ['new', true, [1, 1]]</span></span><br></pre></td></tr></table></figure>
<h4 id="4-array-concat"><a class="header-anchor" href="#4-array-concat">¶</a>4、Array.concat()</h4>
<p>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noopener">concat()</a> 方法也是浅拷贝，同<code>slice()</code>。</p>
<h3 id="四-深拷贝-deepcopy"><a class="header-anchor" href="#四-深拷贝-deepcopy">¶</a>四、深拷贝（DeepCopy）</h3>
<p>  在深拷贝时，会复制原始对象所有的属性，并分配新的内存地址，相比浅拷贝性能消耗较大且速度较慢。拷贝前后的两个对象互不影响。</p>
<h4 id="1-json-parse-json-stringify-object"><a class="header-anchor" href="#1-json-parse-json-stringify-object">¶</a>1、JSON.parse(JSON.stringify(object))</h4>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse" target="_blank" rel="noopener">JSON.parse()</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="noopener">JSON.stringify()</a> 可以达到下述代码中的完全改变 a 而不影响 b 的效果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  name: <span class="string">'old'</span>,</span><br><span class="line">  info: &#123;</span><br><span class="line">    sex: <span class="number">1</span>,</span><br><span class="line">    height: <span class="number">170</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a))</span><br><span class="line"><span class="built_in">console</span>.log(b)  <span class="comment">// &#123; name: 'old', info: &#123; sex: 1, height: 170 &#125;&#125;</span></span><br><span class="line"></span><br><span class="line">a.name = <span class="string">'new'</span></span><br><span class="line">a.info.height = <span class="number">185</span></span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">// &#123; name: 'new', info: &#123; sex: 1, height: 185 &#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b)  <span class="comment">// &#123; name: 'old', info: &#123; sex: 1, height: 170 &#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>数组的深拷贝也可以进行，但是<code>JSON.parse(JSON.stringify(object))</code>有几个问题：</p>
<ul>
<li>会忽略 undefined、symbol 和 function</li>
<li>处理循环引用的对象会报错</li>
<li>new Date() 的转换结果不正确，可以考虑转换成字符串或者时间戳再深拷贝</li>
<li>不能处理正则</li>
</ul>
<h4 id="2-递归写法"><a class="header-anchor" href="#2-递归写法">¶</a>2、递归写法</h4>
<ul>
<li>基础类型</li>
<li>引用类型<br>
  RegExp、Date、函数 不是 JSON 安全的<br>
  会丢失 constructor，所有的构造函数都指向 Object<br>
  破解循环引用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">'object'</span>) &#123;</span><br><span class="line">    result = obj.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      result[i] = <span class="keyword">typeof</span> obj[i] === <span class="string">'object'</span> ? deepCopy(obj[i]) : obj[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = obj</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-jquery-extend"><a class="header-anchor" href="#3-jquery-extend">¶</a>3、jQuery.extend()</h4>
<p><a href="http://jquery.cuishifeng.cn/jQuery.extend.html" target="_blank" rel="noopener">中文文档</a>、<a href="https://api.jquery.com/jQuery.extend/" target="_blank" rel="noopener">英文文档</a></p>
<h4 id="4-lodash-clonedeep"><a class="header-anchor" href="#4-lodash-clonedeep">¶</a>4、lodash.cloneDeep()</h4>
<p><a href="https://www.lodashjs.com/docs/lodash.cloneDeep" target="_blank" rel="noopener">lodash.cloneDeep()</a></p>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p>1、<a href="https://muyiy.cn/blog/4/4.1.html" target="_blank" rel="noopener">详细解析赋值、浅拷贝和深拷贝的区别</a><br>
2、<a href="https://juejin.im/post/59ac1c4ef265da248e75892b" target="_blank" rel="noopener">js 深拷贝 vs 浅拷贝</a><br>
3、<a href="https://github.com/mqyqingfeng/Blog/issues/32" target="_blank" rel="noopener">JavaScript专题之深浅拷贝</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>wepy 常用指令</title>
    <url>/article/wepy-command.html</url>
    <content><![CDATA[<p>记录一下 wepy 框架常用指令</p>
<a id="more"></a>
<p><a href="https://wepyjs.github.io/wepy-docs/1.x" target="_blank" rel="noopener">wepy 1.x 文档</a>、<a href="https://wepyjs.github.io/wepy-docs/2.x" target="_blank" rel="noopener">wepy 2.x 文档</a>、<a href="https://github.com/aben1188/awesome-wepy" target="_blank" rel="noopener">微信小程序wepy框架开发资源汇总</a></p>
<h4 id="1-全局安装指定版本-2-x"><a class="header-anchor" href="#1-全局安装指定版本-2-x">¶</a>1、全局安装指定版本（2.x）</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i @wepy/cli@2.0.0-alpha.20 -g</span><br></pre></td></tr></table></figure>
<h4 id="2-查看当前项目-wepy-版本"><a class="header-anchor" href="#2-查看当前项目-wepy-版本">¶</a>2、查看当前项目 wepy 版本</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx wepy -v</span><br></pre></td></tr></table></figure>
<h4 id="3-生成开发实例-2-x"><a class="header-anchor" href="#3-生成开发实例-2-x">¶</a>3、生成开发实例（2.x）</h4>
<p>因为 wepy 2.x 是 alpha 版本，所以一直不是很稳定，可能创建失败，临时解决方法见 <a href="https://liuxianyu.cn/article/hosts-githubusercontent.html">修改 Hosts 文件临时解决 raw.githubusercontent.com 无法访问的问题</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wepy init standard myproject</span><br></pre></td></tr></table></figure>
<h4 id="4-开发实时编译-更新缓存"><a class="header-anchor" href="#4-开发实时编译-更新缓存">¶</a>4、开发实时编译（更新缓存）</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wepy build --no-cache --watch</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>wepy</tag>
      </tags>
  </entry>
  <entry>
    <title>修改 Hosts 文件临时解决 raw.githubusercontent.com 无法访问的问题</title>
    <url>/article/hosts-githubusercontent.html</url>
    <content><![CDATA[<p>最近利用 wepy 2.x 创建项目的时候发现，因为 wepy 2.x 是 alpha 版本，所以一直不是很稳定，无法访问 <a href="https://raw.githubusercontent.com" target="_blank" rel="noopener">https://raw.githubusercontent.com</a> 。</p>
<a id="more"></a>
<h4 id="1-查询真实-ip"><a class="header-anchor" href="#1-查询真实-ip">¶</a>1、查询真实 IP</h4>
<p>通过 <a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a> 查询到<code>raw.githubusercontent.com</code>的真实 IP 地址：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/hosts-githubusercontent/1.png" alt></p>
<h4 id="2-修改-hosts-文件"><a class="header-anchor" href="#2-修改-hosts-文件">¶</a>2、修改 Hosts 文件</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>
<p>添加如下内容保存即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">199.232.68.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 实现数组元素交换</title>
    <url>/article/array-swap.html</url>
    <content><![CDATA[<p>最近涉及到试卷出题的业务需求，其实去年3月份也做过类似的需求。在一套试卷中，题目需要可以上下移动位置，记录一下实现的原理。</p>
<a id="more"></a>
<h3 id="一-实现效果"><a class="header-anchor" href="#一-实现效果">¶</a>一、实现效果</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/array-swap/1.png" alt></p>
<h3 id="二-实现原理"><a class="header-anchor" href="#二-实现原理">¶</a>二、实现原理</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">swapArray (arr, index1, index2) &#123;</span><br><span class="line">  arr[index1] = arr.splice(index2, <span class="number">1</span>, arr[index1])[<span class="number">0</span>]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 下移</span></span><br><span class="line">indexUp () &#123;</span><br><span class="line">  <span class="keyword">this</span>.swapArray(arr, index, index + <span class="number">1</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 上移</span></span><br><span class="line">indexDown () &#123;</span><br><span class="line">  <span class="keyword">this</span>.swapArray(arr, index, index - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://my-vue.liuxianyu.cn/array" target="_blank" rel="noopener">在线 Demo</a></p>
<p>实现效果中的代码 <a href="https://github.com/liuxy0551/my-vue/blob/master/src/pages/array.vue#L34" target="_blank" rel="noopener">Github</a></p>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p>  1、<a href="https://www.cnblogs.com/dearxinli/p/6802151.html" target="_blank" rel="noopener">js 实现数组元素交换位置</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>初识钉钉小程序</title>
    <url>/article/dingtalk.html</url>
    <content><![CDATA[<p>之前接触过微信小程序，这次因公司业务需要，了解一下钉钉小程序。</p>
<a id="more"></a>
<h3 id="一-实现效果"><a class="header-anchor" href="#一-实现效果">¶</a>一、实现效果</h3>
<p><a href="https://github.com/liuxy0551/DingTalk-ToDoList" target="_black">https://github.com/liuxy0551/DingTalk-ToDoList</a></p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/dingtalk/1.gif" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/dingtalk/2.gif" alt></div></div></div></div>
<br>
<p><img src="https://images-hosting.liuxianyu.cn/posts/dingtalk/3.png" alt></p>
<h3 id="二-文档-开发工具"><a class="header-anchor" href="#二-文档-开发工具">¶</a>二、文档、开发工具</h3>
<p><a href="https://ding-doc.dingtalk.com/doc#/isv/nbcs7r" target="_blank" rel="noopener">钉钉开发文档</a>、<a href="https://ding-doc.dingtalk.com/doc#/kn6zg7/zunrdk/2843bfc0" target="_blank" rel="noopener">小程序开发工具</a></p>
<h3 id="三-理解与注意事项"><a class="header-anchor" href="#三-理解与注意事项">¶</a>三、理解与注意事项</h3>
<p>  1、和微信原生开发比较接近，一个页面四个文件<br>
　　2、事件名需要 on 或者 catch 开头<br>
　　…</p>
<h3 id="四-源码"><a class="header-anchor" href="#四-源码">¶</a>四、源码</h3>
<p>  <a href="https://github.com/liuxy0551/DingTalk-ToDoList" target="_blank" rel="noopener">https://github.com/liuxy0551/DingTalk-ToDoList</a></p>
<p>（一）、ToDoList 待解答的问题</p>
<ul>
<li>1、axml 文件标签上如何使用 filter、map</li>
<li>2、<a href="https://github.com/liuxy0551/DingTalk-ToDoList/blob/master/pages/todo/todo.js#L56" target="_blank" rel="noopener">onChange</a> 方法中 setData 写法如何优化</li>
<li>3、onShow 如何调用自定义方法，目前是将自定义方法写在 Page.data 中</li>
</ul>
<p>（二）、父子组件传值与事件调用</p>
<ul>
<li>[x] 1、父传子</li>
<li>[x] 2、子传父</li>
<li>[x] 3、子组件调用父组件的方法</li>
<li>[ ] 4、父组件调用子组件的方法</li>
</ul>
<p>（三）、封装网络请求</p>
<ul>
<li>[x] 1、get</li>
<li>[x] 2、post</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>钉钉开发</category>
      </categories>
      <tags>
        <tag>钉钉开发</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习 Docker 之旅（四）—— 安装 MySQL 并启动、连接，修改时区</title>
    <url>/article/docker-c.html</url>
    <content><![CDATA[<p>  这两年 Docker 比较火，很多大厂都在使用。这里记录一下 Cent OS 中使用 Docker 安装 MySQL 并启动、连接的过程。</p>
<a id="more"></a>
<p>  <strong>建议切换 root 用户进行以下操作</strong></p>
<h3 id="一-安装-mysql"><a class="header-anchor" href="#一-安装-mysql">¶</a>一、安装 MySQL</h3>
<h4 id="1-查找镜像"><a class="header-anchor" href="#1-查找镜像">¶</a>1、查找镜像</h4>
<p>在 Docker Hub 官网查找自己需要的版本 <a href="https://hub.docker.com/_/mysql?tab=tags" target="_blank" rel="noopener">https://hub.docker.com/_/mysql?tab=tags</a></p>
<h4 id="2-下载镜像"><a class="header-anchor" href="#2-下载镜像">¶</a>2、下载镜像</h4>
<p>我选择的是 5.7 版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>
<h4 id="3-创建项目文件夹并进入"><a class="header-anchor" href="#3-创建项目文件夹并进入">¶</a>3、创建项目文件夹并进入</h4>
<p>  <code>仅限服务器端</code>本地创建一个文件夹用来存放 MySQL 的配置文件、日志以及数据等（也就是挂载目录，作用是将此目录中的文件或文件夹覆盖掉容器内部的文件或文件夹）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /mnt/docker/mysql</span><br><span class="line">cd /mnt/docker/mysql</span><br></pre></td></tr></table></figure>
<h3 id="二-运行-mysql"><a class="header-anchor" href="#二-运行-mysql">¶</a>二、运行 MySQL</h3>
<h4 id="1-使用镜像创建容器并运行"><a class="header-anchor" href="#1-使用镜像创建容器并运行">¶</a>1、使用镜像创建容器并运行</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 6033:3306 -d --name mysql-5.7 -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</span><br></pre></td></tr></table></figure>
<p>指令解释：</p>
<ul>
<li><code>-p</code> 表示端口映射，<code>-p 宿主机 port:容器 port</code></li>
<li><code>-d</code> 表示后台运行并返回容器 id，只有在父进程即 docker 进程退出的时候才会去把容器退出，除非你使用了<code>--rm</code>选项。如果你在运行容器时将<code>-d</code>和<code>--rm</code>两个选项一起使用，那么容器会在退出或者后台进程停止的的时候自动移除掉（只要一个情况便会自动移除镜像）</li>
<li><code>--name</code> 表示给容器指定的名称</li>
<li><code>-v $PWD/conf:/etc/mysql/conf.d</code> 表示将主机上当前目录下的 conf/my.cnf 文件挂载到容器的 /etc/mysql/my.cnf</li>
<li><code>-v $PWD/logs:/logs</code> 表示将主机上当前目录下的 logs 目录挂载到容器的 /logs</li>
<li><code>-v $PWD/data:/var/lib/mysql</code> 表示将主机上当前目录下的 data 目录挂载到容器的 /var/lib/mysql</li>
<li><code>-e MYSQL_ROOT_PASSWORD=123456</code> 表示初始化 root 用户的密码</li>
</ul>
<blockquote>
<p><strong>注意</strong><br>
　　本地 Docker 安装 MySQL 时可以不使用 -v 挂载文件夹，如下：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 -d --name mysql-5.7 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</span><br></pre></td></tr></table></figure>
<h4 id="2-进入容器"><a class="header-anchor" href="#2-进入容器">¶</a>2、进入容器</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql-5.7 bash</span><br></pre></td></tr></table></figure>
<h4 id="3-进入-mysql"><a class="header-anchor" href="#3-进入-mysql">¶</a>3、进入 MySQL</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure>
<h4 id="4-可能用到的命令"><a class="header-anchor" href="#4-可能用到的命令">¶</a>4、可能用到的命令</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql_upgrade -u root -p --force</span><br></pre></td></tr></table></figure>
<h4 id="5-mysql-修改密码"><a class="header-anchor" href="#5-mysql-修改密码">¶</a>5、mysql 修改密码</h4>
<p>需要先进入 MySQL 再执行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">'newPassword'</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>
<h3 id="三-linux-修改时间及时区"><a class="header-anchor" href="#三-linux-修改时间及时区">¶</a>三、Linux 修改时间及时区</h3>
<h4 id="1-查看本机时间"><a class="header-anchor" href="#1-查看本机时间">¶</a>1、查看本机时间</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date</span><br></pre></td></tr></table></figure>
<p>  在 Linux 中与时间相关的文件有：<code>/etc/localtime</code>、<code>/etc/timezone</code></p>
<h4 id="2-修改本机时间"><a class="header-anchor" href="#2-修改本机时间">¶</a>2、修改本机时间</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>
<p>  在<code>/usr/share/zoneinfo</code>下存放着不同时区格式的时间文件，执行以上命令，可以将本机时间调整至目标时区的时间格式。<strong>但是调整了时间格式，本机所属的时区是保持不变的！</strong></p>
<h4 id="3-修改本机时区"><a class="header-anchor" href="#3-修改本机时区">¶</a>3、修改本机时区</h4>
<p>  在 Linux 中，有一些程序会自己计算时间，不会直接采用带有时区的本机时间格式，会根据 UTC 时间和本机所属的时区等计算出当前的时间，new 出来的时间还是 UTC 时间，所以必须得修正本机的时区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &apos;Asia/Shanghai&apos; &gt;/etc/timezone</span><br></pre></td></tr></table></figure>
<h3 id="四-mysql-配置"><a class="header-anchor" href="#四-mysql-配置">¶</a>四、MySQL 配置</h3>
<h4 id="1-修改时间"><a class="header-anchor" href="#1-修改时间">¶</a>1、修改时间</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>();</span><br></pre></td></tr></table></figure>
<p>执行 <code>yum install vim -y</code> 然后执行 <code>vim /etc/my.cnf</code> 在 <code>[mysqld]</code> 区域中加上 <code>default-time_zone = '+8:00'</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker restart mysql-5.7</span><br></pre></td></tr></table></figure>
<h4 id="2-最大连接数"><a class="header-anchor" href="#2-最大连接数">¶</a>2、最大连接数</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'max_connections'</span>;</span><br></pre></td></tr></table></figure>
<h4 id="3-当前连接数"><a class="header-anchor" href="#3-当前连接数">¶</a>3、当前连接数</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">STATUS</span> <span class="keyword">LIKE</span> <span class="string">'Threads_connected'</span>;</span><br></pre></td></tr></table></figure>
<h4 id="4-设置最大连接数"><a class="header-anchor" href="#4-设置最大连接数">¶</a>4、设置最大连接数</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> max_connections = <span class="number">1000</span>;</span><br></pre></td></tr></table></figure>
<h3 id="五-部分问题"><a class="header-anchor" href="#五-部分问题">¶</a>五、部分问题</h3>
<h4 id="eggjs-中连接-mysql-的-docker-容器报错"><a class="header-anchor" href="#eggjs-中连接-mysql-的-docker-容器报错">¶</a>eggjs 中连接 MySQL 的 docker 容器报错</h4>
<p>  eggjs 连接 MySQL 的 docker 容器，报错：Client does not support authentication protocol requested by server; consider upgrading MySQL client</p>
<h5 id="解决办法"><a class="header-anchor" href="#解决办法">¶</a>解决办法</h5>
<p>  MySQL 中执行如下语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER &apos;root&apos;@&apos;%&apos; IDENTIFIED WITH mysql_native_password BY &apos;你的密码&apos;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>% 表示允许来自任何 ip 的连接<br>
localhost 表示允许本机的连接</p>
</blockquote>
<h4 id="only-full-group-by-不建议"><a class="header-anchor" href="#only-full-group-by-不建议">¶</a>only_full_group_by (不建议)</h4>
<p>  在 MySQL 5.7 后，默认开启了 SQL_MODE 严格模式，对数据进行严格校验。如果代码中含有 <code>group by</code> 聚合操作，那么 <code>select</code> 中的列，除了使用聚合函数之外的，如 max()、min() 等，都必须出现在 <code>group by</code> 中。比如以下语句就会报错：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">name</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, age <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">name</span>;</span><br></pre></td></tr></table></figure>
<p>  需要修改为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, age <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">name</span>, age;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">name</span>;</span><br></pre></td></tr></table></figure>
<p>  不过这样可能会缺失想要的信息。我们可以进入数据库执行 <code>select @@global.sql_mode;</code> 查询 <code>sql_mode</code> 的值，编辑<code>/etc/my.cnf</code>，将 <code>sql_mode</code> 的值修改为去除 <code>ONLY_FULL_GROUP_BY</code> 后的值，然后重启 MySQL 即可。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql-5.7 bash</span><br></pre></td></tr></table></figure>
<p>  <code>vim /etc/my.cnf</code>，添加一行，保存后重启 mysql。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker restart mysql-5.7</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习 Docker 之旅（三）—— Cent OS 中安装 Docker</title>
    <url>/article/cent-os-docker.html</url>
    <content><![CDATA[<p>  Docker 官方要求 Linux 内核版本至少<code>3.8</code>以上。</p>
<a id="more"></a>
<h3 id="一-cent-os-版本"><a class="header-anchor" href="#一-cent-os-版本">¶</a>一、Cent OS 版本</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/cent-os-docker/1.png" alt></p>
<h3 id="二-设置-yum-源-可选"><a class="header-anchor" href="#二-设置-yum-源-可选">¶</a>二、设置 yum 源 <code>可选</code></h3>
<p>  选择其中一个：阿里仓库<code>【推荐】</code>、中央仓库</p>
<figure class="highlight shell"><figcaption><span>阿里仓库</span></figcaption><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>中央仓库</span></figcaption><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<h3 id="三-安装-docker"><a class="header-anchor" href="#三-安装-docker">¶</a>三、安装 Docker</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install docker-ce -y</span><br></pre></td></tr></table></figure>
<h3 id="四-启动-docker"><a class="header-anchor" href="#四-启动-docker">¶</a>四、启动 Docker</h3>
<p>  1、root 用户操作：</p>
<figure class="highlight shell"><figcaption><span>开机自启动 Docker</span></figcaption><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>启动 Docker</span></figcaption><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<p>  2、查看 Docker 是否安装成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure>
<p>附：<a href="https://liuxianyu.cn/article/docker-b.html" target="_black">前端学习 Docker 之旅（二）—— 常用指令</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Cent OS</category>
      </categories>
      <tags>
        <tag>Cent OS</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习 Docker 之旅（二）—— 常用指令</title>
    <url>/article/docker-b.html</url>
    <content><![CDATA[<p>  这两年 Docker 比较火，很多大厂都在使用。这里记录一下常用的指令。</p>
<a id="more"></a>
<h4 id="1-docker-run"><a class="header-anchor" href="#1-docker-run">¶</a>1、docker run</h4>
<p>  docker 进程运行于独立的容器中，而容器是宿主机的一个进程，宿主机可以是本地的也可以是远程的。每当执行<code>docker run</code>之后，容器进程是独立运行的，它有自己的文件系统、网络以及与宿主机隔离的进程。<a href="https://docs.docker.com/engine/reference/run/#general-form" target="_blank" rel="noopener">原文</a></p>
<h4 id="2-docker-run-和-docker-start-的区别"><a class="header-anchor" href="#2-docker-run-和-docker-start-的区别">¶</a>2、docker run 和 docker start 的区别</h4>
<ul>
<li>
<p>docker run<br>
docker run 只在第一次运行时使用，根据镜像生成容器，以后再次启动这个容器时，只需要使用命令 docker start 即可。docker run 相当于执行了两步操作：根据镜像生成容器，然后将容器启动，使之变成运行时容器（docker start）</p>
</li>
<li>
<p>docker start<br>
docker start 的作用是重新启动已存在的镜像。也就是说，如果使用这个命令，我们必须事先知道这个容器的 container_id 或 container_name，可以使用 docker ps 找到这个容器的信息</p>
</li>
</ul>
<h4 id="3-查看镜像列表"><a class="header-anchor" href="#3-查看镜像列表">¶</a>3、查看镜像列表</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<h4 id="4-删除某个镜像"><a class="header-anchor" href="#4-删除某个镜像">¶</a>4、删除某个镜像</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rmi -f [image_id]/[image_name]</span><br></pre></td></tr></table></figure>
<h4 id="5-查看容器列表"><a class="header-anchor" href="#5-查看容器列表">¶</a>5、查看容器列表</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -a 或 docker container ls -a</span><br></pre></td></tr></table></figure>
<h4 id="6-删除某个容器"><a class="header-anchor" href="#6-删除某个容器">¶</a>6、删除某个容器</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm -f [container_id]/[container_name]</span><br></pre></td></tr></table></figure>
<h4 id="7-查看正在运行的容器列表"><a class="header-anchor" href="#7-查看正在运行的容器列表">¶</a>7、查看正在运行的容器列表</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps 或 docker container ls</span><br></pre></td></tr></table></figure>
<h4 id="8-复制主机的文件到容器内"><a class="header-anchor" href="#8-复制主机的文件到容器内">¶</a>8、复制主机的文件到容器内</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp test.sh [container_id]:/mnt/</span><br></pre></td></tr></table></figure>
<h4 id="9-进入容器"><a class="header-anchor" href="#9-进入容器">¶</a>9、进入容器</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it [container_id]/[container_name] /bin/bash</span><br></pre></td></tr></table></figure>
<h4 id="10-进入容器并执行脚本"><a class="header-anchor" href="#10-进入容器并执行脚本">¶</a>10、进入容器并执行脚本</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it [container_id]/[container_name] /bin/bash /mnt/test.sh</span><br></pre></td></tr></table></figure>
<h4 id="11-开始-停止某个容器"><a class="header-anchor" href="#11-开始-停止某个容器">¶</a>11、开始/停止某个容器</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start/stop [container_id]/[container_name]</span><br></pre></td></tr></table></figure>
<h4 id="12-重命名容器"><a class="header-anchor" href="#12-重命名容器">¶</a>12、重命名容器</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rename old_name new_name</span><br></pre></td></tr></table></figure>
<h4 id="13-停止所有容器"><a class="header-anchor" href="#13-停止所有容器">¶</a>13、停止所有容器</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure>
<h4 id="14-docker-cp"><a class="header-anchor" href="#14-docker-cp">¶</a>14、docker cp</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># docker cp --help</span><br><span class="line"></span><br><span class="line">Usage:  docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</span><br><span class="line">从容器中复制文件或目录到执行命令所在机器的指定路径</span><br><span class="line">        docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br><span class="line">从执行命令所在的机器复制文件或目录到容器内部的指定路径</span><br><span class="line"></span><br><span class="line">Copy files/folders between a container and the local filesystem</span><br><span class="line">在容器和本地文件系统之间复制文件/文件夹</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      -a, --archive       Archive mode (copy all uid/gid information)</span><br><span class="line">      归档模式（复制所有UID / GID信息）</span><br><span class="line">      -L, --follow-link   Always follow symbol link in SRC_PATH</span><br><span class="line">      总是跟在源地址符号链接</span><br></pre></td></tr></table></figure>
<h4 id="14-基于-dockerfile-创建镜像"><a class="header-anchor" href="#14-基于-dockerfile-创建镜像">¶</a>14、基于 Dockerfile 创建镜像</h4>
<p><code>注意</code> 不要丢失 build 命令后的<code>.</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t IMAGE_REPOSITORY:IMAGE_TAG .</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f DockerfilePHP -t IMAGE_REPOSITORY:IMAGE_TAG .</span><br></pre></td></tr></table></figure>
<p>指令解释：</p>
<ul>
<li><code>-t</code> 指定镜像标签</li>
<li><code>-f</code> 指定生成镜像默认的依赖文件，不使用时，默认依赖当前路径下的 Dockerfile 文件</li>
</ul>
<p>运行完上述命令后可以运行<code>docker images</code>查看生成了新镜像</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习 Docker 之旅（一）—— 基础理解</title>
    <url>/article/docker-a.html</url>
    <content><![CDATA[<p>这两年 Docker 比较火，很多大厂都在使用。最近学习了点基础知识，记录一下。</p>
<a id="more"></a>
<h3 id="一-关于-docker"><a class="header-anchor" href="#一-关于-docker">¶</a>一、关于 Docker</h3>
<p>Docker 可以理解为高性能的虚拟机，主要用于 Linux 环境的虚拟化。Docker 专门为了服务器虚拟化，并支持镜像分享等功能。</p>
<h3 id="二-三个概念"><a class="header-anchor" href="#二-三个概念">¶</a>二、三个概念</h3>
<h4 id="1-镜像-image"><a class="header-anchor" href="#1-镜像-image">¶</a>1、镜像（Image）</h4>
<p>Image 与 Container 的关系就像类与实例的关系，p 是容器，Person 是镜像：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure>
<h4 id="2-容器-container"><a class="header-anchor" href="#2-容器-container">¶</a>2、容器（Container）</h4>
<p>Docker 容器里存放着我们写的代码，然后 Docker 载着代码在宿主机里运行。</p>
<h4 id="3-仓库-repository"><a class="header-anchor" href="#3-仓库-repository">¶</a>3、仓库（Repository）</h4>
<p>仓库用来存放镜像，类似于 GitHub。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/docker-a/1.png" alt></p>
<h3 id="三-虚拟化的区别"><a class="header-anchor" href="#三-虚拟化的区别">¶</a>三、虚拟化的区别</h3>
<ul>
<li>Docker 的虚拟化是在系统层面实现</li>
<li>虚拟机的虚拟化是在硬件层面实现</li>
</ul>
<h3 id="四-注意"><a class="header-anchor" href="#四-注意">¶</a>四、注意</h3>
<ul>
<li>创建镜像后，只要不启动就不会生成容器，更不会启动容器</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 入门 - 数据类型</title>
    <url>/article/mysql-a.html</url>
    <content><![CDATA[<p>最近在学习 node，先学习一下相关的基础，捡起以前的数据库知识，这里记录一下 MySQL 的数据类型。</p>
<a id="more"></a>
<h3 id="一-常见数值类型"><a class="header-anchor" href="#一-常见数值类型">¶</a>一、常见数值类型</h3>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">占用大小</th>
<th style="text-align:center">范围（有符号）</th>
<th style="text-align:center">范围（无符号）</th>
<th style="text-align:center">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TINYINT</td>
<td style="text-align:center">1 字节</td>
<td style="text-align:center">(-128, 127)</td>
<td style="text-align:center">(0, 255)</td>
<td style="text-align:center">小整数值</td>
</tr>
<tr>
<td style="text-align:center">INT 或 INTEGER</td>
<td style="text-align:center">4 字节</td>
<td style="text-align:center">(-2 147 483 648, 2 147 483 647)</td>
<td style="text-align:center">(0, 4 294 967 295)</td>
<td style="text-align:center">大整数值</td>
</tr>
<tr>
<td style="text-align:center">FLOAT</td>
<td style="text-align:center">4 字节</td>
<td style="text-align:center">(-3.402 823 466 E+38, -1.175 494 351 E-38), 0, (1.175 494 351 E-38, 3.402 823 466 351 E+38)</td>
<td style="text-align:center">0, (1.175 494 351 E-38, 3.402 823 466 E+38)</td>
<td style="text-align:center">单精度浮点数值</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">8 字节</td>
<td style="text-align:center">(-1.797 693 134 862 315 7 E+308, -2.225 073 858 507 201 4 E-308), 0, (2.225 073 858 507 201 4 E-308, 1.797 693 134 862 315 7 E+308)</td>
<td style="text-align:center">0, (2.225 073 858 507 201 4 E-308, 1.797 693 134 862 315 7 E+308)</td>
<td style="text-align:center">双精度浮点数值</td>
</tr>
</tbody>
</table>
<ul>
<li>有符号：默认为有符号，从负数到正数的取值范围</li>
<li>无符号（UNSIGNED）：没有负数，最低从 0 开始</li>
</ul>
<p>对于平常开发来说，整数类型其实到 INT 的数值范围已经很大了。</p>
<p>建表时经常看到类似 INT(5) 后面有个 5，它表示显示宽度 (M)，M 的值不能大于取值范围长度。<br>
举个例子： 如果 age 字段类型是 INT(5) UNSIGNED ZEROFILL，插入一条数据 age 为 99，最后显示为：00099</p>
<p>UNSIGNED 为无符号， ZEROFILL 的作用是用 0 填充没有数字的位置</p>
<h3 id="二-常见字符串类型"><a class="header-anchor" href="#二-常见字符串类型">¶</a>二、常见字符串类型</h3>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">占用大小</th>
<th style="text-align:center">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CHAR</td>
<td style="text-align:center">0-255 字节</td>
<td style="text-align:center">定长字符串</td>
</tr>
<tr>
<td style="text-align:center">VARCHAR</td>
<td style="text-align:center">0-65535 字节</td>
<td style="text-align:center">变长字符串</td>
</tr>
<tr>
<td style="text-align:center">TINYTEXT</td>
<td style="text-align:center">0-255 字节</td>
<td style="text-align:center">短文本字符串</td>
</tr>
<tr>
<td style="text-align:center">TEXT</td>
<td style="text-align:center">0-65535 字节</td>
<td style="text-align:center">长文本字符串</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMTEXT</td>
<td style="text-align:center">0-16 777 215 字节</td>
<td style="text-align:center">中等长度文本数据</td>
</tr>
<tr>
<td style="text-align:center">LONGTEXT</td>
<td style="text-align:center">0-4 294 967 295 字节</td>
<td style="text-align:center">极大文本数据</td>
</tr>
</tbody>
</table>
<p>通常情况下，用的比较多的就是 CHAR、VARCHAR、TEXT 了。在 MySQL 的 UTF8 编码下：</p>
<ul>
<li>1 个英文字母（包括大小写）占 1 个字节</li>
<li>1 个汉字占 3 个字节</li>
</ul>
<h3 id="三-常见日期-时间类型"><a class="header-anchor" href="#三-常见日期-时间类型">¶</a>三、常见日期/时间类型</h3>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">占用大小</th>
<th style="text-align:center">范围</th>
<th style="text-align:center">格式</th>
<th style="text-align:center">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DATE</td>
<td style="text-align:center">3 字节</td>
<td style="text-align:center">1000-01-01/9999-12-31</td>
<td style="text-align:center">YYYY-MM-DD</td>
<td style="text-align:center">日期值</td>
</tr>
<tr>
<td style="text-align:center">TIME</td>
<td style="text-align:center">3 字节</td>
<td style="text-align:center">‘-838:59:59’/‘838:59:59’</td>
<td style="text-align:center">HH:MM:SS</td>
<td style="text-align:center">时间值或持续时间</td>
</tr>
<tr>
<td style="text-align:center">DATETIME</td>
<td style="text-align:center">8 字节</td>
<td style="text-align:center">1000-01-01 00:00:00/9999-12-31 23:59:59</td>
<td style="text-align:center">YYYY-MM-DD HH:MM:SS</td>
<td style="text-align:center">混合日期和时间值</td>
</tr>
<tr>
<td style="text-align:center">TIMESTAMP</td>
<td style="text-align:center">4 字节</td>
<td style="text-align:center">1970-01-01 00:00:00/2038 （结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038年1月19日 凌晨 03:14:07）</td>
<td style="text-align:center">YYYYMMDD HHMMSS</td>
<td style="text-align:center">混合日期和时间值，时间戳</td>
</tr>
</tbody>
</table>
<p>在开发中，常用的是 DATETIME 和 TIMESTAMP。</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Koa2 写 GET、POST 测试接口</title>
    <url>/article/koa-get-post.html</url>
    <content><![CDATA[<p>  刚接触 Koa2 框架，用 Koa2 写一下 GET 和 POST 接口，平常开发中可以测试使用。</p>
<a id="more"></a>
<h4 id="1-新建文件夹-并初始化"><a class="header-anchor" href="#1-新建文件夹-并初始化">¶</a>1、新建文件夹，并初始化</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir koa2-demo</span><br><span class="line">cd koa2-demo</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>
<h4 id="2-安装-koa-koa-router"><a class="header-anchor" href="#2-安装-koa-koa-router">¶</a>2、安装 koa、koa-router</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i koa koa-router koa-bodyparser -S</span><br></pre></td></tr></table></figure>
<h4 id="3-新增-app-js"><a class="header-anchor" href="#3-新增-app-js">¶</a>3、新增 app.js</h4>
<p>  通过<code>vim app.js</code>命令创建 app.js 文件并保存。代码见：<a href="https://github.com/liuxy0551/learn-node/blob/master/koa-get-post-demo/app.js" target="_black">koa-get-post-demo/app.js</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)() <span class="comment">// 引入并实例化</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"><span class="comment">// 配置中间件，通过 bodyParser 获取 post 请求传递过来的参数</span></span><br><span class="line">app.use(bodyParser())</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET 接口</span></span><br><span class="line">router.get(<span class="string">'/news'</span>, ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; search &#125; = ctx.query</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    time: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    data: [</span><br><span class="line">      &#123;</span><br><span class="line">        title: <span class="string">`新闻标题 1 - <span class="subst">$&#123; search &#125;</span>`</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        title: <span class="string">`新闻标题 2 - <span class="subst">$&#123; search &#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST 接口</span></span><br><span class="line">router.post(<span class="string">'/say'</span>, ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name &#125; = ctx.request.body</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    time: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    reply: <span class="string">`Hello <span class="subst">$&#123; name &#125;</span>!`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(router.routes()) <span class="comment">// 启动路由</span></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running on 3000'</span>)</span><br><span class="line">&#125;) <span class="comment">// 启动服务</span></span><br></pre></td></tr></table></figure>
<h4 id="4-启动服务"><a class="header-anchor" href="#4-启动服务">¶</a>4、启动服务</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure>
<p>  访问 <a href="http://localhost:3000/news?search=科技" target="_black">http://localhost:3000/news?search=科技</a> 查看效果。</p>
<p>  启动服务推荐使用<code>nodemon</code> —— <a href="https://liuxianyu.cn/article/node-auto-compile.html" target="_black">node 自动编译</a></p>
<h4 id="5-测试"><a class="header-anchor" href="#5-测试">¶</a>5、测试</h4>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/koa-get-post/1.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/koa-get-post/2.png" alt></div></div></div></div>
]]></content>
      <categories>
        <category>node</category>
        <category>Koa2</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>Koa2</tag>
      </tags>
  </entry>
  <entry>
    <title>接触 Koa2 框架</title>
    <url>/article/learn-koa.html</url>
    <content><![CDATA[<p>  刚接触 Koa2 框架，记录一下基础知识。学习过程代码可在 <a href="https://github.com/liuxy0551/learn-node/tree/master/learn-koa" target="_blank" rel="noopener">Github - learn-koa</a> 查看。</p>
<a id="more"></a>
<h3 id="一-koa"><a class="header-anchor" href="#一-koa">¶</a>一、Koa</h3>
<h4 id="1-安装-koa-框架"><a class="header-anchor" href="#1-安装-koa-框架">¶</a>1、安装 Koa 框架</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i koa -S</span><br></pre></td></tr></table></figure>
<h4 id="2-引入-koa"><a class="header-anchor" href="#2-引入-koa">¶</a>2、引入 Koa</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置中间件</span></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">'你好 koa'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(<span class="number">9000</span>)</span><br></pre></td></tr></table></figure>
<h3 id="二-koa-路由"><a class="header-anchor" href="#二-koa-路由">¶</a>二、Koa 路由</h3>
<h4 id="1-安装-koa-路由"><a class="header-anchor" href="#1-安装-koa-路由">¶</a>1、安装 Koa 路由</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i koa-router -S</span><br></pre></td></tr></table></figure>
<p>  路由就是根据不同的 URL 地址，加载不同的页面实现不同的功能。运行以下代码后在浏览器地址栏输入 localhost:9000 可以看到&quot;首页&quot;，输入 localhost:9000/news 可以看到&quot;新闻&quot;。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)() <span class="comment">// 引入并实例化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置路由</span></span><br><span class="line"><span class="comment">// ctx 上下文 context，包含了 request 和 response 等信息</span></span><br><span class="line">router</span><br><span class="line">  .get(<span class="string">'/'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">'首页'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .get(<span class="string">'/news'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">'新闻列表'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// get 传值</span></span><br><span class="line">  .get(<span class="string">'/newscontent'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">     <span class="comment">// 访问 http://localhost:9000/newscontent?aid=123&amp;name=zhangsan</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.query)</span><br><span class="line">    <span class="built_in">console</span>.log(ctx.request.query)          <span class="comment">// &#123; aid: '123', name: 'zhangsan' &#125;   对象</span></span><br><span class="line">    ctx.body = <span class="string">'新闻详情'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 动态路由</span></span><br><span class="line">  .get(<span class="string">'/newsdetail/:id'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">     <span class="comment">// 访问 http://localhost:9000/newsdetail/1234</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.params) <span class="comment">// &#123; id: 1234 &#125;</span></span><br><span class="line">    ctx.body = <span class="string">'新闻详情 - 动态路由'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 动态路由可以传入多个值</span></span><br><span class="line">  .get(<span class="string">'/newsdetail/:aid/:bid'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">     <span class="comment">// 访问 http://localhost:9000/newsdetail/1234/5678</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.params) <span class="comment">// &#123; aid: 1234, bid: 5678 &#125;</span></span><br><span class="line">    ctx.body = <span class="string">'新闻详情 - 动态路由 - 传入多个值'</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">  .use(router.routes())           <span class="comment">// 启动路由</span></span><br><span class="line">  .use(router.allowedMethods())   <span class="comment">// router.allowedMethods() 用在路由匹配 router.routes() 之后，所以在当所有路由中间件最后调用，此时根据 ctx.status 设置 response 响应头</span></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">9000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'请浏览器打开 http://localhost:9000 或 http://localhost:9000'</span>)</span><br></pre></td></tr></table></figure>
<h4 id="2-koa-路由-get-传值"><a class="header-anchor" href="#2-koa-路由-get-传值">¶</a>2、Koa 路由 get 传值</h4>
<p>  在 Koa2 中 GET 传值通过 ctx 或 ctx.request 接收；动态路由传值可通过 ctx.params 接收。代码见 <a href="https://github.com/liuxy0551/learn-node/blob/master/learn-koa/app03.js#L18" target="_blank" rel="noopener">Github - learn-koa/app03.js</a></p>
<ul>
<li>query 返回的是格式化好的参数对象<code>推荐</code></li>
<li>queryString 返回的是请求字符串</li>
</ul>
<h3 id="三-中间件"><a class="header-anchor" href="#三-中间件">¶</a>三、中间件</h3>
<h4 id="1-应用级中间件"><a class="header-anchor" href="#1-应用级中间件">¶</a>1、应用级中间件</h4>
<p>  代码见 <a href="https://github.com/liuxy0551/learn-node/blob/master/learn-koa/app04.js" target="_blank" rel="noopener">Github - learn-koa/app04.js</a></p>
<h4 id="2-路由中间件"><a class="header-anchor" href="#2-路由中间件">¶</a>2、路由中间件</h4>
<p>  代码见 <a href="https://github.com/liuxy0551/learn-node/blob/master/learn-koa/app05.js" target="_blank" rel="noopener">Github - learn-koa/app05.js</a></p>
<h4 id="3-错误处理中间件"><a class="header-anchor" href="#3-错误处理中间件">¶</a>3、错误处理中间件</h4>
<p>  代码见 <a href="https://github.com/liuxy0551/learn-node/blob/master/learn-koa/app06.js" target="_blank" rel="noopener">Github - learn-koa/app06.js</a></p>
<h4 id="4-中间件处理顺序-koa2-的洋葱模型"><a class="header-anchor" href="#4-中间件处理顺序-koa2-的洋葱模型">¶</a>4、中间件处理顺序 - Koa2 的洋葱模型</h4>
<p>  代码见 <a href="https://github.com/liuxy0551/learn-node/blob/master/learn-koa/app07.js" target="_blank" rel="noopener">Github - learn-koa/app07.js</a></p>
]]></content>
      <categories>
        <category>node</category>
        <category>Koa2</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>Koa2</tag>
      </tags>
  </entry>
  <entry>
    <title>node 学习笔记</title>
    <url>/article/learn-node.html</url>
    <content><![CDATA[<p>记录一下 node 的学习笔记，学习过程代码可在 <a href="https://github.com/liuxy0551/learn-node" target="_blank" rel="noopener">Github</a> 查看。</p>
<a id="more"></a>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中的原型和原型链</title>
    <url>/article/js-prototype.html</url>
    <content><![CDATA[<p>  这里做做原型和原型链的笔记。</p>
<a id="more"></a>
<p><strong>文字理解：</strong></p>
<p>  每个函数都有一个<code>prototype</code>属性，当这个函数作为构造函数的时候，实例化出来的函数(以下称实例)会有一个<code>__proto__</code>属性，这个<code>__proto__</code>属性指向构造函数的<code>prototype</code>。<br>
  实例通过<code>prototype</code>来访问其父元素的属性和方法，依次迭代访问构成原型链，直到 Object 原型的<code>prototype</code>为<code>null</code>，此时位于原型链的顶端。<br>
  每个实例原型都有一个<code>constructor</code>属性指向关联的构造函数。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/js-prototype/5.png" alt></p>
<h3 id="一-构造函数创建对象"><a class="header-anchor" href="#一-构造函数创建对象">¶</a>一、构造函数创建对象</h3>
<h4 id="1-prototype"><a class="header-anchor" href="#1-prototype">¶</a>1、prototype</h4>
<p>每个函数都有一个 prototype 属性，如利用构造函数 Student 创建实例对象 stuA 和 stuB：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">Student.prototype.name = <span class="string">'Simon'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stuA = <span class="keyword">new</span> Student()</span><br><span class="line"><span class="keyword">let</span> stuB = <span class="keyword">new</span> Student()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stuA.name) <span class="comment">// Simon</span></span><br><span class="line"><span class="built_in">console</span>.log(stuB.name) <span class="comment">// Simon</span></span><br></pre></td></tr></table></figure>
<p>函数的 prototype 属性指向调用该构造函数而创建的实例的原型，也就是上述代码中 stuA 和 stuB 的原型，如下图：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/js-prototype/1.png" alt></p>
<h4 id="2-proto"><a class="header-anchor" href="#2-proto">¶</a>2、<code>__proto__</code></h4>
<p>这是每一个 JavaScript 对象（除 null）都具有的一个属性，这个属性会指向该对象的原型。验证：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu = <span class="keyword">new</span> Student()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stu.__proto__ === Student.prototype) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>实例对象和构造函数都可以指向原型，如下图：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/js-prototype/2.png" alt></p>
<h4 id="3-constructor"><a class="header-anchor" href="#3-constructor">¶</a>3、constructor</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu = <span class="keyword">new</span> Student()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Student === Student.prototype.constructor) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>每个原型都有一个 constructor 属性指向关联的构造函数，如下图所示构造函数、实例原型和实例之间的关系：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/js-prototype/3.png" alt></p>
<blockquote>
<p><strong>综上可以得出：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu = <span class="keyword">new</span> Student()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stu.__proto__ === Student.prototype)              <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Student.prototype.constructor === Student)        <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(stu) === Student.prototype) <span class="comment">// true, getPrototypeOf 可以获得对象的原型</span></span><br></pre></td></tr></table></figure>
<h3 id="实例与原型"><a class="header-anchor" href="#实例与原型">¶</a>实例与原型</h3>
<p>当读取实例对象的属性时，如果找不到，则查找与对象关联的原型中的该属性，如果还是找不到，则去查找原型的原型，一直找到最顶层。如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">Student.prototype.name = <span class="string">'zhangsan'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu = <span class="keyword">new</span> Student()</span><br><span class="line"></span><br><span class="line">stu.name = <span class="string">'lisi'</span></span><br><span class="line"><span class="built_in">console</span>.log(stu.name) <span class="comment">// lisi</span></span><br><span class="line"><span class="keyword">delete</span> stu.name</span><br><span class="line"><span class="built_in">console</span>.log(stu.name) <span class="comment">// zhangsan</span></span><br></pre></td></tr></table></figure>
<p>在 delete 了实例 stu 的 name 属性后，从 stu 就找不到 name 属性就会从 stu 的原型也就是<code>stu.__proto__</code>，也就是 Student.prototype 中查找 name 属性。</p>
<h3 id="原型的原型"><a class="header-anchor" href="#原型的原型">¶</a>原型的原型</h3>
<p>如果在 stu 的原型没有找到 name 属性的话，就会在 stu 的原型的原型上查找 name 属性，那原型的原型是什么呢？</p>
<p>前面有提到原型也是对象，其实原型对象就是通过 Object 构造函数创建的，实例的 <strong>proto</strong> 指向构造函数的 prototype，如下图：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/js-prototype/4.png" alt></p>
<h3 id="原型链"><a class="header-anchor" href="#原型链">¶</a>原型链</h3>
<p>那么 Object.prototype 的原型呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__) <span class="comment">// null</span></span><br></pre></td></tr></table></figure>
<p>Object.prototype 的原型是 null，即 Object.prototype 没有原型。意味着查找属性的时候查到 Object.prototype 就可以停止查找了。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/js-prototype/5.png" alt></p>
<p>上图中相互关联的原型组成的链状结构就是原型链，也就是上图中蓝色的线。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>回顾 2019，展望 2020</title>
    <url>/article/2019-2020.html</url>
    <content><![CDATA[<p>2019 年过得很快，2020 年来的也很快，年度总结和年度规划实际上是拖了几天了，今天抽空完成了，其实也都是瞎忙。</p>
<a id="more"></a>
<h3 id="一-回顾"><a class="header-anchor" href="#一-回顾">¶</a>一、回顾</h3>
<h4 id="1-生活-差"><a class="header-anchor" href="#1-生活-差">¶</a>1、生活 - 差</h4>
<p>2019 年的生活可以总结为差。<br>
　　1月份靠天吃饭，在腊月十七的时候就回了合肥，真真的体会到&quot;有钱男子汉，没钱汉子难&quot;。2月底花了两周左右的时间在 3 月初找到新工作，入职后生活渐渐步入正轨。<br>
　　和大学同学&quot;合租&quot;这件事在现在看来是不对的。<br>
　　5 月份的时候去下沙找郝老板拿了 5000 块，加上回合肥过年前拿的 3000 块共 8000 块，在我心里，我是按照大行星项目尾款去计算的。说实话，这样不是很合适，但是生活的实际情况已让我无法做其他选择，同时我对郝老板也从以前的感谢变成了如今的淡然，世事难料。<br>
　　现在写这些的时候，想起和国栋在利一家园四周想象未来的场景，甚至有点心酸，也有点无力。<br>
　　年中因为接触虚拟货币，后续一言难尽，不太想讲，希望以后引以为戒。2019 年并没有什么积蓄，但是从收入情况来看，也不是很糟。<br>
　　在年尾的时候还是和萍商量去了义务一趟，实际效果给 70 分，因为本身也没有抱 80 分的希望。<br>
　　2019 年也没有做什么运动，这样对身体是不太好的，知易行难。<br>
　　在感情方面请坚持和萍一样，同时也请成长，<code>五年</code>。</p>
<h4 id="2-工作-良"><a class="header-anchor" href="#2-工作-良">¶</a>2、工作 - 良</h4>
<p>2019 年的工作能给出良的评分，完全是因为生芽和三木的原因。3 月 4 号入职生芽前的那段时间，谈不上差，谈不上差的意思是连差都不如，就是这么让人失望。<br>
　　年初因为自己对于无基本工资保证做外包的虚高期望以及对郝老板的信任，致使经济上一塌糊涂，几近吃不上饭，想想也是太傻太年轻。<br>
　　2 月底实在等不及郝老板的融资进程，和国栋都开始找工作。在 3 月 4 号加入生芽大家庭，当时龙修（时任技术总监）还在我要求的薪资基础上加了点。现在看来好在加了一点，否则到目前为止都没有谈薪，估计我的心理上会有很大落差。其实这里也有一些槽点。<br>
　　入职一星期的时候郝老板以薪资翻倍叫我和国栋回去工作，我们但是思考再三还是拒绝了，当时考虑的有两点：一是以前的生活历历在目，二是新公司的同事很乐于教我，这些都是幸运的。<br>
　　入职生芽后第一个项目是生芽课程，赶工期、没有产品、没有有效推进，基本开始的时候，我自己也不太看好这个项目，实际上也是如此，上线即死亡。到开始第二项目中间，因为公司的战略思考，我有了接近两个月较为悠闲的时间，但是说实话并没有利用好，大部分时间和精力花在了虚拟货币上，还和三木一起做了一个虚拟货币自动买卖的管理后台。以后要好好思考投资理财。<br>
　　第二个项目是橙就业系列项目，这个项目在开始的时候我觉得很少人会在手机上去发布招聘信息、填写简历，在企业版和学生版都初步上线后，果然还是要退出企业版的 PC 端，这个临时的需求是令人痛苦的，因为时间非常紧，当时要求在国庆前上线，防止国庆假期太长而生疏了代码，有点道理吧，但是时间太紧。写企业版 PC 端的过程几乎都是前端的活，因为接口和移动端的基本一致。在此时，发现了一些前期开发中我没有注意到的问题，两个人写的相关代码居然字段名不一致，对此我需要检讨，三木说应该在开发初期就要求后端改正，以后注意。很庆幸我们在国庆假期前基本完成了，结束那晚是两点多到家的。较规定时间，我们还给自己留了一天工作时间，这一天是工作日，但是我没做什么工作，因为我没做过这么累的前端，三木也没有做过。这个 9 月份让人难忘，因为加班太多，三木还回去贴了活血止痛膏，最后一天我忙的工作时间超过 16 个小时，除了我的亲人朋友，应该是没有其他人关心的。<br>
　　国庆前也并没有上线，还是觉得公司缺少某个岗位去统筹推荐各个项目推进。希望后面越来越好吧。<br>
　　国庆之后基本就是修修补补，做做版本迭代，但基本每次版本迭代都会有新需求插队，好想要那种规范的迭代升级啊。期间最大的需求就是上架钉钉应用市场，很庆幸在 2019 年 12 月 31 日，我们上架了钉钉应用市场，历时近一个半月，心疼项目组好多遍。后续我会整理一下这次上架相关的一些文档资料和注意事项。<br>
　　上架期间主要是后端同学忙的多，所以我和三木在 10 月份时想利用下班时间给自己做做项目，我提出的是记账小程序（自用），三木提出的互赞帮（双十一盖楼、拼多多砍价等）。三木是全栈，用 Ruby 很快就把互赞帮撸出来了，我帮着他写了移动端的几个页面，同时也接下了互赞帮的管理后台，主要是为了学习。实际上也学到了不少，这个项目现在虽然没什么人用，但是我学习的目的达到了。<br>
　　<code>2019 年的工作很感谢三木。</code></p>
<h3 id="二-展望"><a class="header-anchor" href="#二-展望">¶</a>二、展望</h3>
<h4 id="1-生活"><a class="header-anchor" href="#1-生活">¶</a>1、生活</h4>
<p>我对 2020 年的生活并没有太大的期望，回家、买车、成长，还有就是元旦是否有机会见面，以及见面的成效。<br>
　　5 月份房屋合同到期，到时候是去是留也就基本明了了，但是既然做出了承诺，还是算作定数吧，只是可能去义务不太方便了，希望自己不要就这么放弃了。<br>
　　多陪陪家人吧，督促他们不要太劳累，让我们年轻人来承受多一点，只是为了以后能够有更多的时间陪伴我们。<br>
　　运动运动吧，快两个萍了。<br>
　　话少点吧，言多必失。<br>
　　<code>身体健康</code>，<code>五年</code></p>
<h4 id="2-工作"><a class="header-anchor" href="#2-工作">¶</a>2、工作</h4>
<p>2020 年的工作是重点，也是起点，尽量稳重点，做好准备工作。<br>
　　要在技术深度方面继续努力。</p>
]]></content>
      <categories>
        <category>小思</category>
      </categories>
  </entry>
  <entry>
    <title>H5 中的 Audio</title>
    <url>/article/h5-audio.html</url>
    <content><![CDATA[<p>最近这个项目中在做题的时候需要播放语音，浏览器上自动播放 audio 或者 video 一直有这样或那样的限制和兼容问题。这里记录一下实现过程。</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">src</td>
<td>音频 URL</td>
</tr>
<tr>
<td style="text-align:center">muted</td>
<td>规定音频输出时应该被静音</td>
</tr>
<tr>
<td style="text-align:center">autoplay</td>
<td>音频在就绪后马上播放</td>
</tr>
<tr>
<td style="text-align:center">controls</td>
<td>向用户显示控件，如播放按钮</td>
</tr>
<tr>
<td style="text-align:center">loop</td>
<td>每当音频结束时重新开始播放</td>
</tr>
<tr>
<td style="text-align:center">preload</td>
<td>音频在页面加载时进行加载，并预备播放。如果同时使用了 autoplay，则忽略该属性</td>
</tr>
</tbody>
</table>
<p>浏览器为了提高用户体验，减少数据消耗，audio 的 autoplay 实现需要绕弯子：</p>
<blockquote>
<p>1、发生了用户行为，如：click、tap、etc<br>
2、监听最外层 div 的鼠标移入事件，&lt;div (mouseenter)=“play()”&gt; <code>待验证</code></p>
</blockquote>
<p>否则，在 mounted 中直接调用<code>this.Player.play()</code>时 Chrome 会报错<code>Uncaught (in promise) DOMException: play() failed because the user didn't interact with the document first.</code></p>
<h3 id="一-封装-js-方法"><a class="header-anchor" href="#一-封装-js-方法">¶</a>一、封装 js 方法</h3>
<p>先写一个公用 js 文件：<code>AudioPlayer.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AudioPlayer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (audioList = [], options = null) &#123;</span><br><span class="line">    options = <span class="built_in">Object</span>.assign(&#123; <span class="attr">speed</span>: <span class="number">1.0</span>, <span class="attr">onEnd</span>: <span class="literal">null</span> &#125;, options)</span><br><span class="line">    <span class="keyword">this</span>.onEnd = options.onEnd</span><br><span class="line">    <span class="keyword">if</span> (audioList) &#123;</span><br><span class="line">      <span class="keyword">this</span>.audio = <span class="built_in">document</span>.createElement(<span class="string">'audio'</span>)</span><br><span class="line">      <span class="keyword">this</span>.audio.src = audioList[<span class="number">0</span>] || audioList[<span class="number">1</span>]</span><br><span class="line">      <span class="comment">// this.audio.muted = true</span></span><br><span class="line">      <span class="comment">// this.audio.autoplay = 'autoplay'</span></span><br><span class="line">      <span class="comment">// 播放速度</span></span><br><span class="line">      <span class="keyword">this</span>.audio.playbackRate = options.speed</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 开始播放</span></span><br><span class="line">  play () &#123;</span><br><span class="line">    <span class="keyword">this</span>.audio.play()</span><br><span class="line">    <span class="keyword">this</span>.onEnd &amp;&amp; <span class="keyword">this</span>.audio.addEventListener(<span class="string">'ended'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.onEnd()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AudioPlayer</span><br></pre></td></tr></table></figure>
<h3 id="二-使用"><a class="header-anchor" href="#二-使用">¶</a>二、使用</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> AudioPlayer <span class="keyword">from</span> <span class="string">'../utils/media/AudioPlayer'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      Player: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 点击播放按钮</span></span><br><span class="line">    playBtn () &#123;</span><br><span class="line">      <span class="keyword">this</span>.Player.audio.muted = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">this</span>.Player.play()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.Player = <span class="keyword">new</span> AudioPlayer(audioList, &#123; <span class="attr">speed</span>: <span class="number">1.25</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p></p>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p>  1、<a href="https://juejin.im/post/5af7129bf265da0b8262df4c" target="_blank" rel="noopener">Chrome 66禁止声音自动播放之后</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 CSS 绘制内外不同圆角的矩形、钝角三角形</title>
    <url>/article/css-rectangle-triangle.html</url>
    <content><![CDATA[<p>最近做的项目中 UI 同学给了个内外不同圆角的矩形和钝角三角形的设计，这里记录一下完成过程。</p>
<a id="more"></a>
<h3 id="一-实现效果"><a class="header-anchor" href="#一-实现效果">¶</a>一、实现效果</h3>
<p>矩形内部圆角和外部圆角不一致，钝角三角形上不完全覆盖另一个钝角三角形的图案，且两个钝角处圆润程度不一致。<br>
前期项目赶时间的时候用直角三角形实现了，本着不偷工减料及钻研的态度，利用<code>伪类</code>按照设计图实现了一下。蓝色为设计图部分，绿色为实现部分。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/css-rectangle-triangle/7.png" alt></p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/css-rectangle-triangle/1.png" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/css-rectangle-triangle/2.png" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/css-rectangle-triangle/3.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/css-rectangle-triangle/4.png" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/css-rectangle-triangle/5.png" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/css-rectangle-triangle/6.png" alt></div></div></div></div>
<h3 id="二-矩形代码"><a class="header-anchor" href="#二-矩形代码">¶</a>二、矩形代码</h3>
<p>具体实现代码可参考：<a href="https://github.com/liuxy0551/vue-cli3-build-optimization/blob/master/src/pages/css/rectangle.vue" target="_blank" rel="noopener">rectangle.vue</a></p>
<p>1、HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rectangle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.rectangle</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  &amp;:before, &amp;:after &#123;</span><br><span class="line">    content: '';</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">325px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">180px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#41b883</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">305px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">160px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三-钝角三角形代码"><a class="header-anchor" href="#三-钝角三角形代码">¶</a>三、钝角三角形代码</h3>
<p>具体实现代码可参考：<a href="https://github.com/liuxy0551/vue-cli3-build-optimization/blob/master/src/pages/css/triangle.vue" target="_blank" rel="noopener">triangle.vue</a></p>
<p>1、HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">90px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  &amp;:before, &amp;:after &#123;</span><br><span class="line">    content: '';</span><br><span class="line">    <span class="selector-tag">width</span>: 50<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 50<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">    <span class="selector-tag">transform</span>: <span class="selector-tag">scaleY</span>(1<span class="selector-class">.3</span>) <span class="selector-tag">translate</span>(30%, <span class="selector-tag">-30px</span>) <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">59px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#41b883</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">59px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="四-气泡对话框"><a class="header-anchor" href="#四-气泡对话框">¶</a>四、气泡对话框</h3>
<p>具体实现代码可参考：<a href="https://github.com/liuxy0551/vue-cli3-build-optimization/blob/master/src/pages/css/bubble.vue" target="_blank" rel="noopener">bubble.vue</a></p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/css-rectangle-triangle/7.png" alt></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>在 VMware 中安装体验 UOS</title>
    <url>/article/vmware-uos.html</url>
    <content><![CDATA[<p>最近看到国产系统<code>UOS</code>在进行内测，以诚恳的言辞申请并加入了内测，这里有一些虚拟机的体验截图。</p>
<a id="more"></a>
<p>官网：<a href="https://www.chinauos.com/" target="_blank" rel="noopener">https://www.chinauos.com/</a>。</p>
<p>简单体验十几分钟后，有以下几点感受：</p>
<ul>
<li>1、随处可见的 deepin 标记</li>
<li>2、左下角抽屉有 Windows 的痕迹，展开抽屉有 MacOS 的痕迹</li>
<li>3、展开抽屉后滚动时不是很流畅，这对于天天与电脑打交道的人来说很难受</li>
<li>4、终端不是很美观</li>
<li>5、应用商店似乎还是不能用的</li>
<li>6、文件管理器文件夹之间的大小有点不太合适</li>
<li>7、设置中的各个模块长的似乎是为了在平板上看着舒服点</li>
<li>8、毛玻璃效果我很喜欢</li>
</ul>
<p>总结来说：国产系统<code>任重道远</code>，加油。</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/1.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/2.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/3.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/4.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/5.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/6.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/7.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/8.png" alt></div></div></div></div>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/9.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/10.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/11.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/12.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/13.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/14.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/15.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/16.png" alt></div></div></div></div>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/17.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/18.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/19.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/20.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/21.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-uos/22.png" alt></div></div><div class="group-picture-row"></div></div></div>
]]></content>
      <categories>
        <category>Linux</category>
        <category>UOS</category>
      </categories>
      <tags>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>前端项目优化之旅（五）—— Vue 路由懒加载、组件懒加载</title>
    <url>/article/vue-cli3-router-load-lazy.html</url>
    <content><![CDATA[<p>  <code>前端项目优化之旅</code>系列随笔主要记录工作中遇到的一些优化方案，这里记录一下 Vue 中的路由懒加载。</p>
<a id="more"></a>
<p>  可以看看官方文档：<a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html" target="_black">Vue Router 路由懒加载</a>，写得浅显易懂。</p>
<h3 id="一-为什么"><a class="header-anchor" href="#一-为什么">¶</a>一、为什么</h3>
<p>  打包构建后，运用 webpack 打包后的文件变得非常大，在用户进入首页时，需要加载整个项目的资源，时间过长。即使做了 loading 或者骨架屏也不利于用户体验。</p>
<h3 id="二-路由懒加载"><a class="header-anchor" href="#二-路由懒加载">¶</a>二、路由懒加载</h3>
<p>  如果能把不同路由对应的组件分割成不同的代码块，在路由被访问时才加载对应组件，能有效减小首页的加载压力。但是当跳转到新页面的时候，需要等待新页面 js 文件的加载，体验会变差。</p>
<p>  <code>router.js</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'home-group' */</span> <span class="string">'../views/home'</span>) &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>  搭配 Vue 异步组件和 Webpack 的代码分割功能<code>webpackChunkName</code>实现懒加载，参考：<a href="https://github.com/liuxy0551/my-vue/blob/master/src/router.js" target="_black">router.js</a>。</p>
<h3 id="三-组件懒加载"><a class="header-anchor" href="#三-组件懒加载">¶</a>三、组件懒加载</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Navigator = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'home-group' */</span> <span class="string">'../components/Navigator'</span>)</span><br><span class="line">...</span><br><span class="line">components: &#123; Navigator &#125;</span><br></pre></td></tr></table></figure>
<h3 id="四-webpackprefetch"><a class="header-anchor" href="#四-webpackprefetch">¶</a>四、webpackPrefetch</h3>
<p>  在 Vue CLI 3 中我们还可以再做一步：因为 Vue CLI 3 默认开启了<code>prefetch</code>（预加载模块），用来告诉浏览器在页面加载完成后，利用空闲时间提前获取用户未来可能会访问的内容。可以考虑关闭这个功能，在<code>vue.config.js</code>中设置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 移除 prefetch 插件</span></span><br><span class="line">    config.plugins.delete(<span class="string">'prefetch'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 或者</span></span><br><span class="line">    <span class="comment">// 修改 prefetch 的选项：</span></span><br><span class="line">    config.plugin(<span class="string">'prefetch'</span>).tap(<span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">      options[<span class="number">0</span>].fileBlacklist = options[<span class="number">0</span>].fileBlacklist || []</span><br><span class="line">      options[<span class="number">0</span>].fileBlacklist.push(<span class="regexp">/myasyncRoute(.)+?\.js$/</span>)</span><br><span class="line">      <span class="keyword">return</span> options</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  当<code>prefetch</code>插件被禁用时，可以通过 webpack 的内联注释手动选定要提前获取的代码区块：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">'/element'</span>, <span class="attr">name</span>: <span class="string">'Element'</span>, <span class="attr">component</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackPrefetch: true */</span> <span class="string">'../src/pages/element'</span>) &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>项目优化</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端项目优化之旅（四）—— Element 按需引入组件</title>
    <url>/article/vue-cli3-element-load-on-demand.html</url>
    <content><![CDATA[<p>  <code>前端项目优化之旅</code>系列随笔主要记录工作中遇到的一些优化方案，这里记录一下 Vue CLI 3 项目中如何让 Element 按需引入组件。</p>
<a id="more"></a>
<h3 id="一-安装-element"><a class="header-anchor" href="#一-安装-element">¶</a>一、安装 Element</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure>
<h3 id="二-完整引入"><a class="header-anchor" href="#二-完整引入">¶</a>二、完整引入</h3>
<p>在 main.js 中写入以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-cli3-element-load-on-demand/1.png" alt></p>
<h3 id="三-按需引入"><a class="header-anchor" href="#三-按需引入">¶</a>三、按需引入</h3>
<p>1、在<code>src/components</code>下新建<code>element.js</code>文件，具体代码见 <a href="https://github.com/liuxy0551/vue-cli3-build-optimization/blob/master/src/components/element.js" target="_blank" rel="noopener">src/components/element.js</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按需引入 Element 组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; Input, Select, Option &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">let</span> elementUIs = [Input, Select, Option]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install (Vue) &#123;</span><br><span class="line">    elementUIs.forEach(<span class="function"><span class="params">elementUI</span> =&gt;</span> [</span><br><span class="line">      Vue.component(elementUI.name, elementUI)</span><br><span class="line">      <span class="comment">// Vue.use(elementUI)    // 也可以使用 Vue.use()</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、在<code>main.js</code>中引入<code>src/components/element.js</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> element <span class="keyword">from</span> <span class="string">'./components/element'</span></span><br><span class="line">Vue.use(element)</span><br></pre></td></tr></table></figure>
<p>3、页面使用组件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-input v-model.trim=<span class="string">"msg"</span> placeholder=<span class="string">"请输入，最长 20 位，无空格"</span> maxlength=<span class="string">"20"</span> clearable&gt;&lt;<span class="regexp">/el-input&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-cli3-element-load-on-demand/2.png" alt></p>
<ul>
<li>主要体现在 element 文件大小减少了约<code>1.5 MB</code></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>项目优化</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>Element UI</tag>
      </tags>
  </entry>
  <entry>
    <title>前端项目优化之旅（三）—— Lodash 单独引入函数</title>
    <url>/article/vue-cli3-lodash.html</url>
    <content><![CDATA[<p>  <code>前端项目优化之旅</code>系列随笔主要记录工作中遇到的一些优化方案，这里记录一下在 Vue CLI 3 项目中单独引用 Lodash 函数。</p>
<a id="more"></a>
<h3 id="一-安装-lodash"><a class="header-anchor" href="#一-安装-lodash">¶</a>一、安装 lodash</h3>
<p><a href="https://www.lodashjs.com/docs/latest" target="_blank" rel="noopener">Lodash</a> 经常用来处理一些复杂的数据逻辑，比如常见的：数组去重、数组删除元素等等，可以有效减少项目中的复杂逻辑代码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i lodash -S</span><br></pre></td></tr></table></figure>
<h3 id="二-完全引入-lodash"><a class="header-anchor" href="#二-完全引入-lodash">¶</a>二、完全引入 lodash</h3>
<p>举例：拆分数组（生成二维数组）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"></span><br><span class="line">_.chunk([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="number">2</span>)</span><br><span class="line"><span class="comment">// =&gt; [['a', 'b'], ['c', 'd']]</span></span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-cli3-lodash/1.png" alt></p>
<h3 id="三-单独引入-lodash-推荐"><a class="header-anchor" href="#三-单独引入-lodash-推荐">¶</a>三、单独引入 lodash <code>推荐</code></h3>
<p>举例：拆分数组（生成二维数组）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> chunk <span class="keyword">from</span> <span class="string">'lodash/chunk'</span></span><br><span class="line"></span><br><span class="line">chunk([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="number">2</span>)</span><br><span class="line"><span class="comment">// =&gt; [['a', 'b'], ['c', 'd']]</span></span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-cli3-lodash/2.png" alt></p>
<ul>
<li>主要体现在 element 文件大小减少了约<code>550+ KB</code></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>项目优化</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>Lodash</tag>
      </tags>
  </entry>
  <entry>
    <title>前端项目优化之旅（二）—— Vant 自动按需引入组件</title>
    <url>/article/vue-cli3-vant-load-on-demand.html</url>
    <content><![CDATA[<p>  <code>前端项目优化之旅</code>系列随笔主要记录工作中遇到的一些优化方案，这里记录一下 Vue CLI 3 项目中如何让 Vant 自动按需引入组件。</p>
<a id="more"></a>
<h3 id="一-安装-vant"><a class="header-anchor" href="#一-安装-vant">¶</a>一、安装 Vant</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i vant -S</span><br></pre></td></tr></table></figure>
<h3 id="二-完整引入"><a class="header-anchor" href="#二-完整引入">¶</a>二、完整引入</h3>
<p>  在 main.js 中写入以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vant <span class="keyword">from</span> <span class="string">'vant'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'vant/lib/index.css'</span></span><br><span class="line">Vue.use(Vant)</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-cli3-vant-load-on-demand/1.png" alt></p>
<h3 id="三-自动按需引入组件推荐"><a class="header-anchor" href="#三-自动按需引入组件推荐">¶</a>三、自动按需引入组件<code>推荐</code></h3>
<p>  1、<a href="https://github.com/ant-design/babel-plugin-import" target="_blank" rel="noopener">babel-plugin-import</a> 是一款 babel 插件，它能在编译的过程中将 import 写法自动转换为按需引入的方式。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i babel-plugin-import -D</span><br></pre></td></tr></table></figure>
<p>  2、babel 7 在<code>babel.config.js</code>中配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 自动按需引入 Vant 组件</span></span><br><span class="line">  plugins: [</span><br><span class="line">    [<span class="string">'import'</span>, &#123; <span class="attr">libraryName</span>: <span class="string">'vant'</span>, <span class="attr">libraryDirectory</span>: <span class="string">'es'</span>, <span class="attr">style</span>: <span class="literal">true</span> &#125;, <span class="string">'vant'</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  3、在<code>src/components</code>下新建<code>vant.js</code>文件，具体代码见 <a href="https://github.com/liuxy0551/vue-cli3-build-optimization/blob/master/src/components/vant.js" target="_blank" rel="noopener">src/components/vant.js</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自动按需引入 Vant 组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; Tabbar, TabbarItem, Button &#125; <span class="keyword">from</span> <span class="string">'vant'</span></span><br><span class="line"><span class="keyword">let</span> vantUIs = [Tabbar, TabbarItem, Button]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install (Vue) &#123;</span><br><span class="line">    vantUIs.forEach(<span class="function"><span class="params">vantUI</span> =&gt;</span> &#123;</span><br><span class="line">      Vue.component(vantUI.name, vantUI)</span><br><span class="line">      <span class="comment">// Vue.use(vantUI)    // 也可以使用 Vue.use()</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  4、在<code>main.js</code>中引入<code>src/components/vant.js</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vant <span class="keyword">from</span> <span class="string">'./components/vant'</span></span><br><span class="line">Vue.use(vant)</span><br></pre></td></tr></table></figure>
<p>  5、页面使用组件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;van-button type=<span class="string">"default"</span>&gt;默认按钮&lt;<span class="regexp">/van-button&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-cli3-vant-load-on-demand/2.png" alt></p>
<ul>
<li>主要体现在 vant 文件大小减少了约<code>384 KB</code></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>项目优化</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>Vant</tag>
      </tags>
  </entry>
  <entry>
    <title>前端项目优化之旅（一）—— 分析插件</title>
    <url>/article/vue-cli3-analyzer.html</url>
    <content><![CDATA[<p>上个月有好几个项目需要部署上线，其中有一个项目需要在钉钉第三方应用市场上线，而钉钉对于页面性能、白屏率等有硬性要求，所以对这个项目做了很多打包优化。<br>
<code>前端项目优化之旅</code>将以基于 Vue CLI 3 新写的 <a href="https://github.com/liuxy0551/vue-cli3-build-optimization" target="_blank" rel="noopener">vue-cli3-build-optimization</a> 作为记录对象，记录一些优化方法：</p>
<a id="more"></a>
<h3 id="分析工具"><a class="header-anchor" href="#分析工具">¶</a>分析工具</h3>
<p>在优化之前，我们需要知道项目构建后，哪里显得臃肿、哪些文件过大、哪些可以删除等等。这个时候，可视化的分析工具就显得很重要了。</p>
<h4 id="1-安装分析插件"><a class="header-anchor" href="#1-安装分析插件">¶</a>1、安装分析插件</h4>
<p>安装<code>webpack-bundle-analyzer</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i webpack-bundle-analyzer</span><br></pre></td></tr></table></figure>
<p>有以下两种配置方案，推荐第一种</p>
<h4 id="2-运行指定命令查看推荐"><a class="header-anchor" href="#2-运行指定命令查看推荐">¶</a>2、运行指定命令查看<code>推荐</code></h4>
<p>将分析插件作为一个独立的 script，在<code>package.json -&gt; scripts</code>中添加一行<code>&quot;analyzer&quot;: &quot;use_analyzer=true npm run serve&quot;</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">package.json</span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"use_analyzer=true npm run serve"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 vue.config.js 中对 webpack 进行配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.use_analyzer) &#123;</span><br><span class="line">      config</span><br><span class="line">        .plugin(<span class="string">'webpack-bundle-analyzer'</span>)</span><br><span class="line">        .use(<span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样只会在使用以下命令时才会自动打开浏览器并访问 <a href="http://127.0.0.1:8888/" target="_blank" rel="noopener">http://127.0.0.1:8888</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run analyzer</span><br></pre></td></tr></table></figure>
<h4 id="3-运行即查看"><a class="header-anchor" href="#3-运行即查看">¶</a>3、运行即查看</h4>
<p>在 vue.config.js 中对 webpack 进行配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config</span><br><span class="line">      .plugin(<span class="string">'webpack-bundle-analyzer'</span>)</span><br><span class="line">      .use(<span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下运行<code>npm run serve</code>即可，会自动打开浏览器并访问 <a href="http://127.0.0.1:8888/" target="_blank" rel="noopener">http://127.0.0.1:8888</a></p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-cli3-analyzer/1.png" alt><br>
<img src="https://images-hosting.liuxianyu.cn/posts/vue-cli3-analyzer/2.png" alt></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>项目优化</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中一些常见的方法</title>
    <url>/article/js-functions.html</url>
    <content><![CDATA[<p>最近在加强 JavaScript 基础的学习，这里整理了一下 JavaScript 中 String 对象和 Array 对象常见的一些方法。</p>
<a id="more"></a>
<h3 id="一-string-对象"><a class="header-anchor" href="#一-string-对象">¶</a>一、String 对象</h3>
<h4 id="1-indexof-返回索引值"><a class="header-anchor" href="#1-indexof-返回索引值">¶</a>1、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf" target="_blank" rel="noopener">indexOf()</a> 返回索引值</h4>
<p><code>indexOf()</code>方法返回 str 中<code>第一次</code>出现指定值的索引，从 fromIndex 处进行搜索，如果未找到该值，则返回 -1。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.indexOf(searchValue[, fromIndex])</span><br></pre></td></tr></table></figure>
<h4 id="2-includes-返回布尔值"><a class="header-anchor" href="#2-includes-返回布尔值">¶</a>2、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/includes" target="_blank" rel="noopener">includes()</a> 返回布尔值</h4>
<p><code>includes()</code>方法用于判断 str 中是否包含另一个字符串，从 fromIndex 处进行搜索，根据情况返回 true 或 false。<code>区分大小写</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.includes(searchString[, fromIndex])</span><br></pre></td></tr></table></figure>
<h4 id="3-split-返回-array"><a class="header-anchor" href="#3-split-返回-array">¶</a>3、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split" target="_blank" rel="noopener">split()</a> 返回 Array</h4>
<p><code>split()</code>方法使用指定字符串将目标字符串分割成字符串数组，这个指定的字符串作为分隔符来决定每个拆分的位置，返回目标字符串以分隔符出现位置分隔而成的一个数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.split([separator[, limit]])</span><br></pre></td></tr></table></figure>
<ul>
<li>separator：分隔符，可以是一个字符串或者正则表达式</li>
<li>limit：返回值数组的长度</li>
</ul>
<h4 id="4-replace-返回新字符串-不改变原字符串"><a class="header-anchor" href="#4-replace-返回新字符串-不改变原字符串">¶</a>4、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">replace()</a> 返回新字符串，不改变原字符串</h4>
<p><code>replace()</code>方法用于替换字符串中的某些字符，返回一个部分匹配替换或全部匹配替换的新字符串。</p>
<p><code>语法：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.replace(regexp|substr, newSubStr|<span class="function"><span class="keyword">function</span>)</span></span><br><span class="line"><span class="function">'<span class="title">abcabc</span>'.<span class="title">replace</span>(<span class="params"><span class="regexp">/a/g</span>, <span class="string">'d'</span></span>) // '<span class="title">dbcdbc</span>'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>regexp（pattern）：一个RegExp 对象或者其字面量，该正则所匹配的内容<code>全部都会被 replace 第二个参数的返回值替换</code>。</li>
<li>substr（pattern）：一个将被 newSubStr 替换的字符串，<code>仅第一个匹配项会被替换</code>。</li>
<li>newSubStr（replacement）：用于替换掉第一个参数在原字符串中匹配到的字符串。</li>
<li>function（replacement）：一个用来创建新字符串的函数，该函数的返回值将替换第一个参数匹配到的字符串。</li>
</ul>
<h4 id="5-slice-返回新字符串-不改变原字符串"><a class="header-anchor" href="#5-slice-返回新字符串-不改变原字符串">¶</a>5、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/slice" target="_blank" rel="noopener">slice()</a> 返回新字符串，不改变原字符串</h4>
<p><code>slice()</code>方法提取字符串的一部分，并返回一个新的字符串，且不会改动原字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.slice(beginIndex[, endIndex]) <span class="comment">// [beginIndex, endIndex)</span></span><br></pre></td></tr></table></figure>
<h4 id="6-substring-返回新字符串"><a class="header-anchor" href="#6-substring-返回新字符串">¶</a>6、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring" target="_blank" rel="noopener">substring()</a> 返回新字符串</h4>
<p><code>substring()</code>方法返回一个字符串从开始索引直到字符串末尾的一个子集, 或从开始索引到结束索引（不包含结束索引）之间的一个子集。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.substring(beginIndex[, endIndex])        <span class="comment">// [beginIndex, endIndex)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>endIndex 为负数或 NaN时，则被当作 0</li>
<li>beginIndex 和 endIndex 大于 str.length 时，会被当作 str.length</li>
</ul>
<h3 id="二-array-对象"><a class="header-anchor" href="#二-array-对象">¶</a>二、Array 对象</h3>
<h4 id="1-isarray-返回布尔值"><a class="header-anchor" href="#1-isarray-返回布尔值">¶</a>1、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray" target="_blank" rel="noopener">isArray()</a> 返回布尔值</h4>
<p><code>Array.isArray()</code>用于确定传递的值是否是一个 Array。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])            <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="string">'foobar'</span>)             <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">undefined</span>)            <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<ul>
<li>当检测 Array 实例时, Array.isArray 优于<code>arr1 instanceof Array</code>，因为 Array.isArray 能检测 iframes。</li>
</ul>
<h4 id="2-concat-返回新数组-不改变原数组"><a class="header-anchor" href="#2-concat-返回新数组-不改变原数组">¶</a>2、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noopener">concat()</a> 返回新数组，不改变原数组</h4>
<p><code>concat()</code>方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr1.concat(arr2, arr3, ...)</span><br></pre></td></tr></table></figure>
<h4 id="3-filter-返回新数组"><a class="header-anchor" href="#3-filter-返回新数组">¶</a>3、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">filter()</a> 返回新数组</h4>
<p><code>filter()</code>方法创建一个新数组, 包含了通过测试的所有元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>]</span><br><span class="line"></span><br><span class="line">arr1.filter(<span class="function"><span class="params">i</span> =&gt;</span> i &gt;= <span class="number">10</span>)            <span class="comment">// [12, 130, 44]</span></span><br><span class="line">arr2.filter(<span class="function">(<span class="params">i, index, array</span>) =&gt;</span> i &gt;= <span class="number">10</span>)            <span class="comment">// [12, 130, 44]</span></span><br></pre></td></tr></table></figure>
<h4 id="4-map-返回新数组"><a class="header-anchor" href="#4-map-返回新数组">¶</a>4、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">map()</a> 返回新数组</h4>
<p><code>map()</code>方法创建一个新数组，其结果是该数组中的每个元素都调用执行函数后返回的结果。</p>
<h4 id="5-pop-返回从数组中删除的元素-数组为空时返回-undefined"><a class="header-anchor" href="#5-pop-返回从数组中删除的元素-数组为空时返回-undefined">¶</a>5、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop" target="_blank" rel="noopener">pop()</a> 返回从数组中删除的元素（数组为空时返回 undefined）</h4>
<p><code>pop()</code>方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。</p>
<h4 id="6-push-返回数组新的-length"><a class="header-anchor" href="#6-push-返回数组新的-length">¶</a>6、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noopener">push()</a> 返回数组新的 length</h4>
<p><code>push()</code>方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。此方法更改数组的长度。</p>
<h4 id="7-shift-返回从数组中删除的元素-数组为空时返回-undefined"><a class="header-anchor" href="#7-shift-返回从数组中删除的元素-数组为空时返回-undefined">¶</a>7、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift" target="_blank" rel="noopener">shift()</a> 返回从数组中删除的元素（数组为空时返回 undefined）</h4>
<p><code>shift()</code>方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。</p>
<h4 id="8-unshift-返回数组新的-length"><a class="header-anchor" href="#8-unshift-返回数组新的-length">¶</a>8、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift" target="_blank" rel="noopener">unshift()</a> 返回数组新的 length</h4>
<p><code>unshift()</code>方法将一个或多个元素添加到数组的开头，并返回该数组的新长度。此方法更改数组的长度。</p>
<h4 id="9-foreach-返回-undefined"><a class="header-anchor" href="#9-foreach-返回-undefined">¶</a>9、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">forEach()</a> 返回 undefined</h4>
<p><code>forEach()</code>方法对数组的每个元素执行一次函数。</p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>除了抛出异常以外，无法跳出循环</strong></li>
</ul>
</blockquote>
<h4 id="10-slice-返回新数组"><a class="header-anchor" href="#10-slice-返回新数组">¶</a>10、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">slice()</a> 返回新数组</h4>
<p><code>slice()</code>方法返回一个含有被提取元素的新数组，这个数组是由 beginIndex 和 endIndex 决定的原数组的浅拷贝。原始数组不会被改变。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.slice([beginIndex[, endIndex]])        <span class="comment">// [beginIndex, endIndex)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果 beginIndex 大于数组的长度，则返回空数组</li>
<li>slice(-2) 表示提取数组中的倒数第二个元素到最后一个元素（包含最后一个元素）</li>
<li>slice(-2, -1) 表示提取数组中的倒数第二个元素到最后一个元素（不包含最后一个元素）</li>
</ul>
<h4 id="11-splice-返回被删除元素组成的数组"><a class="header-anchor" href="#11-splice-返回被删除元素组成的数组">¶</a>11、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">splice()</a> 返回被删除元素组成的数组</h4>
<p><code>splice()</code>方法通过删除或替换现有元素或者原地添加新的元素来修改数组，并以数组形式返回被修改的内容。此方法会改变原数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.splice(beginIndex, deleteCount, item1, item2, ...)</span><br></pre></td></tr></table></figure>
<ul>
<li>beginIndex 修改开始的位置</li>
<li>deleteCount 要移除的元素个数，可选</li>
<li>item1, item2, … 要添加进数组的元素，可选</li>
</ul>
<h4 id="12-reverse-返回颠倒后的数组"><a class="header-anchor" href="#12-reverse-返回颠倒后的数组">¶</a>12、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse" target="_blank" rel="noopener">reverse()</a> 返回颠倒后的数组</h4>
<p><code>reverse()</code>方法将数组中元素的位置颠倒，并返回该数组。此方法会改变原数组。</p>
<h4 id="13-some-返回布尔值"><a class="header-anchor" href="#13-some-返回布尔值">¶</a>13、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">some()</a> 返回布尔值</h4>
<p><code>some()</code>方法测试数组中是不是至少有一个元素通过了测试函数，返回一个 Boolean 类型的值。</p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>若收到一个空数组，此方法在任何情况下都会返回 false</strong></li>
</ul>
</blockquote>
<h4 id="14-every-返回布尔值"><a class="header-anchor" href="#14-every-返回布尔值">¶</a>14、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank" rel="noopener">every()</a> 返回布尔值</h4>
<p><code>every()</code>方法测试数组内的所有元素是否都能通过某个指定函数的测试。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>]</span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>]</span><br><span class="line"></span><br><span class="line">arr1.every(<span class="function"><span class="params">i</span> =&gt;</span> i &gt;= <span class="number">10</span>)            <span class="comment">// false</span></span><br><span class="line">arr2.every(<span class="function"><span class="params">i</span> =&gt;</span> i &gt;= <span class="number">10</span>)            <span class="comment">// true</span></span><br><span class="line">arr3.every(<span class="function">(<span class="params">i, index, array</span>) =&gt;</span> &#123; <span class="keyword">return</span> i &gt;= <span class="number">20</span> &#125;)            <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>若收到一个空数组，此方法在任何情况下都会返回 true</strong></li>
</ul>
</blockquote>
<h4 id="15-includes-返回布尔值"><a class="header-anchor" href="#15-includes-返回布尔值">¶</a>15、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener">includes()</a> 返回布尔值</h4>
<p><code>includes()</code>方法用来判断一个数组是否包含一个指定的值。</p>
<h4 id="16-indexof-返回索引值"><a class="header-anchor" href="#16-indexof-返回索引值">¶</a>16、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf" target="_blank" rel="noopener">indexOf()</a> 返回索引值</h4>
<p><code>indexOf()</code>方法返回在数组中可以找到给定元素的第一个索引，如果不存在，则返回 -1。</p>
<h4 id="17-join-返回新字符串"><a class="header-anchor" href="#17-join-返回新字符串">¶</a>17、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join" target="_blank" rel="noopener">join()</a> 返回新字符串</h4>
<p><code>join()</code>方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。</p>
<h4 id="18-flat-返回新数组"><a class="header-anchor" href="#18-flat-返回新数组">¶</a>18、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noopener">flat()</a> 返回新数组</h4>
<p><code>flat()</code>方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">arr1.flat()             <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line">arr2.flat()             <span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line">arr3.flat(<span class="number">2</span>)            <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 Infinity，可展开任意深度的嵌套数组</span></span><br><span class="line"><span class="keyword">let</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]]]]]</span><br><span class="line">arr4.flat(<span class="literal">Infinity</span>)     <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr5 = [<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr4.flat()             <span class="comment">// [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中的数据类型以及内存分配</title>
    <url>/article/js-typeof.html</url>
    <content><![CDATA[<p>最近在加强 JavaScript 基础的学习，这里整理了一下 JavaScript 中的数据类型以及内存分配。</p>
<a id="more"></a>
<h3 id="一-数据类型"><a class="header-anchor" href="#一-数据类型">¶</a>一、数据类型</h3>
<h4 id="1-简单类型"><a class="header-anchor" href="#1-简单类型">¶</a>1、简单类型</h4>
<p>简单类型又叫做基本数据类型或者值类型，在存储时变量中存储的是值本身。</p>
<ul>
<li>String, Number, Boolean, undefined, null（null 为空对象）</li>
</ul>
<h4 id="2-复杂类型"><a class="header-anchor" href="#2-复杂类型">¶</a>2、复杂类型</h4>
<p>复杂类型又叫做引用类型，在存储时变量中存储的是地址（引用）。</p>
<ul>
<li>通过 new 关键字创建的对象（系统对象、自定义对象），如：Object、Array、Date 等</li>
</ul>
<h3 id="二-堆和栈"><a class="header-anchor" href="#二-堆和栈">¶</a>二、堆和栈</h3>
<h4 id="1-栈-操作系统-stack"><a class="header-anchor" href="#1-栈-操作系统-stack">¶</a>1、栈（操作系统，stack）</h4>
<p>由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈，<code>简单数据类型存放到栈里面</code>。</p>
<h4 id="2-堆-操作系统-heap"><a class="header-anchor" href="#2-堆-操作系统-heap">¶</a>2、堆（操作系统， heap）</h4>
<p>存储复杂类型（对象），一般由程序员分配和释放，若程序员不释放，由垃圾回收机制回收释放，<code>复杂数据类型存放到堆里面</code>。<br>
复杂数据类型首先在栈里面存放地址，十六进制表示，这个地址指向堆里面的数据，真正的对象实例存放在堆空间中。</p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>JavaScript 中没有堆栈的概念，通过堆栈的方式，可以更好地理解代码的执行方式</strong></li>
</ul>
</blockquote>
<p><img src="https://images-hosting.liuxianyu.cn/posts/js-typeof/1.png" alt></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中的循环</title>
    <url>/article/js-xunhuan.html</url>
    <content><![CDATA[<p>最近在加强 JavaScript 基础的学习，这里整理了一下 JavaScript 中的循环，包括：<code>for</code>、<code>while</code>、<code>do while</code>三种循环和<code>continue</code>、<code>break</code>两个关键字。</p>
<a id="more"></a>
<h3 id="一-for-循环"><a class="header-anchor" href="#一-for-循环">¶</a>一、for 循环</h3>
<ol>
<li>for 循环可以重复执行某些相同的代码</li>
<li>for 循环通过计数器可以重复执行些许不同的代码</li>
<li>for 循环可以重复执行某些操作，比如算术运算符加法操作</li>
<li>双重 for 循环，外层循环一次，内存 for 循环全部执行</li>
<li>for 循环是循环条件和数字直接相关的循环</li>
</ol>
<h3 id="二-while-循环"><a class="header-anchor" href="#二-while-循环">¶</a>二、while 循环</h3>
<p><code>while</code>语句可以在条件表达式为真的前提下，循环执行指定的一段代码，直到条件表达式不为真时结束循环。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">  <span class="comment">// 循环体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>执行思路</code>：</p>
<ol>
<li>先执行条件表达式，如果为 true，则执行循环体代码；如果为 false，则退出循环，执行后续代码。</li>
<li>循环体代码执行一次后，程序会继续判断执行条件表达式，如果条件表达式结果仍为 true，则继续执行循环体代码，直到条件表达式的结果为 false，整个循环过程才会结束。</li>
</ol>
<p><code>举例</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (num &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num)</span><br><span class="line">  num ++                <span class="comment">// 要进行计数器的更新，防止出现死循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三-do-while-循环"><a class="header-anchor" href="#三-do-while-循环">¶</a>三、do while 循环</h3>
<p><code>do while</code>语句是 while 语句的一个变体，该循环会先执行一次代码块，然后对条件表达式进行判断，如果条件表达式的结果为 true，就会重复执行循环体，否则退出循环。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="comment">// 循环体代码</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式)</span><br></pre></td></tr></table></figure>
<p><code>执行思路</code>：</p>
<ol>
<li>先执行一次循环体代码</li>
<li>再执行条件表达式，如果条件表达式结果为 true，则继续执行循环体代码，如果条件表达式结果为 false，则退出循环，执行后续代码。</li>
</ol>
<p><code>举例</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num)</span><br><span class="line">  num ++                <span class="comment">// 要进行计数器的更新，防止出现死循环</span></span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<h3 id="四-continue"><a class="header-anchor" href="#四-continue">¶</a>四、continue</h3>
<p><code>continue</code>关键字用于立即<code>跳出本次循环，继续下一个循环</code>（本次循环体中 continue 之后的代码就会少执行一次）</p>
<p><code>举例</code>：求 1 ~ 100 之间，除了能被 7 整除之外的整数和</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i ++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">7</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  &#125;</span><br><span class="line">  sum += i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum)        <span class="comment">// 4315</span></span><br></pre></td></tr></table></figure>
<h3 id="五-break"><a class="header-anchor" href="#五-break">¶</a>五、break</h3>
<p><code>break</code>关键字用于立即<code>跳出整个循环</code>（本次循环结束）</p>
<p><code>举例</code>：求 1 ~ 100 之间，除了能被 7 整除之外的整数和</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i ++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  sum += i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum)        <span class="comment">// 6, 1 + 2 + 3 = 6</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>WebStorm 行注释的位置问题</title>
    <url>/article/webstorm-html-line.html</url>
    <content><![CDATA[<p>  WebStorm 中快捷键<code>cmd + /</code>行注释，<code>//</code>会跑到该行的顶格处，记录一下如何设置可以恢复正常。</p>
<a id="more"></a>
<p>  进入 WebStorm -&gt; Preferences -&gt; Editor -&gt; Code Style -&gt; HTML -&gt; Code Generation，将 Line comment at first column 和 Block comment at first column 前的勾选全部取消，解决问题。<br>
<img src="https://images-hosting.liuxianyu.cn/posts/webstorm-html-line/1.png" alt></p>
<p>  修改前：<br>
<img src="https://images-hosting.liuxianyu.cn/posts/webstorm-html-line/2.png" alt></p>
<p>  期望、修改后：<br>
<img src="https://images-hosting.liuxianyu.cn/posts/webstorm-html-line/3.png" alt></p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>WebStorm</category>
      </categories>
      <tags>
        <tag>WebStorm</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 certbot 在 Cent OS 中给 nginx 配置 https</title>
    <url>/article/centos-nginx-https.html</url>
    <content><![CDATA[<p>免费的 SSL 证书可以通过阿里云获取，也可以通过以下操作安装。这里只记录使用 certbot 在 CentOS 中给 nginx 配置 https：</p>
<a id="more"></a>
<p>先去 Certbot 官网 <a href="https://certbot.eff.org/" target="_blank" rel="noopener">https://certbot.eff.org/</a>，选择 nginx ，再选择 CentOS/RHEL 7，意思是在什么系统上使用什么 HTTP 服务器</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/centos-nginx-https/1.png" alt></p>
<h4 id="1-查看服务器实例"><a class="header-anchor" href="#1-查看服务器实例">¶</a>1、查看服务器实例</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cat /sys/devices/virtual/dmi/id/product_uuid</span><br></pre></td></tr></table></figure>
<p>如果没有 dmi 文件夹，就进行安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum -y install dmidecode</span><br></pre></td></tr></table></figure>
<p>如果 UUID 是<code>ec2</code>开头，则需要运行以下两行指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum -y install yum-utils</span><br><span class="line">sudo yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br></pre></td></tr></table></figure>
<h4 id="2-安装-certbot"><a class="header-anchor" href="#2-安装-certbot">¶</a>2、安装 Certbot</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y certbot python2-certbot-nginx</span><br></pre></td></tr></table></figure>
<h4 id="3-获取并安装-ssl-证书"><a class="header-anchor" href="#3-获取并安装-ssl-证书">¶</a>3、获取并安装 SSL 证书</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo certbot --nginx</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/centos-nginx-https/2.png" alt>报错如上，参考资料：<a href="https://stackoverflow.com/questions/46168364/certbot-importerror-no-module-named-requests-packages-urllib3" target="_blank" rel="noopener">Certbot :ImportError: No module named 'requests.packages.urllib3</a>，执行以下指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pip install --upgrade --force-reinstall 'requests==2.6.0' urllib3</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/centos-nginx-https/3.png" alt>提示输入以下指令升级<code>pip</code>，可以不搭理。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pip install --upgrade pip</span><br></pre></td></tr></table></figure>
<p>接下来重新运行<code>sudo certbot --nginx</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo certbot --nginx</span><br></pre></td></tr></table></figure>
<p>按照提示依次输入：<br>
　　- 输入邮箱，用于接收紧急续订和安全通知邮件<br>
　　- 输入 A，阅读并同意条款<br>
　　- 输入 N，邮箱接收相关推广邮件，不需要<br>
　　- 输入数字，选择部署的域名，多个域名用<code>,</code>隔开<br>
　　- 输入数字，选择是否将 http 重定向到 https。1、无需重定向，2、重定向<br>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/centos-nginx-https/4.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/centos-nginx-https/5.png" alt></div></div></div></div></p>
<h4 id="4-确定-certbot-正常运行"><a class="header-anchor" href="#4-确定-certbot-正常运行">¶</a>4、确定 Certbot 正常运行</h4>
<p>在浏览器输入域名，在 URL 栏确认是否有 🔒 图标</p>
<h4 id="5-设置自动续订"><a class="header-anchor" href="#5-设置自动续订">¶</a>5、设置自动续订</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo "0 0,12 * * * root python -c 'import random; import time; time.sleep(random.random() * 3600)' &amp;&amp; certbot renew" | sudo tee -a /etc/crontab &gt; /dev/null</span><br></pre></td></tr></table></figure>
<p>可查看续订设置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/crontab</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Cent OS</category>
        <category>https-SSL</category>
      </categories>
      <tags>
        <tag>Cent OS</tag>
        <tag>nginx</tag>
        <tag>https-SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中的 Array</title>
    <url>/article/js-array.html</url>
    <content><![CDATA[<p>最近在加强 JavaScript 基础的学习，这里整理一下 Array，主要是一些数组方法。</p>
<a id="more"></a>
<h3 id="一-扁平化多维数组"><a class="header-anchor" href="#一-扁平化多维数组">¶</a>一、扁平化多维数组</h3>
<p>这个知识点是在一次面试中被问到的，没答上来，这里作下记录。</p>
<h4 id="1-array-flat-n"><a class="header-anchor" href="#1-array-flat-n">¶</a>1、Array.flat(n)</h4>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noopener">Array.flat(n)</a> 方法会按照一个可指定的深度（n，默认值为 1）递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">arr1.flat()             <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line">arr2.flat()             <span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line">arr3.flat(<span class="number">2</span>)            <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 Infinity，可展开任意深度的嵌套数组</span></span><br><span class="line"><span class="keyword">let</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]]]]]</span><br><span class="line">arr4.flat(<span class="literal">Infinity</span>)     <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure>
<p>也可以利用递归和 concat 方法实现扁平数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(arr.some(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Array</span>.isArray(item))) &#123;</span><br><span class="line">    arr = [].concat(...arr)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flatten([<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]])            <span class="comment">// [1, 2, 3]</span></span><br><span class="line">flatten([<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]])     <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h4 id="2-array-tostring"><a class="header-anchor" href="#2-array-tostring">¶</a>2、Array.toString()</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用 Array.toString() 可以将数组转为字符串，再去除`,`即可得到数组</span></span><br><span class="line"><span class="keyword">let</span> arr5 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]]]]]</span><br><span class="line">arr5.toString()                 <span class="comment">// '1, 2, 3, 4, 5, 6, 7, 8, 9, 10'</span></span><br><span class="line">arr5.toString().split(<span class="string">','</span>)      <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure>
<h4 id="3-更多实现方法见-array-prototype-flat"><a class="header-anchor" href="#3-更多实现方法见-array-prototype-flat">¶</a>3、更多实现方法见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noopener">Array.prototype.flat()</a></h4>
<h3 id="二-数组去重"><a class="header-anchor" href="#二-数组去重">¶</a>二、数组去重</h3>
<h4 id="1-array-from-set"><a class="header-anchor" href="#1-array-from-set">¶</a>1、Array.from、Set</h4>
<p>Array.from 可以将类数组转化为数组。Set 是 ES6 语法新出的一种定义不重复数组的数据类型。… 是扩展运算符，将 set 里面的值转化为字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(list))         <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">[...new <span class="built_in">Set</span>(list)]                <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>
<h4 id="2-用map存储数据-循环数组进行比对"><a class="header-anchor" href="#2-用map存储数据-循环数组进行比对">¶</a>2、用<code>map</code>存储数据，循环数组进行比对</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">distinct(list) &#123;</span><br><span class="line">  <span class="keyword">let</span> map = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(i <span class="keyword">in</span> map)) &#123;</span><br><span class="line">      map[i] = <span class="number">1</span></span><br><span class="line">      result.push(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(result)         <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.distinct([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure>
<h3 id="三-数组排序"><a class="header-anchor" href="#三-数组排序">¶</a>三、数组排序</h3>
<h4 id="1-array-sort"><a class="header-anchor" href="#1-array-sort">¶</a>1、Array.sort</h4>
<p>sort 是 Array 内置的排序方法，参数为一个函数。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的。由于它取决于具体实现，因此无法保证排序的时间和空间复杂性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line">list.sort()                      <span class="comment">// [1, 2, 3, 4]  默认是升序</span></span><br><span class="line">list.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)       <span class="comment">// [1, 2, 3, 4]  升序</span></span><br><span class="line">list.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a)       <span class="comment">// [4, 3, 2, 1]  降序</span></span><br></pre></td></tr></table></figure>
<h4 id="2-冒泡排序"><a class="header-anchor" href="#2-冒泡排序">¶</a>2、冒泡排序</h4>
<p>参考另一篇随笔：<a href="https://liuxianyu.cn/article/js-bubble-sort.html">JS 中的冒泡排序</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; list.length - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; list.length - i - <span class="number">1</span>; j ++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list[j] &gt; list[j + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">let</span> tmp = list[j]</span><br><span class="line">      list[j] = list[j + <span class="number">1</span>]</span><br><span class="line">      list[j + <span class="number">1</span>] = tmp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(list)       <span class="comment">// [1, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>
<h4 id="3-选择排序"><a class="header-anchor" href="#3-选择排序">¶</a>3、选择排序</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">selectSort(list) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; list.length; j ++) &#123; </span><br><span class="line">      <span class="keyword">if</span> (list[i] &gt; list[j]) &#123; </span><br><span class="line">        [list[i], list[j]] = [list[j], list[i]]</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.selectSort([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>])    <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>
<h3 id="三-数组的最大值"><a class="header-anchor" href="#三-数组的最大值">¶</a>三、数组的最大值</h3>
<h4 id="1-math-max"><a class="header-anchor" href="#1-math-max">¶</a>1、Math.max()</h4>
<p>Math.max() 是 Math 对象内置的方法，参数是字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max(...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>])       <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>])       <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
<h4 id="2-先排序再取最大值"><a class="header-anchor" href="#2-先排序再取最大值">¶</a>2、先排序再取最大值</h4>
<h3 id="四-合并数值"><a class="header-anchor" href="#四-合并数值">¶</a>四、合并数值</h3>
<h4 id="1-简洁写法"><a class="header-anchor" href="#1-简洁写法">¶</a>1、简洁写法</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].concat([<span class="number">5</span>, <span class="number">6</span>])             <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line">[...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], ...[<span class="number">5</span>, <span class="number">6</span>]]            <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list1.push(...[<span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">console</span>.log(list1)                      <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>
<h4 id="2-map-push"><a class="header-anchor" href="#2-map-push">¶</a>2、map、push</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">5</span>, <span class="number">6</span>].map(<span class="function"><span class="params">i</span> =&gt;</span> &#123; list2.push(i) &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(list2)                      <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>
<h3 id="五-判断是否包含值"><a class="header-anchor" href="#五-判断是否包含值">¶</a>五、判断是否包含值</h3>
<h4 id="1-includes-indexof-find-findindex"><a class="header-anchor" href="#1-includes-indexof-find-findindex">¶</a>1、includes、indexOf、find、findIndex</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].includes(<span class="number">4</span>)                 <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].indexOf(<span class="number">4</span>)                  <span class="comment">// 3，存在则返回起始位置的索引，不存在则返回 -1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].find(<span class="function"><span class="params">i</span> =&gt;</span> i === <span class="number">4</span>)          <span class="comment">// 4，如果数组中不包含则返回 undefined</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].findIndex(<span class="function"><span class="params">i</span> =&gt;</span> i === <span class="number">4</span>)     <span class="comment">// 3，存在则返回起始位置的索引，不存在则返回 -1</span></span><br></pre></td></tr></table></figure>
<h4 id="2-some"><a class="header-anchor" href="#2-some">¶</a>2、some</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].some(<span class="function"><span class="params">i</span> =&gt;</span> &#123; <span class="keyword">return</span> i === <span class="number">4</span> &#125;)      <span class="comment">// true，如果不包含则返回 false</span></span><br></pre></td></tr></table></figure>
<h3 id="六-过滤数组"><a class="header-anchor" href="#六-过滤数组">¶</a>六、过滤数组</h3>
<h4 id="1-filter"><a class="header-anchor" href="#1-filter">¶</a>1、filter</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].filter(<span class="function"><span class="params">i</span> =&gt;</span> i &gt; <span class="number">2</span>)         <span class="comment">// [3, 4]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>函数的防抖和节流</title>
    <url>/article/function-debounce-throttle.html</url>
    <content><![CDATA[<p>最近在加强 JavaScript 基础的学习，这里整理一下函数的防抖（debounce）和节流（throttle）。</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th>概念</th>
<th>应用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">防抖</td>
<td>触发事件后在 n 秒内函数只能执行一次并添加计时器，如果在 n 秒内又触发了事件，则会重新重置计时器</td>
<td>input 的输入建议等</td>
</tr>
<tr>
<td style="text-align:center">节流</td>
<td>n 秒内触发事件仅执行一次函数</td>
<td>大段输入内容时记录输入历史</td>
</tr>
</tbody>
</table>
<h3 id="一-防抖-debounce"><a class="header-anchor" href="#一-防抖-debounce">¶</a>一、防抖 - debounce</h3>
<p>非立即执行版：触发事件后函数不会立即执行，而是在 n 秒后执行，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。<br>
立即执行版：触发事件后函数会立即执行，然后 n 秒内不触发事件才能继续执行函数的效果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>函数防抖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>func 函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>wait 延迟执行毫秒数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>immediate true 表示立即执行，false 表示非立即执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeout) clearTimeout(timeout)</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="keyword">var</span> callNow = !timeout</span><br><span class="line">      timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        timeout = <span class="literal">null</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">      <span class="keyword">if</span> (callNow) func.apply(context, args)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        func.apply(context, args)</span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二-节流-throttle"><a class="header-anchor" href="#二-节流-throttle">¶</a>二、节流 - throttle</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>函数节流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>func 函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>wait 延迟执行毫秒数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>type 1 表示时间戳版，2 表示定时器版</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait, type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="number">0</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeout</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> now = <span class="built_in">Date</span>.now()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">        func.apply(context, args)</span><br><span class="line">        previous = now</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( type === <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">        timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          timeout = <span class="literal">null</span></span><br><span class="line">          func.apply(context, args)</span><br><span class="line">        &#125;, wait)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p>1、<a href="https://www.jianshu.com/p/c8b86b09daf0" target="_blank" rel="noopener">函数防抖和节流</a><br>
2、<a href="https://github.com/mqyqingfeng/Blog/issues/22" target="_blank" rel="noopener">JavaScript专题之跟着 underscore 学防抖</a><br>
3、<a href="https://github.com/mqyqingfeng/Blog/issues/26" target="_blank" rel="noopener">JavaScript专题之跟着 underscore 学节流</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 项目中借助 crypto-js 实现 AES 加密</title>
    <url>/article/vue-crypto-js-aes.html</url>
    <content><![CDATA[<p>  公司项目需要上架钉钉应用市场，上架要求中包含了接口请求进行加密，这里记录一下最终采用的方案 —— <code>AES</code></p>
<a id="more"></a>
<h3 id="一-crypto-js"><a class="header-anchor" href="#一-crypto-js">¶</a>一、crypto-js</h3>
<p>  参考：<a href="https://www.npmjs.com/package/crypto-js" target="_blank" rel="noopener">https://www.npmjs.com/package/crypto-js</a></p>
<h3 id="二-自行封装"><a class="header-anchor" href="#二-自行封装">¶</a>二、自行封装</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> CryptoJS <span class="keyword">from</span> <span class="string">'crypto-js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 秘钥</span></span><br><span class="line"><span class="keyword">const</span> keyStr = <span class="string">'wise_job'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 加密</span></span><br><span class="line">  encrypt (word) &#123;</span><br><span class="line">    <span class="keyword">let</span> encryptedAES = CryptoJS.AES.encrypt(word, keyStr).toString()  <span class="comment">// base64 字符串</span></span><br><span class="line">    <span class="comment">// this.decrypt(encryptedAES)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(encryptedAES)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解密</span></span><br><span class="line">  decrypt (encryptedAES) &#123;</span><br><span class="line">    <span class="keyword">let</span> bytes = CryptoJS.AES.decrypt(encryptedAES, keyStr)</span><br><span class="line">    <span class="keyword">let</span> str = bytes.toString(CryptoJS.enc.Utf8)</span><br><span class="line"></span><br><span class="line">    str &amp;&amp; <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(str))</span><br><span class="line">    <span class="keyword">return</span> str ? <span class="built_in">JSON</span>.parse(str) : &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>加密解密</category>
      </categories>
      <tags>
        <tag>加密解密</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中的 call、apply、bind</title>
    <url>/article/js-call-apply-bind.html</url>
    <content><![CDATA[<p>最近在加强 JavaScript 基础的学习，这里整理一下 call、apply、bind。</p>
<a id="more"></a>
<h3 id="一-call-apply-的定义"><a class="header-anchor" href="#一-call-apply-的定义">¶</a>一、call、apply 的定义</h3>
<p>call 和 apply 可以调用函数，改变<code>this</code>指向实现继承和借用别的对象的方法：</p>
<p>1、Object.call(新<code>this</code>对象, 实参1, 实参2, 实参3…)</p>
<p>2、Object.apply(新<code>this</code>对象, [实参1, 实参2, 实参3…])</p>
<h3 id="二-call-apply-的用法"><a class="header-anchor" href="#二-call-apply-的用法">¶</a>二、call、apply 的用法</h3>
<h4 id="1-间接调用函数-改变函数作用域的this指向"><a class="header-anchor" href="#1-间接调用函数-改变函数作用域的this指向">¶</a>1、间接调用函数，改变函数作用域的<code>this</code>指向</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo.apply(<span class="string">'这里是 apply 改变的 this 值'</span>)       <span class="comment">// 这里是 apply 改变的 this 值</span></span><br><span class="line">foo.call(<span class="string">'这里是 call 改变的 this 值'</span>)         <span class="comment">// 这里是 call 改变的 this 值</span></span><br></pre></td></tr></table></figure>
<p>实质上是 call 将 foo 中<code>this</code>的指向改为 bar，并调用了该函数。call 和 apply 对应的第一个参数就是<code>this</code>，如果不传或者传 null、undefined 时，<code>this</code>指向<code>window</code>。</p>
<h4 id="2-劫持其他对象的方法"><a class="header-anchor" href="#2-劫持其他对象的方法">¶</a>2、劫持其他对象的方法</h4>
<p>实现方法见上一个用法举例中的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'张三'</span>,</span><br><span class="line">  logName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = &#123;</span><br><span class="line">  name: <span class="string">'李四'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.logName.call(bar)   <span class="comment">// 李四</span></span><br></pre></td></tr></table></figure>
<h4 id="3-两个函数实现继承"><a class="header-anchor" href="#3-两个函数实现继承">¶</a>3、两个函数实现继承</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    consloe.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  Animal.call(<span class="keyword">this</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">'Black Cat'</span>)</span><br><span class="line">cat.showName()                      <span class="comment">// Black Cat</span></span><br></pre></td></tr></table></figure>
<h4 id="4-为类数组-arguments-nodelist-添加数组方法-如-push-filter-pop-等："><a class="header-anchor" href="#4-为类数组-arguments-nodelist-添加数组方法-如-push-filter-pop-等：">¶</a>4、为类数组（arguments、nodeList）添加数组方法，如 push、filter、pop 等：</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">argumentsFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.push.call(<span class="built_in">arguments</span>, <span class="string">'王五'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)            <span class="comment">// ['张三', '李四', '王五']</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">argumentsFunc(<span class="string">'张三'</span>, <span class="string">'李四'</span>)</span><br></pre></td></tr></table></figure>
<p>这里也出现了另一个知识点，即<code>当方法没有定义接收数据的参数，但调用方法时传递了参数，如何在方法内使用传递过来的数据</code>。这里可以使用<code>arguments</code>进行接收，arguments 属于类数组，document.getElementByName(‘className’) 拿到的 nodeList 也是类数组。</p>
<h4 id="5-合并数组"><a class="header-anchor" href="#5-合并数组">¶</a>5、合并数组</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, arr2)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)           <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>
<h4 id="6-求数组最大值"><a class="header-anchor" href="#6-求数组最大值">¶</a>6、求数组最大值</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr3))     <span class="comment">// 9</span></span><br></pre></td></tr></table></figure>
<h4 id="7-判断字符类型"><a class="header-anchor" href="#7-判断字符类型">¶</a>7、判断字符类型</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;)      <span class="comment">// '[object Object]'</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([])      <span class="comment">// '[object Array]'</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">''</span>)      <span class="comment">// '[object String]'</span></span><br></pre></td></tr></table></figure>
<h3 id="三-bind"><a class="header-anchor" href="#三-bind">¶</a>三、bind</h3>
<p>bind 以后 fooNewBind 重新绑定了方法内部的<code>this</code>指向，此时不会调用方法，不兼容 IE8。<br>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'李四'</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'张三'</span>,</span><br><span class="line">  logName: <span class="function"><span class="keyword">function</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, age)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fooNew = foo.logName</span><br><span class="line"><span class="keyword">var</span> fooNewBind = foo.logName.bind(foo)</span><br><span class="line"></span><br><span class="line">fooNew(<span class="number">10</span>)          <span class="comment">// 李四 10</span></span><br><span class="line">fooNewBind(<span class="number">11</span>)      <span class="comment">// 张三 11</span></span><br></pre></td></tr></table></figure></p>
<p>此时如果<code>bind</code>换成 call 或者 apply 的话，就需要再加上<code>age</code>参数，且会调用方法。</p>
<h3 id="四-三者异同"><a class="header-anchor" href="#四-三者异同">¶</a>四、三者异同</h3>
<ul>
<li>同：都是改变函数的<code>this</code>指向，都可接收参数</li>
<li>异：bind 和 call 是接收单个参数，apply 是接收数组</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中的 const、var、let</title>
    <url>/article/js-const-var-let.html</url>
    <content><![CDATA[<p>  ES6 新增了两个重要的关键字：const 和 let，加上之前的 var 有了三个变量的声明方式，整理并记录一下。</p>
<a id="more"></a>
<h3 id="一-const"><a class="header-anchor" href="#一-const">¶</a>一、const</h3>
<p>  const 声明一个只读的变量，而且必须初始化。声明后，变量的值就不可以修改。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">2</span>;     <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">const</span> b;         <span class="comment">// 错误</span></span><br><span class="line">a += <span class="number">1</span>;          <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure>
<h3 id="二-var"><a class="header-anchor" href="#二-var">¶</a>二、var</h3>
<p>  var 无块级作用域，容易造成全局变量污染。定义的变量可以修改，如果不初始化会输出<code>undefined</code>，不会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;     <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">var</span> a;         <span class="comment">// 正确</span></span><br><span class="line">change () &#123;</span><br><span class="line">  a = <span class="number">4</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);       <span class="comment">// 输出 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三-let"><a class="header-anchor" href="#三-let">¶</a>三、let</h3>
<p>  let 有块级作用域，可以理解为带有块级作用域的 var。函数内部使用 let 定义变量后，对函数外部无影响。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);       <span class="comment">// 输出 2</span></span><br><span class="line">change () &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">4</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);       <span class="comment">// 输出 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="四-const-var-let-的比较"><a class="header-anchor" href="#四-const-var-let-的比较">¶</a>四、const、var、let 的比较</h3>
<h4 id="1-const-和-let-的相同点"><a class="header-anchor" href="#1-const-和-let-的相同点">¶</a>1、const 和 let 的相同点</h4>
<ul>
<li>二者都是块级作用域</li>
<li>都不能和所在作用域内的其他变量或函数拥有相同的名称</li>
</ul>
<h4 id="2-const-和-let-的不同点"><a class="header-anchor" href="#2-const-和-let-的不同点">¶</a>2、const 和 let 的不同点</h4>
<ul>
<li>const 声明的变量必须初始化，而 let 声明的变量不用</li>
<li>const 声明的变量不能通过再次修改，也不能再次声明。而 let 声明的变量可以修改。</li>
</ul>
<h4 id="3-var-声明的变量会挂载到-window-上-const-和-let-声明的变量不会"><a class="header-anchor" href="#3-var-声明的变量会挂载到-window-上-const-和-let-声明的变量不会">¶</a>3、var 声明的变量会挂载到 window 上，const 和 let 声明的变量不会</h4>
<h3 id="五-const-的本质"><a class="header-anchor" href="#五-const-的本质">¶</a>五、const 的本质</h3>
<p>  const 声明的变量不可再次修改，但并非是常量，它声明了一个常量引用一个值。使用 const 声明的对象或数组，其实是可变的。下面的代码并不会报错：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> car = &#123; <span class="attr">type</span>: <span class="string">'Fiat'</span>, <span class="attr">model</span>: <span class="string">'500'</span>, <span class="attr">color</span>: <span class="string">'white'</span> &#125;;     <span class="comment">//  创建常量对象</span></span><br><span class="line">car.color = <span class="string">'red'</span>;              <span class="comment">// 修改属性</span></span><br><span class="line">car.owner = <span class="string">'Johnson'</span>;          <span class="comment">// 添加属性</span></span><br></pre></td></tr></table></figure>
<p>  但是我们<code>不能对常量对象重新赋值</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> car = &#123; <span class="attr">type</span>: <span class="string">'Fiat'</span>, <span class="attr">model</span>: <span class="string">'500'</span>, <span class="attr">color</span>: <span class="string">'white'</span> &#125;;</span><br><span class="line">car = &#123; <span class="attr">type</span>: <span class="string">'Volvo'</span>, <span class="attr">model</span>: <span class="string">'EX60'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;;           <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure>
<p>  const 声明的数组同理，能以下标去修改数组，也能通过 push 方法添加元素，但是<code>不能重新赋值</code>。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 项目中实现 RSA 加密</title>
    <url>/article/vue-rsa.html</url>
    <content><![CDATA[<p>Vue 项目中实现 RSA 加密主要是使用第三方插件，这里推荐使用 <a href="https://github.com/travist/jsencrypt" target="_blank" rel="noopener">jsencrypt</a> 和 <a href="https://www.npmjs.com/package/encryptlong" target="_blank" rel="noopener">encryptlong</a></p>
<a id="more"></a>
<h3 id="一-jsencrypt"><a class="header-anchor" href="#一-jsencrypt">¶</a>一、jsencrypt</h3>
<p>  <code>jsencrypt</code>在处理一些较短文本的加密时比较好使，如 get 请求参数的加密。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i jsencrypt -S</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; JSEncrypt &#125; <span class="keyword">from</span> <span class="string">'jsencrypt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  rsaData (data) &#123;</span><br><span class="line">    <span class="keyword">const</span> PUBLIC_KEY = <span class="string">'your rsa public key'</span></span><br><span class="line">    <span class="keyword">let</span> jsencrypt = <span class="keyword">new</span> JSEncrypt()</span><br><span class="line">    jsencrypt.setPublicKey(PUBLIC_KEY)</span><br><span class="line">    <span class="keyword">let</span> result = jsencrypt.encrypt(data)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  如果遇到 post 且参数较多时，就会报错<code>jsencrypt.js Message too long for RSA</code>，这个时候就需要<code>encryptlong</code>登场了。</p>
<h3 id="二-encryptlong"><a class="header-anchor" href="#二-encryptlong">¶</a>二、encryptlong</h3>
<p><code>encryptlong</code>是基于<code>jsencrypt</code>扩展的长文本分段加解密功能。<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i encryptlong -S</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; JSEncrypt &#125; <span class="keyword">from</span> <span class="string">'encryptlong'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  encrypt (data) &#123;</span><br><span class="line">    <span class="keyword">const</span> PUBLIC_KEY = <span class="string">'your rsa public key'</span></span><br><span class="line">    <span class="keyword">let</span> encryptor = <span class="keyword">new</span> JSEncrypt()</span><br><span class="line">    encryptor.setPublicKey(PUBLIC_KEY)</span><br><span class="line">    <span class="keyword">const</span> rsaData = encryptor.encryptLong(data)</span><br><span class="line">    <span class="keyword">this</span>.decrypt(rsaData)</span><br><span class="line">    <span class="keyword">return</span> rsaData</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 解密 - PRIVATE_KEY - 验证</span></span><br><span class="line">  <span class="comment">// @param rsaData String</span></span><br><span class="line">  decrypt(rsaData) &#123;</span><br><span class="line">    <span class="keyword">const</span> PRIVATE_KEY = <span class="string">'your rsa private key'</span></span><br><span class="line">    <span class="keyword">let</span> decryptor = <span class="keyword">new</span> JSEncrypt()</span><br><span class="line">    decryptor.setPrivateKey(PRIVATE_KEY)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>加密解密</category>
      </categories>
      <tags>
        <tag>加密解密</tag>
      </tags>
  </entry>
  <entry>
    <title>Cent OS 基础环境搭建</title>
    <url>/article/cent-os-base.html</url>
    <content><![CDATA[<p>趁着双十一买了服务器和域名，这里记录一下 Cent OS 服务器基础环境的搭建。</p>
<a id="more"></a>
<h3 id="一-添加-deploy-用户"><a class="header-anchor" href="#一-添加-deploy-用户">¶</a>一、 添加 deploy 用户</h3>
<p>购买服务器后在实例详情 -&gt; 基本信息 -&gt; 更多 -&gt; 重置实例密码，重启服务器后就可以使用<code>ssh root@47.65.55.62</code>来连接服务器了。</p>
<p>1、创建用户，默认生成 用户组 和 用户名 相同；将 deploy 加入 root 组<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adduser deploy</span><br><span class="line">usermod -a -G root deploy</span><br></pre></td></tr></table></figure></p>
<p>2、修改 deploy 的密码<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd deploy</span><br></pre></td></tr></table></figure></p>
<p>3、切换 sudo 时候无需密码<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure></p>
<p>找到 root ALL=(ALL:ALL) ALL，在这行下面增加以下代码，NOPASSWD 表示切换 sudo 时候无需输入 root 密码<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure></p>
<h3 id="二-添加本机的-ssh-公钥到服务器"><a class="header-anchor" href="#二-添加本机的-ssh-公钥到服务器">¶</a>二、 添加本机的 SSH 公钥到服务器</h3>
<p>以后连接服务器不用每次都输入用户名和密码</p>
<p>1、在本地生成公私钥对</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p>2、本地执行以下命令并输入对应密码完成自动写入到远程服务器的<code>~/.ssh/authorized_keys</code>文件，没有公钥可通过<code>ssh-keygen -t rsa</code>一路回车生成公钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-copy-id deploy@47.65.55.62</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i .ssh/id_rsa_liuxy0551 deploy@47.65.55.62</span><br></pre></td></tr></table></figure>
<p>3、windows 执行以下操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">type $env:USERPROFILE\.ssh\id_rsa.pub | ssh &#123;user-name&#125;@&#123;user-ip&#125; "cat &gt;&gt; .ssh/authorized_keys"</span><br></pre></td></tr></table></figure>
<p>deploy 用户可能没有 .ssh 文件夹，执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su deploy</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/.ssh</span><br><span class="line">chmod 700 ~/.ssh</span><br><span class="line">touch ~/.ssh/authorized_keys</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>4、再使用<code>ssh deploy@47.65.55.62</code>连接服务器就可以免密登录了</p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>如果还不能免密登录，就进行第 3 步设置权限</strong></li>
<li><strong>authorized_keys 权限一定要为600</strong></li>
</ul>
</blockquote>
<p>5、【可选】在远程服务器配置相应的权限：<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 700 /home/deploy</span><br><span class="line">chmod 700 /home/deploy/.ssh</span><br><span class="line">chmod 600 /home/deploy/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>
<p><code>chmod 777 -R /mnt</code>将 mnt 目录下所有文件都给予 777 权限</p>
<h3 id="三-安装-git-vim-wget-lsof"><a class="header-anchor" href="#三-安装-git-vim-wget-lsof">¶</a>三、安装 git，vim、wget、lsof</h3>
<p>-y 代表需要输入 y 的地方自动输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install git -y</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install vim wget lsof -y</span><br></pre></td></tr></table></figure>
<h3 id="四-安装-nginx"><a class="header-anchor" href="#四-安装-nginx">¶</a>四、安装 nginx</h3>
<h4 id="一-安装与常见命令"><a class="header-anchor" href="#一-安装与常见命令">¶</a>（一）、安装与常见命令</h4>
<p>1、安装 nginx 并查看版本号，安装完成后就启动 nginx 查看是否有问题<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install nginx -y</span><br><span class="line">nginx -v</span><br><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure></p>
<p>2、nginx 常用命令</p>
<pre><code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start/stop/reload/restart/status nginx</span><br></pre></td></tr></table></figure>
</code></pre>
<p>  重新加载 nginx 配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<h4 id="二-多配置文件"><a class="header-anchor" href="#二-多配置文件">¶</a>（二）、多配置文件</h4>
<p>这个服务器之后可能会部署很多学习的项目，为了避免混乱，准备每个项目单独配置。默认配置文件为：<code>/etc/nginx/nginx.conf</code>。</p>
<p>1、如果没有域名且想要使用 80 端口，需要将 nginx 默认配置中的 server 删除，注意保留文件中的<code>include</code>指向。<br>
<img src="https://images-hosting.liuxianyu.cn/posts/cent-os-base/1.png" alt></p>
<p>2、在<code>/etc/nginx/conf.d</code>文件夹下创建配置文件，以<code>.conf</code>结尾，配置内容可以参考百度或 <a href="https://github.com/wuyuedefeng/blogs/issues/16" target="_blank" rel="noopener">Nginx - Vue单页面应用配置(Vue部署)</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/hexo-blog.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name liuxianyu.cn;</span><br><span class="line"></span><br><span class="line">    root /mnt/projects/hexo-blog/blog;</span><br><span class="line">    index index.html;</span><br><span class="line">    location ^~ /static|img|js|css/ &#123;</span><br><span class="line">      gzip_static on;</span><br><span class="line">      expires max;</span><br><span class="line">      add_header Cache-Control public;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">      try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~* \.(css|js|gif|jpe?g|png)$ &#123;</span><br><span class="line">      expires 50d;</span><br><span class="line">      access_log off;</span><br><span class="line">      add_header Pragma public;</span><br><span class="line">      add_header Cache-Control &quot;public&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动 nginx，并设置开机自启<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>配置安全组规则, 这是个大坑。80 端口没打开的时候，无法通过 ip 直接访问，同事说 2018 年 80 端口还是默认打开的，欺负新人</strong></li>
</ul>
</blockquote>
<p><img src="https://images-hosting.liuxianyu.cn/posts/cent-os-base/2.png" alt></p>
<h3 id="五-安装-node"><a class="header-anchor" href="#五-安装-node">¶</a>五、安装 node</h3>
<p>1、选择下载目录（<a href="https://blog.csdn.net/qq_15766181/article/details/80755786" target="_blank" rel="noopener">为什么选择这个目录下载？</a>）：<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/</span><br></pre></td></tr></table></figure></p>
<p>2、下载源文件<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v14.21.1/node-v14.21.1-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p>
<p>3、解压源文件<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar zxvf node-v14.21.1-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p>
<p>4、重命名文件夹<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv node-v14.21.1-linux-x64 nodejs14</span><br></pre></td></tr></table></figure></p>
<p>5、修改配置文件<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure></p>
<p>6、在当前文件的最后一行加上以下内容：<br>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> # node</span><br><span class="line">export NODE_HOME=/usr/local/nodejs14</span><br><span class="line">export PATH=$NODE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p>
<p>7、更新配置文件<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p>
<p>8、查看版本号<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></p>
<h3 id="六-其他安装"><a class="header-anchor" href="#六-其他安装">¶</a>六、其他安装</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i nrm pm2 yarn pnpm -g</span><br></pre></td></tr></table></figure>
<h3 id="七-服务器生成-ssh-key"><a class="header-anchor" href="#七-服务器生成-ssh-key">¶</a>七、服务器生成 ssh key</h3>
<p>服务器拉取一些私有仓库的 git 代码时无需输入用户名密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C "liuxy0551@qq.com"</span><br></pre></td></tr></table></figure>
<h3 id="八-写在后面"><a class="header-anchor" href="#八-写在后面">¶</a>八、写在后面</h3>
<p>因为是第一次在服务器上操作，很多操作都是尝试着进行的，而我这个人又有点强迫症，所以在很多不太合适的操作过后我都会重置一下服务器。<br>
操作步骤为：阿里云控制台 -&gt; 云服务器 ECS -&gt; 选择实例 -&gt; 实例详情 -&gt; 右上角 停止实例 -&gt; 左侧 本实例磁盘 -&gt; 重新初始化磁盘。<br>
但是下次再连接服务器的时候就会报错了<code>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</code>，根据错误提示编辑对应的文件，删除服务器的记录即可。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/cent-os-base/3.png" alt></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/known_hosts</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Cent OS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Cent OS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中的异步编程</title>
    <url>/article/js-cb-promise-async-await.html</url>
    <content><![CDATA[<p>  烂笔头记录一下 JavaScript 中的异步编程。</p>
<a id="more"></a>
<p>  异步编程的方法有：</p>
<ul>
<li>回调函数</li>
<li>Promise</li>
<li>async/await</li>
</ul>
<h4 id="1-回调函数"><a class="header-anchor" href="#1-回调函数">¶</a>1、回调函数</h4>
<p>  回调函数在复杂场景下会影响代码的可读性和执行效率。</p>
<h4 id="2-promise"><a class="header-anchor" href="#2-promise">¶</a>2、Promise</h4>
<p>  Promise 是 es6 异步编程的一种方案，有三种状态：pending(挂起)、fullfilled(成功)、rejected(拒绝)，状态改变后不可逆，通过 then 方法来实现异步调用后的逻辑，支持链式调用。对应的状态变化有两种情况：</p>
<ul>
<li>pending -&gt; fullfilled (resolved 解决)</li>
<li>pending -&gt; rejected (rejected 拒绝)</li>
</ul>
<h4 id="3-async-await"><a class="header-anchor" href="#3-async-await">¶</a>3、async、await</h4>
<p>  async、await 是 es7 用来实现异步编程的，语法是在 function 关键词前加上<code>async</code>，代表是异步函数，<code>await</code>只能在<code>async</code>函数(异步方法)里使用，因为<code>await</code>访问本身就会造成程序停止阻塞，<code>await</code>的阻塞功能，可以把异步方法改成同步。<code>async</code>可以将任何函数转换为 Promise，<code>await</code>可以用在任何返回 Promise 的函数之前，并且会暂停在这里，直到 Promise 返回结果才往下进行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'这是一个数据'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">!<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> p = <span class="keyword">await</span> getData()</span><br><span class="line">  <span class="built_in">console</span>.log(p)</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>
<p>  async、await 基本做到了用同步代码的风格实现异步逻辑，让代码更简洁。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 中的冒泡排序</title>
    <url>/article/js-bubble-sort.html</url>
    <content><![CDATA[<p>记录一下使用 JavaScript 实现的冒泡排序算法，实际操作可查看 <a href="https://my-vue.liuxianyu.cn/bubble" target="_blank" rel="noopener">https://my-vue.liuxianyu.cn/bubble</a>。</p>
<a id="more"></a>
<h3 id="一-算法原理"><a class="header-anchor" href="#一-算法原理">¶</a>一、算法原理</h3>
<ul>
<li>1、比较两个相邻的元素，将值较大的元素交换到后面</li>
<li>2、每一对相邻元素都进行相同操作</li>
<li>3、针对所有的元素重复上述两步，除了最后一个元素</li>
<li>4、持续每次对越来越少的元素重复上述步骤，直到没有任何一对相邻元素需要比较</li>
</ul>
<h3 id="二-算法思路"><a class="header-anchor" href="#二-算法思路">¶</a>二、算法思路</h3>
<p><strong>依次比较相邻的两个数，将比较小的数放在前面，比较大的数放在后面</strong></p>
<ul>
<li>第一次比较：首先比较第一个数和第二个数，将较小的数放在前面，较大的数放在后面；</li>
<li>第二次比较：比较第二个数和第三个数，将较小的数放在前面，较大的数放在后面；</li>
<li>…</li>
<li>如此继续，直到比较到最后两个数，将较小的数放在前面，较大的数放在后面；</li>
<li>在上面一趟比较完成后，最后一个数一定是数组中最大的一个数，所以在第二趟比较时，最后一个数不参与比较；</li>
<li>在第二趟比较完成后，倒数第二个数也一定是数组倒数第二大数，所以在第三趟比较时，倒数第二个数不参与比较；</li>
<li>依次类推，每一趟比较次数依次减少</li>
</ul>
<p><strong>n 个数进行冒泡排序，总共要进行 n - 1 次排序，每趟进行 n - 1 次比较</strong></p>
<h3 id="三-算法描述"><a class="header-anchor" href="#三-算法描述">¶</a>三、算法描述</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 冒泡排序</span></span><br><span class="line">  bubbleSort (list) &#123;</span><br><span class="line">    <span class="comment">// 需要进行 list.length 次比较</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 第 i 趟比较</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; list.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="comment">// 开始进行比较，如果 list[i] &gt; list[i + 1]，则交换位置</span></span><br><span class="line">        <span class="keyword">if</span> (list[j] &gt; list[j + <span class="number">1</span>]) &#123;</span><br><span class="line">          <span class="keyword">let</span> temp = list[j]</span><br><span class="line">          list[j] = list[j + <span class="number">1</span>]</span><br><span class="line">          list[j + <span class="number">1</span>] = temp</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p></p>
<h3 id="四-算法比较："><a class="header-anchor" href="#四-算法比较：">¶</a>四、算法比较：</h3>
<table>
<thead>
<tr>
<th style="text-align:center">排序算法</th>
<th style="text-align:center">平均时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">冒泡排序</td>
<td style="text-align:center">O(n2)</td>
</tr>
<tr>
<td style="text-align:center">选择排序</td>
<td style="text-align:center">O(n2)</td>
</tr>
<tr>
<td style="text-align:center">插入排序</td>
<td style="text-align:center">O(n2)</td>
</tr>
<tr>
<td style="text-align:center">希尔排序</td>
<td style="text-align:center">O(n1.5)</td>
</tr>
<tr>
<td style="text-align:center">快速排序</td>
<td style="text-align:center">O(N*logN)</td>
</tr>
<tr>
<td style="text-align:center">归并排序</td>
<td style="text-align:center">O(N*logN)</td>
</tr>
<tr>
<td style="text-align:center">堆排序</td>
<td style="text-align:center">O(N*logN)</td>
</tr>
<tr>
<td style="text-align:center">基数排序</td>
<td style="text-align:center">O(d(n+r))</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 中把对象转成 String</title>
    <url>/article/js-object-string.html</url>
    <content><![CDATA[<p>最近公司项目在钉钉应用市场上线时，钉钉要求请求的数据需要加密（尤其是不允许暴露各类 id），保障数据安全。因为是上线周期内才提出的加密，所以由前端加密、后端解密来完成需求。后端希望 GET 请求<code>?</code>后的所有内容按正常请求时的格式进行加密，即加密<code>getResume?page=1&amp;pageSize=10&amp;jobId=2</code>，加密后的请求为<code>getResume?data=密文</code>。目前在做 GET 请求的参数加密，实现思路是 axios 请求拦截把 params 对象转成字符串，记录一下两种实现方式。</p>
<a id="more"></a>
<h3 id="一-urlsearchparams"><a class="header-anchor" href="#一-urlsearchparams">¶</a>一、URLSearchParams</h3>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams" target="_blank" rel="noopener">URLSearchParams</a> 接口定义了一些实用的方法来处理 URL 的查询字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> params = &#123; <span class="attr">page</span>: <span class="number">1</span>, <span class="attr">pageSize</span>: <span class="number">10</span>, <span class="attr">jobId</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">let</span> str = <span class="keyword">new</span> URLSearchParams(params).toString()</span><br><span class="line"><span class="built_in">console</span>.log(str)                         <span class="comment">// page=1&amp;pageSize=10&amp;jobId=2</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>1、当 params = null 时，输出 <code>null=</code></strong></li>
<li><strong>2、当 params = undefined || {} 时，输出空字符串</strong></li>
</ul>
</blockquote>
<h3 id="二-object-keys-和-map"><a class="header-anchor" href="#二-object-keys-和-map">¶</a>二、Object.keys 和 map</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> params = &#123; <span class="attr">page</span>: <span class="number">1</span>, <span class="attr">pageSize</span>: <span class="number">10</span>, <span class="attr">jobId</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">let</span> keyList = <span class="built_in">Object</span>.keys(params)        <span class="comment">// ["page", "pageSize", "jobId"]</span></span><br><span class="line"><span class="keyword">let</span> valueList = keyList.map(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123; <span class="keyword">return</span> i + <span class="string">'='</span> + params[i] &#125;)</span><br><span class="line"><span class="keyword">let</span> valueList1 = keyList.map(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123; <span class="keyword">return</span> params[i] &#125;)                 <span class="comment">// [1, 10, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(valueList.join(<span class="string">'&amp;'</span>))         <span class="comment">// page=1&amp;pageSize=10&amp;jobId=2</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>1、当 params = {} 时，keyList、valueList、valueList1 均输出<code>[]</code></strong></li>
<li><strong>2、params 不允许为 null 或 undefined，否则 keyList 即会报错</strong></li>
<li><strong>3、以上代码可简写为：</strong></li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> params = &#123; <span class="attr">page</span>: <span class="number">1</span>, <span class="attr">pageSize</span>: <span class="number">10</span>, <span class="attr">jobId</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">let</span> valueList = <span class="built_in">Object</span>.keys(params).map(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> i + <span class="string">'='</span> + params[i]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(valueList)                   <span class="comment">// ["page=1", "pageSize=10", "jobId=2"]</span></span><br><span class="line"><span class="built_in">console</span>.log(valueList.join(<span class="string">'&amp;'</span>))         <span class="comment">// page=1&amp;pageSize=10&amp;jobId=2</span></span><br></pre></td></tr></table></figure>
<h3 id="三-路径-string-转为对象"><a class="header-anchor" href="#三-路径-string-转为对象">¶</a>三、路径 string 转为对象</h3>
<p>有没有问号结果都是一样的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="built_in">Object</span>.fromEntries(<span class="keyword">new</span> URLSearchParams(<span class="string">'?date=30&amp;job=aaaa&amp;status=8'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(str);         <span class="comment">// &#123;date: '30', job: 'aaaa', status: '8'&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="四-加密方法"><a class="header-anchor" href="#四-加密方法">¶</a>四、加密方法</h3>
<p>参考另一篇随笔：<a href="https://liuxianyu.cn/article/vue-rsa.html">Vue 项目中实现 RSA 加密</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>form 表单通过正则表达式校验联系方式</title>
    <url>/article/telephone-mobile-check.html</url>
    <content><![CDATA[<p>最近公司项目中有个表单提交时需要校验输入的联系方式是电话号码或者手机号，通过正则表达式校验，记录一下。</p>
<a id="more"></a>
<h3 id="一-html"><a class="header-anchor" href="#一-html">¶</a>一、HTML</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"form"</span> <span class="attr">ref</span>=<span class="string">"formRef"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">"phone"</span> <span class="attr">:rules</span>=<span class="string">"[$validators.checkTelephone()]"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">"请输入联系方式"</span> <span class="attr">v-model</span>=<span class="string">"form.phone"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="二-正则表达式"><a class="header-anchor" href="#二-正则表达式">¶</a>二、正则表达式</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 联系方式校验 电话和手机号</span></span><br><span class="line">checkTelephone(options) &#123;</span><br><span class="line">  <span class="comment">// 联系方式校验 电话和手机号</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">checkTelephone</span>(<span class="params">rule, value, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">      callback(<span class="string">'联系方式不能为空'</span>); <span class="comment">// 校验不通过</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> isPhone = <span class="regexp">/^([0-9]&#123;3,4&#125;-)?[0-9]&#123;7,8&#125;$/</span>; <span class="comment">// 0571-86295197</span></span><br><span class="line">      <span class="keyword">const</span> isPhone01 = <span class="regexp">/^([0-9]&#123;3,4&#125;)?[0-9]&#123;7,8&#125;$/</span>; <span class="comment">// 0571-86295197</span></span><br><span class="line">      <span class="keyword">const</span> isPhone02 = <span class="regexp">/^\d&#123;3,4&#125;-\d&#123;3,4&#125;-\d&#123;3,4&#125;$/</span>; <span class="comment">// 4001-550-520</span></span><br><span class="line">      <span class="comment">// const isPhone02 = /^[0-9]&#123;3,4&#125;-[0-9]&#123;2,3&#125;-[0-9]&#123;2,3&#125;$/; // 4001-550-520</span></span><br><span class="line">      <span class="comment">// const isPhone02 = /^([0-9]&#123;3,4&#125;-)?([0-9]&#123;3,4&#125;-)?[0-9]&#123;3,4&#125;$/; // 4001-550-520</span></span><br><span class="line">      <span class="keyword">const</span> isMob=<span class="regexp">/^1[0-9]&#123;10&#125;$/</span>;</span><br><span class="line">      <span class="comment">// const phone02 = /^0\d&#123;2,3&#125;-?\d&#123;7,8&#125;$/;</span></span><br><span class="line">      <span class="keyword">const</span> valuePhone = value.trim();</span><br><span class="line">      <span class="keyword">if</span> (isMob.test(valuePhone) || isPhone.test(valuePhone) || isPhone01.test(valuePhone) || isPhone02.test(valuePhone)) &#123; <span class="comment">// 正则验证</span></span><br><span class="line">        callback()     <span class="comment">// 校验通过</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback(<span class="string">'请输入正确的联系方式'</span>) <span class="comment">// 校验不通过</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123; <span class="attr">validator</span>: checkTelephone, <span class="attr">message</span>: <span class="string">'请输入正确的联系方式'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> &#125;, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p>1、<a href="https://blog.csdn.net/qq_37672347/article/details/93210354" target="_blank" rel="noopener">正则 （手机号，座机， 密码8-16位字母与数字校验）</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 项目中生成类似 GitHub 的随机头像</title>
    <url>/article/random-avatar-md5.html</url>
    <content><![CDATA[<p>最近个人项目中有头像需求，就想起 GitHub 的随机头像，通过 <code>identicon.js</code> 和 <code>blueimp-md5</code> 两个第三方库实现了，记录一下。</p>
<a id="more"></a>
<h3 id="一-实现效果"><a class="header-anchor" href="#一-实现效果">¶</a>一、实现效果</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/random-avatar-md5/1.png" alt></p>
<h3 id="二-封装组件-avatar-vue"><a class="header-anchor" href="#二-封装组件-avatar-vue">¶</a>二、封装组件 - avatar.vue</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;img class=&quot;avatar&quot; :src=&quot;url&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Identicon from &apos;identicon.js&apos;</span><br><span class="line">  import md5 from &apos;blueimp-md5&apos;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      num: [Number]</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      url() &#123;</span><br><span class="line">        return &apos;data:image/png;base64,&apos; + new Identicon(md5(this.num || 0), 420).toString()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">  .avatar &#123;</span><br><span class="line">    width: 40px;</span><br><span class="line">    height: 40px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p>1、<a href="https://github.com/stewartlord/identicon.js" target="_blank" rel="noopener">identicon.js</a><br>
2、<a href="https://github.com/blueimp/JavaScript-MD5" target="_blank" rel="noopener">JavaScript-MD5</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>md5</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML + CSS 伪元素实现同心圆</title>
    <url>/article/css-concentric-circles.html</url>
    <content><![CDATA[<p>最近工作中涉及到一个同心圆样式的绘制，记录一下通过一个 <code>div</code> 实现的方法。</p>
<a id="more"></a>
<h3 id="一-实现效果"><a class="header-anchor" href="#一-实现效果">¶</a>一、实现效果</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/css-concentric-circles/1.png" alt></p>
<h3 id="二-html"><a class="header-anchor" href="#二-html">¶</a>二、HTML</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"radio active"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="三-css"><a class="header-anchor" href="#三-css">¶</a>三、CSS</h3>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.radio</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> <span class="number">#DBE0E6</span> solid;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  &amp;<span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> <span class="number">#53A2F7</span> solid;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">6px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">6px</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#53A2F7</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">3px</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">3px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong><code>content</code> 属性与 :before 及 :after 伪元素配合使用，插入生成的内容，必须有 <code>content</code> 属性，否则中间的圆不显示</strong></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 编程之路（四）——子组件更新父组件的数据</title>
    <url>/article/child-update-parent.html</url>
    <content><![CDATA[<p>最近遇见了子组件更新父组件数据的需求，总结一下使用的方法以及一些区别</p>
<a id="more"></a>
<h3 id="一-sync-修饰符推荐"><a class="header-anchor" href="#一-sync-修饰符推荐">¶</a>一、sync 修饰符<code>推荐</code></h3>
<p>1、组附件调用子组件传值时加上 sync 修饰符<br>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;InputSearch :show.sync=&quot;show&quot;&gt;&lt;/InputSearch&gt;</span><br></pre></td></tr></table></figure></p>
<p>2、子组件中可以这样更新父组件的值<br>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'update:show'</span>, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li>要定义对应的变量去传值，如：show，不可以直接传 true 之类的实际值</li>
</ul>
</blockquote>
<h3 id="二-this-parent"><a class="header-anchor" href="#二-this-parent">¶</a>二、this.$parent</h3>
<p>1、不使用修饰符，通过 this.$parent 进行改变<br>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$parent.show = <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<h3 id="三-sync-修饰符和-this-parent-的区别"><a class="header-anchor" href="#三-sync-修饰符和-this-parent-的区别">¶</a>三、sync 修饰符和 this.$parent 的区别</h3>
<p>两种方法的关键区别在于：<br>
　　1、第一种方法是显式的操作数据，而第二种是隐式的操作数据，隐式容易导致逻辑混乱；<br>
　　2、第二种方法更新父组件的数据对于父组件来说是完全被动的，父组件本身并不知情，很容易在父组件毫不知情的情况下被某个子组件更新了数据；<br>
　　3、Vue 的<code>单向数据流</code>理念中，一个组件的状态只能由组件自身和父组件改变，子组件只能提交事件并任由其父组件处理，这个机制保证组件对自身的状态总是充分知情，这样才能保障代码逻辑的健壮性。</p>
<blockquote>
<p><strong>推荐</strong></p>
<ul>
<li><strong>推荐使用 sync 修饰符</strong></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>在 VMware Fusion 中安装 Cent OS 7.6 版本的虚拟机</title>
    <url>/article/vmware-linux.html</url>
    <content><![CDATA[<p>今天突然想在 Mac OS 上感受一下虚拟机的乐趣。尝试了 VirtualBox（安装夜神模拟器时不知道怎么就同时安装了）、Parallels Desktop、VMware Fusion 之后，发现还是 VMware Fusion 更有以前在 Windows 上使用虚拟机的熟悉感，所以以下内容基于 VMware Fusion。</p>
<a id="more"></a>
<h3 id="一-下载-linux-镜像"><a class="header-anchor" href="#一-下载-linux-镜像">¶</a>一、 下载 Linux 镜像</h3>
<p>1、Cent OS：<a href="https://www.centos.org" target="_blank" rel="noopener">https://www.centos.org</a> <a href="https://www.centos.org/download/" target="_blank" rel="noopener">下载页面</a> 在下载页面选择 DVD  进入镜像选择页面，第一个是华为云上的镜像，我在杭州，所以我选择了第二个浙大的镜像。其实华为云的更快点：<a href="http://mirrors.huaweicloud.com/centos/7.6.1810/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso" target="_blank" rel="noopener">http://mirrors.huaweicloud.com/centos/7.6.1810/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso</a><br>
<img src="https://images-hosting.liuxianyu.cn/posts/vmware-linux/1.png" alt></p>
<p>2、Ubuntu：<a href="https://ubuntu.com" target="_blank" rel="noopener">https://ubuntu.com</a> 华为云上的多版本镜像地址<a href="http://mirrors.huaweicloud.com/repository/ubuntu-releases/16.04/" target="_blank" rel="noopener">http://mirrors.huaweicloud.com/repository/ubuntu-releases/16.04/</a> 也可以在 <a href="https://launchpad.net/ubuntu/+cdmirrors?_ga=2.223681115.1514728070.1565962868-1880279007.1565962868" target="_blank" rel="noopener">下载页面</a> 滚动到 China 的部分，选择合适的镜像地址</p>
<h3 id="二-几种虚拟机软件给我的感受"><a class="header-anchor" href="#二-几种虚拟机软件给我的感受">¶</a>二、 几种虚拟机软件给我的感受</h3>
<p>1、VirtualBox<br>
　　准备再感受一下虚拟机的时候，想起来上次安装夜神模拟器模拟安卓的时候，给我安装了一个 VirtualBox，所以先拿它试一试。但是页面 UI 感觉不是很好看（其实我第一时间想到的就是和 Easy UI 类似的风格） <code>pass</code></p>
<p>2、Parallels Desktop<br>
　　同事推荐的，之前也在另一个同事的电脑上感受过安装的 Windows 虚拟机，确实看起来不错，但是我使用虚拟机的过程基本都是依赖 VMware，所以用起来不是很习惯，最后还是用起了 VMware。在网上看到 Parallels Desktop 也可以做安卓模拟器，准备后期更一篇相关的随笔，这个软件先保留在电脑里</p>
<p>3、VMware Fusion<br>
　　和我在 Windows 上使用的 VMware Workstation 风格基本一致，新建虚拟机的步骤也差不多，不再赘述，可参考以前的一篇随笔 <a href="https://liuxianyu.cn/article/vmware-macos.html">在 VMware 中安装 MacOS High Sierra 10.13</a>。软件需要收费，自行解决</p>
<h3 id="三-安装-cent-os-7-6"><a class="header-anchor" href="#三-安装-cent-os-7-6">¶</a>三、 安装 Cent OS 7.6</h3>
<p>1、安装 GNOME 版本，多图<br>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-linux/2.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-linux/3.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-linux/4.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-linux/5.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-linux/6.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-linux/7.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-linux/8.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-linux/9.png" alt></div></div></div></div><br>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-linux/10.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-linux/11.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-linux/12.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-linux/13.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-linux/14.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-linux/15.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-linux/16.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-linux/17.png" alt></div></div></div></div></p>
<h3 id="四-基础配置"><a class="header-anchor" href="#四-基础配置">¶</a>四、基础配置</h3>
<h4 id="1-ifconfig"><a class="header-anchor" href="#1-ifconfig">¶</a>1、ifconfig</h4>
<p>如果 ifconfig 报错，在 root 用户下执行：<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install net-tools -y</span><br></pre></td></tr></table></figure></p>
<p>参考：<a href="https://www.cnblogs.com/cy60/p/9287856.html" target="_blank" rel="noopener">Cent OS 7 最小安装完成后，ifconfig 命令用不了</a></p>
<table>
	<tr>
		<td>用户名</td>
		<td>root</td>
		<td>liuxy</td>
	</tr><tr>
	</tr><tr>
		<td>密码</td>
		<td>123456</td>
		<td>1234</td>
	</tr><tr>
	</tr><tr>
		<td>IP</td>
		<td colspan="2">192.168.131.137（变化的）</td>
	</tr><tr>
</tr></table>
<h4 id="2-bash-vim-未找到命令"><a class="header-anchor" href="#2-bash-vim-未找到命令">¶</a>2、-bash: vim: 未找到命令</h4>
<h5 id="2-1-查看-vim-数据包"><a class="header-anchor" href="#2-1-查看-vim-数据包">¶</a>2.1、查看 vim 数据包</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa |grep vim</span><br></pre></td></tr></table></figure>
<h5 id="2-2-安装-vim-相关文件"><a class="header-anchor" href="#2-2-安装-vim-相关文件">¶</a>2.2、安装 vim 相关文件</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y vim-minimal</span><br><span class="line">yum install -y vim-common</span><br><span class="line">yum install -y vim-enhanced</span><br></pre></td></tr></table></figure>
<h5 id="2-3-绝招"><a class="header-anchor" href="#2-3-绝招">¶</a>2.3、绝招</h5>
<p>如果还是不生效，执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y vim*</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://blog.csdn.net/oqqHun123/article/details/93742893" target="_blank" rel="noopener">【linux】-bash: vim: 未找到命令</a></p>
<h4 id="3-将-liuxy-加入-sudo-权限"><a class="header-anchor" href="#3-将-liuxy-加入-sudo-权限">¶</a>3、将 liuxy 加入 sudo 权限</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure>
<p>像如下配置 sudoers</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># User privilege specification  </span><br><span class="line">root        ALL=(ALL:ALL) ALL  </span><br><span class="line">liuxy    ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Cent OS</category>
      </categories>
      <tags>
        <tag>VMware</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>将 Hexo 个人空间放到服务器上</title>
    <url>/article/hexo-server.html</url>
    <content><![CDATA[<p>最近拿到一个服务器，尝试着把基于 Hexo 搭建的个人空间放到服务器上，用 Nginx 进行转发，顺便再熟悉一下 Linux 下的一些操作，同时会将部署、git 备份、上传服务器等一系列操作自动化。</p>
<a id="more"></a>
<h3 id="一-虚拟机练手"><a class="header-anchor" href="#一-虚拟机练手">¶</a>一、 虚拟机练手</h3>
<p>1、我根据网上的教程在服务器上部署后，个人站的打开速度提升了很多，借用同事的一句话：5M 带宽的服务器放你一个静态资源怎么会慢？</p>
<p>2、实现目标后就想着总结一下过程，故在虚拟机上再试一次，同时也是感受一下 Mac OS 系统中虚拟机的玩法</p>
<p>3、我以前在 Windows 上玩的虚拟机是 VMware，这次在 Mac OS 上安装的是 VMware Fusion，基本上新建虚拟机的步骤都差不多，不再赘述，可参考以前的一篇随笔 <a href="https://liuxianyu.cn/article/vmware-macos.html">在 VMware 中安装 MacOS High Sierra 10.13</a></p>
<p>4、我目前选用的是和服务器一样的 Cent OS，具体操作步骤参考 <a href="https://liuxianyu.cn/article/hexo-server.html#%E4%BA%8C-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E8%B7%B5">服务器实践</a></p>
<h3 id="二-服务器实践"><a class="header-anchor" href="#二-服务器实践">¶</a>二、 服务器实践</h3>
<h4 id="一-服务器基础环境搭建"><a class="header-anchor" href="#一-服务器基础环境搭建">¶</a>（一）、服务器基础环境搭建</h4>
<p>1、参考 <a href="https://liuxianyu.cn/article/cent-os-base.html">Cent OS 基础环境搭建</a></p>
<h4 id="二-hexo-的部署"><a class="header-anchor" href="#二-hexo-的部署">¶</a>（二）、Hexo 的部署</h4>
<p>需要进行的操作：创建 deploy 用户、添加本机的 SSH 公钥到服务器、安装 git、安装 nginx 并配置等</p>
<p>1、创建 deploy 用户并设置密码，把 deploy 用户添加到 sudo 用户组中 - 参考 <a href="https://liuxianyu.cn/article/cent-os-base.html#%E4%B8%80-%E6%B7%BB%E5%8A%A0-deploy-%E7%94%A8%E6%88%B7">Cent OS 基础环境搭建 - 添加 deploy 用户</a></p>
<p>2、添加本机的 SSH 公钥到服务器 - 参考 <a href="https://liuxianyu.cn/article/cent-os-base.html#%E4%BA%8C-%E6%B7%BB%E5%8A%A0%E6%9C%AC%E6%9C%BA%E7%9A%84-ssh-%E5%85%AC%E9%92%A5%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8">Cent OS 基础环境搭建 - 添加本机的 SSH 到服务器</a></p>
<p>3、切换到 deploy 用户，安装 git、nginx<br>
　　参考 <a href="https://liuxianyu.cn/article/cent-os-base.html#%E4%B8%89-%E5%AE%89%E8%A3%85-git-vim-wget-lsof">Cent OS 基础环境搭建 - 安装 git</a><br>
　　参考 <a href="https://liuxianyu.cn/article/cent-os-base.html#%E4%B8%89-%E5%AE%89%E8%A3%85-git-vim-wget-lsof">Cent OS 基础环境搭建 - 安装 nginx</a></p>
<p>4、在服务器上新建一个<code>blog</code>文件夹，用来存储<code>hexo d</code>后的静态文件，并授权给 deploy 用户。<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /mnt/projects/hexo-blog/blog</span><br><span class="line">cd /mnt/projects/hexo-blog</span><br><span class="line">sudo chown -R deploy:deploy blog</span><br></pre></td></tr></table></figure></p>
<p>5、在<code>hexo-blog</code>目录下初始化一个 git 裸库，服务器上的 git 仓库通常都以<code>.git</code>结尾，并把 git 仓库的 owner 改为 deploy 用户<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo git init --bare blog.git</span><br><span class="line">sudo chown -R deploy:deploy blog.git</span><br></pre></td></tr></table></figure></p>
<p>6、新建一个 post-receive 文件<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure></p>
<p>然后在该文件中输入以下内容，表示将分支导出到<code>blog</code>文件夹下。<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git --work-tree=/mnt/projects/hexo-blog/blog --git-dir=/mnt/projects/hexo-blog/blog.git checkout -f</span><br></pre></td></tr></table></figure></p>
<p>保存退出之后，再执行以下命令，赋予该文件可执行权限。<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod +x blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure></p>
<p>7、修改博客根目录下的<code>_config.yml</code>文件：<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: https://github.com/liuxy0551/liuxy0551.github.io.git,master</span><br><span class="line">    coding: https://git.dev.tencent.com/liuxianyu/liuxy0551.coding.me.git,master</span><br><span class="line">    gitee: git@gitee.com:liuxy0551/liuxy0551.git,master</span><br><span class="line">    server: deploy@47.65.55.62:/mnt/projects/hexo-blog/blog.git,master</span><br></pre></td></tr></table></figure></p>
<p>8、在博客根目录下输入以下命令：<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p>
<p>9、配置 nginx<br>
<img src="https://images-hosting.liuxianyu.cn/posts/hexo-server/1.png" alt></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/nginx/conf.d/hexo-blog.conf</span><br></pre></td></tr></table></figure>
<p>细节配置参考 <a href="https://liuxianyu.cn/article/cent-os-base.html#%E4%BA%8C-%E5%A4%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">Cent OS 基础环境搭建 - 安装 nginx - 多配置文件</a>，配置完成后启动 nginx 并设置开机自启，然后在浏览器输入域名就可以看见博客的内容了。<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable nginx</span><br><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></table></figure></p>
<h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3>
<p>  1、<a href="https://segmentfault.com/a/1190000012907499" target="_black">基于CentOS搭建Hexo博客</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Cent OS</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Hexo</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Dart 基础知识</title>
    <url>/article/dart-basic.html</url>
    <content><![CDATA[<p>最近学习了一下<code>Dart</code>，做一些基础笔记。</p>
<a id="more"></a>
<p>我是看 <a href="https://www.bilibili.com/video/av52490605" target="_blank" rel="noopener">IT 营大地老师的视频</a> 学习的，感觉大地老师讲的很不错，以前 Angular 入门也是看大地老师的视频。再次致谢。</p>
<h3 id="常量"><a class="header-anchor" href="#常量">¶</a>常量</h3>
<p><code>const</code> <code>final</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="keyword">final</span> PI = <span class="number">3.1415926</span>;</span><br></pre></td></tr></table></figure>
<h3 id="string-字符串"><a class="header-anchor" href="#string-字符串">¶</a>String 字符串</h3>
<p><code>isEmpty</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> str = <span class="string">'1+1=<span class="subst">$&#123;<span class="number">1</span>+<span class="number">1</span>&#125;</span>'</span>;          <span class="comment">// 1+1=2</span></span><br></pre></td></tr></table></figure>
<h3 id="int-整型"><a class="header-anchor" href="#int-整型">¶</a>int 整型</h3>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myNum = <span class="built_in">int</span>.parse(<span class="string">'123'</span>);</span><br><span class="line"><span class="keyword">if</span> (myNum.isNaN) &#123; &#125;</span><br></pre></td></tr></table></figure>
<h3 id="double-浮点型"><a class="header-anchor" href="#double-浮点型">¶</a>double 浮点型</h3>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d1 = <span class="built_in">double</span>.parse(<span class="string">'123'</span>);</span><br><span class="line"><span class="keyword">var</span> d2 = <span class="built_in">double</span>.parse(<span class="string">'123.1'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="bool"><a class="header-anchor" href="#bool">¶</a>bool</h3>
<p><code>true</code> <code>false</code></p>
<h3 id="list-数组"><a class="header-anchor" href="#list-数组">¶</a>List 数组</h3>
<p><code>length</code> <code>isEmpty</code> <code>isNotEmpty</code> <code>reversed</code><br>
<code>add</code> <code>addAll([])</code> <code>indexOf()</code> <code>remove()</code> <code>removeAt(index)</code> <code>fillRange()</code> <code>insert()</code> <code>insertAll()</code> <code>join()</code> <code>slit()</code> <code>forEach()</code> <code>map()</code> <code>any()</code> <code>every()</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list2 = list1.reversed.toList();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list3 = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">list3.add(<span class="number">1</span>);</span><br><span class="line">list3.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定类型 只能存放 String 类型</span></span><br><span class="line"><span class="keyword">var</span> list4 = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br></pre></td></tr></table></figure>
<h3 id="set-元素不允许重复"><a class="header-anchor" href="#set-元素不允许重复">¶</a>Set 元素不允许重复</h3>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">var</span> list = s.toList();          转换成数组</span><br></pre></td></tr></table></figure>
<h3 id="map-字典"><a class="header-anchor" href="#map-字典">¶</a>Map 字典</h3>
<p><code>keys</code> <code>values</code> <code>isEmpty</code> <code>isNotEmpty</code><br>
<code>addAll()</code> <code>remove(key)</code> <code>containsKey()</code> <code>containsValue()</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; <span class="string">"name"</span>: <span class="string">"zhangsan"</span>, age: <span class="number">20</span>, <span class="string">"work"</span>: [<span class="string">"程序员"</span>, <span class="string">"送外卖"</span>] &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">p[<span class="string">'name'</span>] = <span class="string">'张三'</span>;</span><br><span class="line">p[<span class="string">'age'</span>] = <span class="number">20</span>;</span><br><span class="line">p[<span class="string">'work'</span>] = [<span class="string">"程序员"</span>, <span class="string">"送外卖"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.keys.toList());</span><br><span class="line"><span class="built_in">print</span>(p.values.toList());</span><br></pre></td></tr></table></figure>
<h3 id="类型判断"><a class="header-anchor" href="#类型判断">¶</a>类型判断</h3>
<p><code>is</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'123'</span>;</span><br><span class="line"><span class="keyword">if</span> (str <span class="keyword">is</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'String'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str <span class="keyword">is</span> <span class="built_in">int</span>) &#123;</span><br><span class="line">  console.log(<span class="string">'int'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  console.log(<span class="string">'其他类型'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运算符"><a class="header-anchor" href="#运算符">¶</a>运算符</h3>
<p><code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code> <code>~/</code>取整 <code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>=</code> <code>==</code> <code>|</code> <code>&amp;&amp;</code> <code>||</code> <code>??=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>~/=</code> <code>++</code> <code>--</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">int</span> b ??= a;        <span class="comment">// b为空的时候将a的值给b</span></span><br><span class="line"><span class="built_in">print</span>(b);           <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<h3 id="三目运算符"><a class="header-anchor" href="#三目运算符">¶</a>三目运算符</h3>
<p><code>??</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">var</span> c = a ?? <span class="number">33</span>;</span><br></pre></td></tr></table></figure>
<h3 id="if-else-switch-case"><a class="header-anchor" href="#if-else-switch-case">¶</a>if else, switch case</h3>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> () &#123; &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> () &#123; &#125;</span><br><span class="line"><span class="keyword">else</span> () &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (gender) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'male'</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'female'</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'参数错误'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123; &#125;</span><br><span class="line"><span class="keyword">catch</span> (err) &#123; &#125;</span><br></pre></td></tr></table></figure>
<h3 id="循环"><a class="header-anchor" href="#循环">¶</a>循环</h3>
<p><code>for</code> <code>while</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">print</span>(i);</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ()&#123;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> ()</span><br></pre></td></tr></table></figure>
<h3 id="function"><a class="header-anchor" href="#function">¶</a>Function</h3>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> printInfo (<span class="built_in">String</span> username, <span class="built_in">int</span> age) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'hello func'</span>);</span><br><span class="line">  <span class="comment">// return ;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选参数</span></span><br><span class="line"><span class="keyword">void</span> printInfo (<span class="built_in">String</span> username, [<span class="built_in">int</span> age]) &#123;</span><br><span class="line">  <span class="keyword">if</span> (age != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'passed age'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认参数</span></span><br><span class="line"><span class="keyword">void</span> printInfo (<span class="built_in">String</span> username, [<span class="built_in">int</span> age, <span class="built_in">String</span> gender = <span class="string">'male'</span>]) &#123;</span><br><span class="line">  <span class="keyword">if</span> (age != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'passed age'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名参数</span></span><br><span class="line"><span class="keyword">void</span> printInfo (<span class="built_in">String</span> username, &#123;<span class="built_in">int</span> age, <span class="built_in">String</span> gender = <span class="string">'male'</span>&#125;) &#123;</span><br><span class="line">  <span class="keyword">if</span> (age != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'passed age'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="built_in">List</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> newList = list.map((value) =&gt; value * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自执行函数</span></span><br><span class="line">(()&#123; &#125;)();</span><br></pre></td></tr></table></figure>
<h3 id="class-类"><a class="header-anchor" href="#class-类">¶</a>Class 类</h3>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">var</span> PI = <span class="number">3.1415926</span>;            <span class="comment">// Person.PI</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">show</span> () &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">String</span> city;</span><br><span class="line">  <span class="built_in">int</span> _age;         <span class="comment">// _ 私有方法(类必须提取到一个文件中才有效)</span></span><br><span class="line">  <span class="built_in">String</span> _gender;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 默认构造函数的简写</span></span><br><span class="line">  Person(<span class="keyword">this</span>.name):_gender=<span class="string">'male'</span>,_age=<span class="number">18</span>;</span><br><span class="line">  <span class="comment">// 命名构造函数</span></span><br><span class="line">  Person.now () &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'我是命名构造函数'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// var p1 = Person.setInfo('zhangsan', 18);</span></span><br><span class="line">  Person.setInfo (<span class="built_in">String</span> name, <span class="keyword">this</span>.city) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'我是命名构造函数'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 工厂构造函数</span></span><br><span class="line">  <span class="keyword">factory</span> Person (<span class="built_in">String</span> name) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person._internal(name);</span><br><span class="line">  &#125;</span><br><span class="line">  Person._internal(<span class="keyword">this</span>.name);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> printInfo () &#123;</span><br><span class="line">    <span class="built_in">print</span>(Person.PI);</span><br><span class="line">    <span class="built_in">print</span>(PI);</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">this</span>.name);</span><br><span class="line">    <span class="built_in">print</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// getter setter</span></span><br><span class="line">  <span class="built_in">String</span> <span class="keyword">get</span> genderValue &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._gender;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> genderValue(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>._gender = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// _ 私有方法</span></span><br><span class="line">  _setGender (<span class="built_in">String</span> gender) &#123;</span><br><span class="line">    <span class="keyword">this</span>._gender = gender;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 操作符重载</span></span><br><span class="line">  <span class="built_in">String</span> <span class="keyword">operator</span> +(Person p) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> &amp; <span class="subst">$&#123;p.name&#125;</span>'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> idNum;</span><br><span class="line">  Student(<span class="built_in">String</span> name, <span class="keyword">this</span>.idNum) : <span class="keyword">super</span>(name) &#123; &#125;</span><br><span class="line">  Student(<span class="keyword">this</span>.idNum, <span class="built_in">String</span> name, [<span class="built_in">String</span> city = <span class="string">'hangzhou'</span>]) : <span class="keyword">super</span>.setInfo(name, city) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">this</span>.idNum);</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement printInfo</span></span><br><span class="line">    <span class="keyword">super</span>.printInfo();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="is-as"><a class="header-anchor" href="#is-as">¶</a>is as</h3>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 类型判断</span></span><br><span class="line"><span class="keyword">if</span> (p <span class="keyword">is</span> Person) &#123; &#125;</span><br><span class="line"><span class="comment">// 类型转换</span></span><br><span class="line">(p <span class="keyword">as</span> Person).printInfo();</span><br><span class="line"><span class="comment">// 连对操作</span></span><br><span class="line">p..name = <span class="string">'zhangsan'</span></span><br><span class="line">..city = <span class="string">'hangzhou'</span>;</span><br></pre></td></tr></table></figure>
<h3 id="抽象类"><a class="header-anchor" href="#抽象类">¶</a>抽象类</h3>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  eat();</span><br><span class="line">  printInfo () &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'抽象类的方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement eat</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  printInfo() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement printInfo</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement eat</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// superInfo 可以使用抽象类的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多接口"><a class="header-anchor" href="#多接口">¶</a>多接口</h3>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123; &#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mixins</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为mixin类不能有继承，且不能有构造函数, 相同方法， 后面会覆盖前面的方法</span></span><br><span class="line"><span class="comment">// class C with A,B &#123; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Person</span> <span class="title">with</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</span><br><span class="line">  C(<span class="built_in">String</span> name) : <span class="keyword">super</span>(name) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> C; </span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">is</span> C);          <span class="comment">// true</span></span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">is</span> Person);     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">is</span> A);          <span class="comment">// true </span></span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">is</span> B);          <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h3 id="泛型"><a class="header-anchor" href="#泛型">¶</a>泛型</h3>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">T getData&lt;T&gt; (T value) &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T getData&lt;<span class="built_in">int</span>&gt; (T value) &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eg</span></span><br><span class="line">getData(<span class="string">'hello'</span>)</span><br><span class="line">getData&lt;<span class="built_in">String</span>&gt; (<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="系统库-第三方库-自定义库"><a class="header-anchor" href="#系统库-第三方库-自定义库">¶</a>系统库、第三方库、自定义库</h3>
<blockquote>
<ul>
<li>系统库</li>
</ul>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:io'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:convert'</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>第三方库</li>
<li>pubspec.yaml 添加包及版本号</li>
</ul>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">dependences: </span><br><span class="line">   http: ^<span class="number">0.12</span><span class="number">.0</span>+<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>pub get 进行安装，然后就可以使用了</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:http/http.dart'</span> <span class="keyword">as</span> http;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>自定义库</li>
</ul>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'lib/Animal.dart'</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>类名冲突</li>
</ul>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'lib/Person1.dart'</span>;      <span class="comment">// Person </span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'lib/Person2.dart'</span>;      <span class="comment">// Person</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>部分引入</li>
</ul>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'lib/myMath'</span> <span class="keyword">show</span> getAge;        <span class="comment">// 只引入 getAge</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'lib/myMath'</span> <span class="keyword">hide</span> getName;       <span class="comment">// getName 不被导入，其他都引入</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>延时加载（懒加载）</li>
<li>deferred as 当使用的时候需要调用 loadLibrary() 来加载</li>
</ul>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:defered/hello.dart'</span> <span class="keyword">deferred</span> <span class="keyword">as</span> hello;</span><br><span class="line">greet () <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> hello.loadLibrary();</span><br><span class="line">  hello.printGreeting();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>Dart</category>
      </categories>
      <tags>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 兼容 IE9（含） +</title>
    <url>/article/vue-ie9+.html</url>
    <content><![CDATA[<p>  最近有个项目在 IE9 中白屏，整理一下相关的资料。</p>
<a id="more"></a>
<h3 id="1-transpiledependencies"><a class="header-anchor" href="#1-transpiledependencies">¶</a>1、transpileDependencies</h3>
<p>如果项目中使用了第三个组件，请在<code>vue.config.js</code>中添加：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 如下正则代表当前 node_modules/zzp-ui 下的所有文件【如果是 ['zzp-ui'] 则只有引用的一个文件生效】</span></span><br><span class="line">  transpileDependencies: [<span class="regexp">/zzp-ui/</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-浏览器内核"><a class="header-anchor" href="#2-浏览器内核">¶</a>2、浏览器内核</h3>
<p>建议在 public/index.html head 中添加：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit|ie-comp|ie-stand"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>首先强制浏览器使用 webkit 内核（极速内核）</li>
<li>如果浏览器没有 webkit 内核，则按照用户浏览器所支持的最新 IE 版本的 trident 内核渲染页面（IE 兼容内核）</li>
<li>否则按照当前浏览器的标准内核渲染（IE 标准内核）</li>
</ul>
<h3 id="3-ie9-跨域"><a class="header-anchor" href="#3-ie9-跨域">¶</a>3、IE9 跨域</h3>
<p>IE9 默认不支持跨域访问，如果项目使用到跨域且需要兼容 IE9, 可以配置 nginx 等转发网络请求<br>
本地开发如在 IE9 下测试解决跨域可临时使用 proxy，在<code>vue.config.js</code>中配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://api.douban.com'</span>,</span><br><span class="line">        ws: <span class="literal">true</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  transpileDependencies: [<span class="regexp">/zzp-ui/</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>兼容性</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>改动第三方库 - git 后仅个人使用</title>
    <url>/article/git-reference.html</url>
    <content><![CDATA[<p>这里不提以下需求的具体实现，记录一下如何把第三方开源库按自己的逻辑修改后仅供个人使用。</p>
<blockquote>
<p>最近看到一个项目中的需求——在微信 H5 中实现类似抖音的功能，挺有兴趣的，想尝试着看自己能不能实现这样的需求。过程中在 GitHub 上看到有别人封装的库 <a href="https://github.com/tclyjy/wechat-h5-video" target="_blank" rel="noopener">wechat-h5-video</a>，引入一下后感觉可以实现类似的功能，但是有些地方需要改动，可惜第三方库引入后改动源文件发布后也就还原了。这里不提需求的实现，记录一下如何把第三方开源库按自己的逻辑修改后仅供个人使用。</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p><strong><code>以下申明</code></strong></p>
<ul>
<li><strong>原仓库</strong>：<a href="https://github.com/tclyjy/wechat-h5-video" target="_blank" rel="noopener">wechat-h5-video</a></li>
<li><strong>使用范围</strong>：仅用作个人项目代码练习，侵权必删，其他第三方仓库同理</li>
</ul>
</blockquote>
<h3 id="一-引用第三方库-改动第三方库"><a class="header-anchor" href="#一-引用第三方库-改动第三方库">¶</a>一、 引用第三方库、改动第三方库</h3>
<p>1、在项目中按实际需求引用第三方库之后，发现有些地方需要改动，这个时候可以去 node_modules 文件夹中的第三方库直接改动</p>
<p>2、上述操作不利于后续再次利用改动后的第三方库，同时假如 node_modules 文件夹被清除，或者更换电脑写该项目，则改动不同步</p>
<h3 id="二-git-改动后的第三方库"><a class="header-anchor" href="#二-git-改动后的第三方库">¶</a>二、 git 改动后的第三方库</h3>
<p>1、想要解决上述的担忧，可以将第三方库改动后的代码放到 git 仓库中，同时在 package.json 文件中引用</p>
<p>2、因为原作者的 <a href="https://github.com/tclyjy/wechat-h5-video" target="_blank" rel="noopener">wechat-h5-video</a> 项目是在 GitHub 上，所以我 Fork 了一下这个项目 <a href="https://github.com/liuxy0551/wechat-h5-video" target="_blank" rel="noopener">https://github.com/liuxy0551/wechat-h5-video</a>，<br>
将 Fork 后的代码在本地 clone 并打开，再将之前改动的代码替换掉 clone 的代码，然后上传到 git 仓库</p>
<p>3、在需要引入该第三方库的项目中改动 package.json 文件，将版本号指向 git 仓库的地址，如下图：<br>
<img src="https://images-hosting.liuxianyu.cn/posts/git-reference/1.png" alt></p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>使用范围</strong>：仅用作个人项目代码练习，侵权必删，其他第三方仓库同理</li>
<li><strong>使用范围</strong>：仅用作个人项目代码练习，侵权必删，其他第三方仓库同理</li>
<li><strong>使用范围</strong>：仅用作个人项目代码练习，侵权必删，其他第三方仓库同理</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 GitHub Pages 部署静态网页</title>
    <url>/article/github-pages.html</url>
    <content><![CDATA[<p>在日常工作中，偶尔会写一些自己的 demo，这些 demo 不需要部署到服务器上，但是需要快速部署来验证思路，而且要方便分享。主要是很多前端并没有服务器，这里记录一下我的方法：<code>GitHub Pages</code></p>
<a id="more"></a>
<blockquote>
<p><strong>GitHub Pages 的优点</strong></p>
<ul>
<li><strong>使用零成本</strong>：Github Pages 集成在 Github 中，直接和代码管理绑定在一起，随着代码更新自动重新部署，使用非常方便；</li>
<li><strong>免费域名</strong>：免费提供 <code>username.github.io</code> 的域名，免费的静态网站服务器；</li>
<li><strong>无数量限制</strong>：Github Pages 没有使用的数量限制，每一个 repository 都可以部署为一个静态网站；</li>
</ul>
</blockquote>
<blockquote>
<p>这里介绍一下基于前端框架创建的项目如何部署到 GitHub Pages，这里我拿 Vue 的 webpack 项目举例，包含 vue-cli 2.x 和 vue-cli 3.x。</p>
</blockquote>
<h3 id="一-vue-cli-2-x-下使用-github-pages"><a class="header-anchor" href="#一-vue-cli-2-x-下使用-github-pages">¶</a>一、 vue-cli 2.x 下使用 GitHub Pages</h3>
<p>1、创建项目<br>
　　这里我是拿以前的 2.x 项目来测试部署的，想自行创建新项目的话可以参考 <a href="https://github.com/vuejs-templates/webpack" target="_blank" rel="noopener">https://github.com/vuejs-templates/webpack</a></p>
<p>2、在 github 上创建一个新的 repository<br>
　　将本地项目传到 github 上可参考我的另一篇随笔 <a href="https://liuxianyu.cn/article/git-order-a.html">Git 常用命令（一）—— 将本地仓库与多个远程仓库关联</a></p>
<p>来看一下项目结构：<img src="https://images-hosting.liuxianyu.cn/posts/github-pages/1.png" alt></p>
<p>这里需要配置的就是 /config/index.js，其中我们需要关注的是 module.exports 的 build 属性，我们将在这里配置 webpack build 时生成文件的路径。</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  dev: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  build: &#123;</span><br><span class="line">    // Template for index.html</span><br><span class="line">    index: path.resolve(__dirname, &apos;../docs/index.html&apos;),</span><br><span class="line"></span><br><span class="line">    // Paths</span><br><span class="line">    assetsRoot: path.resolve(__dirname, &apos;../docs&apos;),</span><br><span class="line">    assetsSubDirectory: &apos;&apos;,</span><br><span class="line">    assetsPublicPath: &apos;/huobi-trade-admin/&apos;,</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里将打包后的 dist 文件夹改名为 docs，不要把 docs 加入到<code>.gitignore</code>。</p>
<h3 id="二-vue-cli-3-x-下使用-github-pages"><a class="header-anchor" href="#二-vue-cli-3-x-下使用-github-pages">¶</a>二、 vue-cli 3.x 下使用 GitHub Pages</h3>
<p>这里我新建了一个基于 vue-cli 3.x 的项目，可以先看看 vue-cli 3.x 给的文档 <a href="https://cli.vuejs.org/zh/guide/deployment.html#github-pages" target="_blank" rel="noopener">https://cli.vuejs.org/zh/guide/deployment.html#github-pages</a><br>
主要设置两个参数：<code>publicPath</code>和<code>outputDir</code>，其余参数设置可以参考 <a href="https://cli.vuejs.org/zh/config/#vue-config-js" target="_blank" rel="noopener">vue-cli 3.x 中的 vue.config.js</a>。</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: &apos;0.0.0.0&apos;,</span><br><span class="line">    port: &apos;8080&apos;,</span><br><span class="line">    disableHostCheck: true,   // 解决 127.0.0.1 指向其他域名时出现&quot;Invalid Host header&quot;问题</span><br><span class="line">  &#125;,</span><br><span class="line">  publicPath: process.env.NODE_ENV === &apos;production&apos; ? &apos;/new-school-recruit/&apos; : &apos;/&apos;,</span><br><span class="line">  outputDir: &apos;docs&apos;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我部署了一个基于 vue-cli 3.x 的项目 <a href="https://liuxy0556.github.io/new-school-recruit" target="_blank" rel="noopener">https://liuxy0556.github.io/new-school-recruit</a>，存储库为 <a href="https://github.com/liuxy0556/new-school-recruit" target="_blank" rel="noopener">https://github.com/liuxy0556/new-school-recruit</a></p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>如果项目中有请求，请使用 https</strong></li>
</ul>
</blockquote>
<blockquote>
<p>如果线上没有 <code>docs</code> 这个文件夹，在 Setting -&gt; Github Pages -&gt; Source 中是无法选择 master branch / docs folder 的，这个时候可以把 dist 文件夹下的文件放到项目根目录，然后在 Setting -&gt; Github Pages -&gt; Source 中选择第一项 master branch，点击给出的 url 就可以查看静态页面了。不推荐，因为每次打包都需要移动文件，或者 dist/index.html 会和根目录的 index.html 冲突。</p>
</blockquote>
<p><strong><code>npm run build</code>打包后然后把整个项目上传到 github 上之后就可以在存储库的 Setting，找到 GitHub Pages 部分，将 Source 选择为 master branch / docs folder （第二项），选择后会自动保存，然后在 Github Pages 部分就会给出 url ，点击即可进入我们的静态页面啦。</strong></p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/github-pages/2.png" alt></p>
<h3 id="三-自定义-template"><a class="header-anchor" href="#三-自定义-template">¶</a>三、 自定义 template</h3>
<p>在 Vue + Element UI 的技术栈下，有个我觉得很好用的后台管理系统模板 <a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/" target="_blank" rel="noopener">vue-element-admin</a>，我尝试将这两个项目通过 GitHub Pages 练习部署。<br>
<a href="https://liuxy0556.github.io/vue-element-admin" target="_blank" rel="noopener">vue-element-admin</a>、<a href="https://liuxy0556.github.io/vue-admin-template" target="_blank" rel="noopener">vue-admin-template</a></p>
]]></content>
      <categories>
        <category>git</category>
        <category>github</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>前端项目跨域问题的几种解决方案</title>
    <url>/article/access-control-allow-origin.html</url>
    <content><![CDATA[<p>在前端面试中大几率会提到的问题就是有没有遇到过跨域问题，是如何解决的。这里记录一下我知道的几种解决方案。</p>
<a id="more"></a>
<h3 id="一-什么是跨域"><a class="header-anchor" href="#一-什么是跨域">¶</a>一、什么是跨域</h3>
<p>1、浏览器对于 JavaScript 的同源策略的限制</p>
<p>2、域名相同、端口相同、协议相同，这就是同源策略的保护，能有效的阻止跨站攻击</p>
<p>3、具体怎么才是同源，如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">形式</th>
<th style="text-align:center">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">同一域名，同一文件夹</td>
<td style="text-align:center">成功</td>
</tr>
<tr>
<td style="text-align:center">同一域名，不同文件夹</td>
<td style="text-align:center">成功</td>
</tr>
<tr>
<td style="text-align:center">不同域名，文件夹相同</td>
<td style="text-align:center">失败</td>
</tr>
<tr>
<td style="text-align:center">同一域名，不同端口号</td>
<td style="text-align:center">失败</td>
</tr>
<tr>
<td style="text-align:center">同一域名，不同的协议</td>
<td style="text-align:center">失败</td>
</tr>
</tbody>
</table>
<h3 id="二-几种解决方案"><a class="header-anchor" href="#二-几种解决方案">¶</a>二、几种解决方案</h3>
<h4 id="1-jsonp-不推荐"><a class="header-anchor" href="#1-jsonp-不推荐">¶</a>1、Jsonp <code>不推荐</code></h4>
<p>最早的解决方案，利用script标签可以跨域的原理实现。</p>
<blockquote>
<p><strong>限制</strong></p>
<ul>
<li>需要服务的支持</li>
<li>只能发起GET请求</li>
</ul>
</blockquote>
<h4 id="2-cors-cross-origin-resource-sharing-跨域资源共享-推荐"><a class="header-anchor" href="#2-cors-cross-origin-resource-sharing-跨域资源共享-推荐">¶</a>2、CORS (Cross Origin Resource Sharing 跨域资源共享) <code>推荐</code></h4>
<p>这种方案对于前端同学没什么工作量，和不跨域情况下的写法没有区别，工作量基本都在后端同学那里。每一次请求，浏览器必须先以 <code>OPTIONS</code> 请求方式发送一个预检请求（也不是所有请求都会发送 options ，<a href="https://panjiachen.github.io/awesome-bookmarks/blog/cs.html#cors" target="_blank" rel="noopener">展开介绍</a>）,通过预检请求从而获知服务器端对跨域请求支持的 HTTP 方法。在确认服务器允许该跨域请求的情况下，再以实际的 HTTP 请求发送真正的请求。<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">HTTP访问控制（CORS）</a></p>
<blockquote>
<p><strong>优点</strong></p>
<ul>
<li>只要第一次配置好后，之后不管有多少接口和项目，都可以复用</li>
<li>在服务端进行控制是否允许跨域，可自定义规则</li>
<li>开发环境和正式环境都可以使用</li>
<li>支持各种请求方式</li>
</ul>
</blockquote>
<h4 id="3-前端为主的实现"><a class="header-anchor" href="#3-前端为主的实现">¶</a>3、前端为主的实现</h4>
<p>在 <code>dev</code> 开发时可以使用 webpack 的 <code>proxy</code>，参照 <a href="https://webpack.docschina.org/configuration/dev-server/#devserver-proxy" target="_blank" rel="noopener">文档</a> 基本就会了。但这种方法在生产环境是无法使用的，在生产环境中需要使用 <code>nginx</code> 进行反向代理。不论是 <code>proxy</code> 还是 <code>nginx</code> 的原理都是一样的，通过搭建一个中转服务器来转发请求规避跨域的问题。</p>
<h4 id="4-开发环境通过-node-转发请求"><a class="header-anchor" href="#4-开发环境通过-node-转发请求">¶</a>4、开发环境通过 node 转发请求</h4>
<p>在 <code>dev</code> 开发时还可以通过 <code>node</code> 进行请求转发</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>跨域</category>
      </categories>
  </entry>
  <entry>
    <title>前端开发中的 vscode</title>
    <url>/article/vscode-config.html</url>
    <content><![CDATA[<p>  一直使用的是 WebStorm，比较重，尝试一下轻量的 vscode，记录一下配置和插件。</p>
<a id="more"></a>
<h3 id="一-配置文件"><a class="header-anchor" href="#一-配置文件">¶</a>一、配置文件</h3>
<p>链接: <a href="https://pan.baidu.com/s/1qPeuAwM8TUW8UA6yED0PfQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1qPeuAwM8TUW8UA6yED0PfQ</a> 密码:<code>2171</code></p>
<h3 id="二-插件列表"><a class="header-anchor" href="#二-插件列表">¶</a>二、插件列表</h3>
<table>
<thead>
<tr>
<th>序号</th>
<th>插件名</th>
<th>用处</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Auto Close Tag</td>
<td>自动闭合 HTML/XML 标签</td>
</tr>
<tr>
<td>2</td>
<td>Auto Rename Tag</td>
<td>自动完成另一侧标签的同步修改</td>
</tr>
<tr>
<td>3</td>
<td>Bracket Pair Colorizer</td>
<td>给括号加上不同的颜色，便于区分不同的区块，使用者可以定义不同括号类型和不同颜色</td>
</tr>
<tr>
<td>4</td>
<td>Chinese (Simplified) Language</td>
<td>简体中文</td>
</tr>
<tr>
<td>5</td>
<td>Color Highlight</td>
<td>颜色高亮</td>
</tr>
<tr>
<td>6</td>
<td>Color Picker</td>
<td>取色器</td>
</tr>
<tr>
<td>7</td>
<td>CSS Peek</td>
<td>使用此插件，你可以追踪至样式表中 CSS 类和 ids 定义的地方。当你在 HTML 文件中右键单击选择器时，选择“ Go to Definition 和 Peek definition ”选项，它便会给你发送样式设置的 CSS 代码。</td>
</tr>
<tr>
<td>8</td>
<td>eslint</td>
<td>格式化插件</td>
</tr>
<tr>
<td>9</td>
<td>filesize</td>
<td>在底部状态栏显示当前文件大小，点击后还可以看到详细创建、修改时间</td>
</tr>
<tr>
<td>10</td>
<td>goto node modules</td>
<td>快速定位 node 模块</td>
</tr>
<tr>
<td>11</td>
<td>HTML CSS Support</td>
<td>智能提示 CSS 类名以及 id</td>
</tr>
<tr>
<td>12</td>
<td>Image preview</td>
<td>图片预览。（支持 html、css 中图片资源预览）</td>
</tr>
<tr>
<td>13</td>
<td>JavaScript (ES6) code snippets</td>
<td>ES6 语法智能提示，以及快速输入，不仅仅支持.js，还支持.ts，.jsx，.tsx，.html，.vue，省去了配置其支持各种包含 js 代码文件的时间</td>
</tr>
<tr>
<td>14</td>
<td>Node.js Modules Intellisense</td>
<td>提供 JavaScript 和 TypeScript 导入声明时的自动补全</td>
</tr>
<tr>
<td>15</td>
<td>npm</td>
<td>支持运行文件中定义的 npm 脚本，并根据中定义的依赖项验证已安装的模块 package.json。</td>
</tr>
<tr>
<td>16</td>
<td>npm Intellisense</td>
<td>用于在 import 语句中自动填充 npm 模块</td>
</tr>
<tr>
<td>17</td>
<td>Path Intellisense</td>
<td>自动提示文件路径，支持各种快速引入文件</td>
</tr>
<tr>
<td>18</td>
<td>Prettier</td>
<td>格式化代码</td>
</tr>
<tr>
<td>19</td>
<td>Relative Path</td>
<td>相对路径</td>
</tr>
<tr>
<td>20</td>
<td>Swig(.tpl)</td>
<td>支持 hexo 中的 swig 文件</td>
</tr>
<tr>
<td>21</td>
<td>Vetur</td>
<td>Vue 多功能集成插件，包括：语法高亮，智能提示，emmet，错误提示，格式化，自动补全，debugger。vscode 官方钦定 Vue 插件，Vue 开发者必备。</td>
</tr>
<tr>
<td>22</td>
<td>vscode-fileheader</td>
<td>文件开头注释 ctrl + shift + i ，（/* \n * @Author: {author} \n * @Date: {createTime} \n */）</td>
</tr>
<tr>
<td>23</td>
<td>vscode-icons-mac</td>
<td>类 Finder 文件夹图标</td>
</tr>
<tr>
<td>24</td>
<td>Vue Peek</td>
<td>可跳转自定义组件</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 和 WePY 中过滤器写法</title>
    <url>/article/vue-wepy-filter.html</url>
    <content><![CDATA[<p>  现有前端框架中普遍有 filter 的使用，最近在写一个小程序，需要显示金额，常规保留两位小数，记录一下处理方法及前端框架中的普遍用法。<br>
　　小程序是基于腾讯官方 WePY 框架来实现的，但是由于小程序技术生态比较闭合，导致很多前端框架积累出的成果都没有实现。filter 可以理解为管道加工处理，接收一组数据，经过各种不同类型的管道加工，产出新的数据，但是又不会影响原有数据，最终展示给用户。</p>
<h3 id="一-现有前端框架的-filter"><a class="header-anchor" href="#一-现有前端框架的-filter">¶</a>一、现有前端框架的 filter</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-wepy-filter/1.png" alt></p>
<p>  在后端同学没有返回适合显示的数据或者不方便处理数据时，可以在前端使用过滤器处理，上述对时间和金额进行处理，使用 <code>|</code> 作为管道符，传递参数进行序列化。date 的过滤写法可参考 <a href="https://github.com/liuxy0551/liuxy0551.github.io/blob/master/assets/posts/vue-wepy-filter/date.js" target="_blank" rel="noopener">date.js</a> 。</p>
<h3 id="二-小程序中过滤器的使用"><a class="header-anchor" href="#二-小程序中过滤器的使用">¶</a>二、小程序中过滤器的使用</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-wepy-filter/2.png" alt></p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-wepy-filter/3.png" alt></p>
<p>  上图是小程序对金额的处理效果（基于 WePY），可参考 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxs/index.html?search-key=wxs" target="_blank" rel="noopener">微信小程序 WXS 文档</a>。<br>
　　在 template 中引入 <a href="https://github.com/liuxy0551/liuxy0551.github.io/blob/master/assets/posts/vue-wepy-filter/money.wxs" target="_blank" rel="noopener">money.wxs</a> 文件，并传入数据进行转换，页面代码可参考 <a href="https://github.com/liuxy0551/liuxy0551.github.io/blob/master/assets/posts/vue-wepy-filter/detail.wpy" target="_blank" rel="noopener">detail.wpy</a></p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-wepy-filter/4.png" alt></p>
<p>可参考：</p>
<ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxs/" target="_blank" rel="noopener">官方文档 - WXS 语法参考</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Element UI 日期选择器时间选择范围限制</title>
    <url>/article/element-ui-date-picker.html</url>
    <content><![CDATA[<p>  最近后台管理系统中的项目遇到了选择时间时需要加以限制的问题，记录一下。</p>
<a id="more"></a>
<p>DatePicker 组件代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-date-picker</span><br><span class="line">        v-model=&quot;time&quot;</span><br><span class="line">        type=&quot;date&quot;</span><br><span class="line">        placeholder=&quot;选择日期&quot;</span><br><span class="line">        :picker-options=&quot;pickerOptions&quot;&gt;</span><br><span class="line">&lt;/el-date-picker&gt;</span><br></pre></td></tr></table></figure>
<h3 id="一-选择今天及今天以后的日期"><a class="header-anchor" href="#一-选择今天及今天以后的日期">¶</a>一、选择今天及今天以后的日期</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/element-ui-date-picker/1.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    time: &apos;&apos;,</span><br><span class="line">    pickerOptions: &#123;</span><br><span class="line">      disabledDate(time) &#123;</span><br><span class="line">        return time.getTime() &lt; Date.now() - 8.64e7;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二-选择今天及今天以前的日期"><a class="header-anchor" href="#二-选择今天及今天以前的日期">¶</a>二、选择今天及今天以前的日期</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/element-ui-date-picker/2.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    time: &apos;&apos;,</span><br><span class="line">    pickerOptions: &#123;</span><br><span class="line">      disabledDate(time) &#123;</span><br><span class="line">        return time.getTime() &gt; Date.now() - 8.64e6</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三-选择今天以后的日期-不含今天"><a class="header-anchor" href="#三-选择今天以后的日期-不含今天">¶</a>三、选择今天以后的日期（不含今天）</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/element-ui-date-picker/3.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    time: &apos;&apos;,</span><br><span class="line">    pickerOptions: &#123;</span><br><span class="line">      disabledDate(time) &#123;</span><br><span class="line">        return time.getTime() &lt; Date.now();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="四-选择三个月之前到今天的日期"><a class="header-anchor" href="#四-选择三个月之前到今天的日期">¶</a>四、选择三个月之前到今天的日期</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/element-ui-date-picker/4.png" alt><br>
<img src="https://images-hosting.liuxianyu.cn/posts/element-ui-date-picker/5.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    time: &apos;&apos;,</span><br><span class="line">    pickerOptions: &#123;</span><br><span class="line">      disabledDate(time) &#123;</span><br><span class="line">        let curDate = (new Date()).getTime();</span><br><span class="line">        let three = 90 * 24 * 3600 * 1000;</span><br><span class="line">        let threeMonths = curDate - three;</span><br><span class="line">        return time.getTime() &gt; Date.now() || time.getTime() &lt; threeMonths;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 实现 Base64 的加密和解密</title>
    <url>/article/js-base64.html</url>
    <content><![CDATA[<p>  最近公司项目中需要解密一下后端同学经过 Base64 加密的分享 id，顺便记录一下加密的写法。</p>
<a id="more"></a>
<h3 id="一-base64-的加密"><a class="header-anchor" href="#一-base64-的加密">¶</a>一、Base64 的加密</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/js-base64/1.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// base64的加密</span><br><span class="line">b64EncodeUnicode(str) &#123;</span><br><span class="line">  return btoa(encodeURIComponent(str).replace(/%([0-9A-F]&#123;2&#125;)/g, function(match, p1) &#123;</span><br><span class="line">    return String.fromCharCode(&apos;0x&apos; + p1);</span><br><span class="line">  &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(this.b64EncodeUnicode(&apos;base64的加密解密&apos;))         // YmFzZTY055qE5Yqg5a+G6Kej5a+G</span><br></pre></td></tr></table></figure>
<h3 id="二-base64-的解密"><a class="header-anchor" href="#二-base64-的解密">¶</a>二、Base64 的解密</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/js-base64/2.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// base64的解密</span><br><span class="line">b64DecodeUnicode(str) &#123;</span><br><span class="line">  return decodeURIComponent(atob(str).split(&apos;&apos;).map(function(c) &#123;</span><br><span class="line">    return &apos;%&apos; + (&apos;00&apos; + c.charCodeAt(0).toString(16)).slice(-2);</span><br><span class="line">  &#125;).join(&apos;&apos;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(this.b64DecodeUnicode(&apos;YmFzZTY055qE5Yqg5a+G6Kej5a+G&apos;))     // base64的加密解密</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>加密解密</category>
      </categories>
      <tags>
        <tag>加密解密</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 项目中使用 ECharts 来绘制世界地图和中国地图</title>
    <url>/article/vue-echarts.html</url>
    <content><![CDATA[<p>最近公司项目中需要使用 ECharts 来展示世界地图和中国地图，记录一下。</p>
<a id="more"></a>
<h3 id="一-实现效果"><a class="header-anchor" href="#一-实现效果">¶</a>一、实现效果</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-echarts/1.png" alt><br>
<img src="https://images-hosting.liuxianyu.cn/posts/vue-echarts/2.png" alt></p>
<h3 id="二-引入组件及说明"><a class="header-anchor" href="#二-引入组件及说明">¶</a>二、引入组件及说明</h3>
<p>1、v-charts：基于 Vue2.0 和 ECharts 封装的图表组件 <a href="https://v-charts.js.org" target="_blank" rel="noopener">官方文档</a>   <a href="https://github.com/ElemeFE/v-charts" target="_blank" rel="noopener">Github</a><br>
　　2、可参考 <a href="https://www.echartsjs.com/tutorial.html" target="_blank" rel="noopener">ECharts 官网</a> 的文档<br>
　　3、可多参考 <a href="https://echarts.baidu.com/option.html" target="_blank" rel="noopener">ECharts 的配置项文档</a> 来进行颜色、文字等样式的改动<br>
　　4、import ‘…/…/…/…/node_modules/echarts/map/js/china.js’ 引入 ECharts 自带的 China、world 等文件时，注意引入的路径</p>
<h3 id="三-世界地图的组件代码-已省略部分国家数据-可在代码文件中复制"><a class="header-anchor" href="#三-世界地图的组件代码-已省略部分国家数据-可在代码文件中复制">¶</a>三、世界地图的组件代码（已省略部分国家数据，可在代码文件中复制）</h3>
<p><a href="https://github.com/liuxy0551/liuxy0551.github.io/blob/master/assets/posts/vue-echarts/world.vue" target="_blank" rel="noopener">世界 - 代码文件</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;echarts-box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;title-box&quot;&gt;</span><br><span class="line">      &lt;img class=&quot;label&quot; src=&quot;~assets/imgs/label2.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;title&quot;&gt;校友世界分布&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;v-chart class=&quot;echarts&quot; :options=&quot;polar&quot; @dblclick=&quot;dblClick&quot; @click=&quot;doClick&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import ECharts from &apos;vue-echarts&apos;</span><br><span class="line">  import &apos;../../../../node_modules/echarts/map/js/world.js&apos;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &apos;DailyActiveChart&apos;,</span><br><span class="line">    components: &#123; ECharts &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        polar: &#123;</span><br><span class="line">          dataRange: &#123;</span><br><span class="line">            show: true,</span><br><span class="line">            min: 0,</span><br><span class="line">            max: 1000000,</span><br><span class="line">            text: [&apos;High&apos;, &apos;Low&apos;],</span><br><span class="line">            realtime: true,</span><br><span class="line">            calculable: true,</span><br><span class="line">            color: [&apos;#7CF9D0&apos;, &apos;#7CC0FE&apos;, &apos;#DEF6FF&apos;]</span><br><span class="line">          &#125;,</span><br><span class="line">          tooltip: &#123;</span><br><span class="line">            trigger: &apos;item&apos;</span><br><span class="line">          &#125;,</span><br><span class="line">          geo: &#123;</span><br><span class="line">            map: &apos;world&apos;,</span><br><span class="line">            label: &#123;</span><br><span class="line">              emphasis: &#123;</span><br><span class="line">                show: false</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            roam: false,</span><br><span class="line">            silent: true,</span><br><span class="line">            itemStyle: &#123;</span><br><span class="line">              normal: &#123;</span><br><span class="line">                areaColor: &apos;#37376e&apos;,</span><br><span class="line">                borderColor: &apos;#000&apos;</span><br><span class="line">              &#125;,</span><br><span class="line">              emphasis: &#123;</span><br><span class="line">                areaColor: &apos;#3E98FE&apos;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          series: [&#123;</span><br><span class="line">            name: &apos;校友人数&apos;,</span><br><span class="line">            type: &apos;map&apos;,</span><br><span class="line">            mapType: &apos;world&apos;,</span><br><span class="line">            itemStyle: &#123;</span><br><span class="line">              normal: &#123;</span><br><span class="line">                borderWidth: 0.5,</span><br><span class="line">                borderColor: &apos;#A9A9A9&apos;,</span><br><span class="line">                areaStyle: &#123;</span><br><span class="line">                  color: &apos;#37376e&apos;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              emphasis: &#123;</span><br><span class="line">                areaColor: &apos;#3E98FE&apos;,</span><br><span class="line">                borderColor: &apos;#fff&apos;,</span><br><span class="line">                borderWidth: 0</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            mapLocation: &#123;</span><br><span class="line">              y: 100</span><br><span class="line">            &#125;,</span><br><span class="line">            data: [&#123;</span><br><span class="line">              name: &apos;Afghanistan&apos;,</span><br><span class="line">              value: 28397.812</span><br><span class="line">            &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: &apos;Angola&apos;,</span><br><span class="line">                value: 19549.124</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: &apos;Albania&apos;,</span><br><span class="line">                value: 3150.143</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: &apos;United Arab Emirates&apos;,</span><br><span class="line">                value: 8441.537</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: &apos;Yemen&apos;,</span><br><span class="line">                value: 22763.008</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: &apos;South Africa&apos;,</span><br><span class="line">                value: 51452.352</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: &apos;Zambia&apos;,</span><br><span class="line">                value: 13216.985</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: &apos;Zimbabwe&apos;,</span><br><span class="line">                value: 13076.978</span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line">            symbolSize: 12,</span><br><span class="line">            label: &#123;</span><br><span class="line">              normal: &#123;</span><br><span class="line">                show: false</span><br><span class="line">              &#125;,</span><br><span class="line">              emphasis: &#123;</span><br><span class="line">                show: false</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      // 双击事件</span><br><span class="line">      dblClick (v) &#123;</span><br><span class="line">        console.log(v)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 单击事件</span><br><span class="line">      doClick (v) &#123;</span><br><span class="line">        console.log(v)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">  .echarts-box &#123;</span><br><span class="line">    margin: 20px 0;</span><br><span class="line">    padding: 20px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    .title-box &#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      .label &#123;</span><br><span class="line">        width: 25px;</span><br><span class="line">        height: 25px;</span><br><span class="line">        margin-right: 10px;</span><br><span class="line">      &#125;</span><br><span class="line">      .title &#123;</span><br><span class="line">        color: #4C4C4C;</span><br><span class="line">        font-size: 18px;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .echarts &#123;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 600px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="四-中国地图的组件代码-已省略部分省份数据-可在代码文件中复制"><a class="header-anchor" href="#四-中国地图的组件代码-已省略部分省份数据-可在代码文件中复制">¶</a>四、中国地图的组件代码（已省略部分省份数据，可在代码文件中复制）</h3>
<p><a href="https://github.com/liuxy0551/liuxy0551.github.io/blob/master/assets/posts/vue-echarts/China.vue" target="_blank" rel="noopener">中国 - 代码文件</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;echarts-box&quot;&gt;</span><br><span class="line">    &lt;v-chart class=&quot;echarts&quot; :options=&quot;polar&quot; @dblclick=&quot;dblClick&quot; @click=&quot;doClick&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import ECharts from &apos;vue-echarts&apos;</span><br><span class="line">  import &apos;../../../../node_modules/echarts/map/js/china.js&apos;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &apos;DailyActiveChart&apos;,</span><br><span class="line">    components: &#123; ECharts &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        polar: &#123;</span><br><span class="line">          title: &#123;</span><br><span class="line">            text: &apos;校友中国分布地图&apos;</span><br><span class="line">          &#125;,</span><br><span class="line">          tooltip: &#123;&#125;, // 鼠标移到图里面的浮动提示框</span><br><span class="line">          dataRange: &#123;</span><br><span class="line">            show: true,</span><br><span class="line">            min: 0,</span><br><span class="line">            max: 1000,</span><br><span class="line">            text: [&apos;High&apos;, &apos;Low&apos;],</span><br><span class="line">            realtime: true,</span><br><span class="line">            calculable: true</span><br><span class="line">          &#125;,</span><br><span class="line">          geo: &#123; // 这个是重点配置区</span><br><span class="line">            map: &apos;china&apos;, // 表示中国地图</span><br><span class="line">            roam: true,</span><br><span class="line">            label: &#123;</span><br><span class="line">              normal: &#123;</span><br><span class="line">                show: true, // 是否显示对应地名</span><br><span class="line">                textStyle: &#123;</span><br><span class="line">                  color: &apos;rgba(0,0,0,0.4)&apos;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            itemStyle: &#123;</span><br><span class="line">              normal: &#123;</span><br><span class="line">                borderColor: &apos;rgba(0, 0, 0, 0.2)&apos;</span><br><span class="line">              &#125;,</span><br><span class="line">              emphasis: &#123;</span><br><span class="line">                areaColor: null,</span><br><span class="line">                shadowOffsetX: 0,</span><br><span class="line">                shadowOffsetY: 0,</span><br><span class="line">                shadowBlur: 20,</span><br><span class="line">                borderWidth: 0,</span><br><span class="line">                shadowColor: &apos;rgba(0, 0, 0, 0.5)&apos;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          series: [&#123;</span><br><span class="line">            type: &apos;scatter&apos;,</span><br><span class="line">            coordinateSystem: &apos;geo&apos; // 对应上方配置</span><br><span class="line">          &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              name: &apos;启动次数&apos;, // 浮动框的标题</span><br><span class="line">              type: &apos;map&apos;,</span><br><span class="line">              geoIndex: 0,</span><br><span class="line">              data: [&#123;</span><br><span class="line">                name: &apos;北京&apos;,</span><br><span class="line">                value: 599</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                name: &apos;上海&apos;,</span><br><span class="line">                value: 142</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                name: &apos;黑龙江&apos;,</span><br><span class="line">                value: 44</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                name: &apos;深圳&apos;,</span><br><span class="line">                value: 92</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                name: &apos;湖北&apos;,</span><br><span class="line">                value: 810</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                name: &apos;四川&apos;,</span><br><span class="line">                value: 453</span><br><span class="line">              &#125;] // 这里就是数据，即数组可以单独放在外面也可以直接写</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      // 双击事件</span><br><span class="line">      dblClick (v) &#123;</span><br><span class="line">        console.log(v)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 单击事件</span><br><span class="line">      doClick (v) &#123;</span><br><span class="line">        console.log(v)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      this.polar.series[1].data.push(&#123;</span><br><span class="line">        name: &apos;浙江&apos;,</span><br><span class="line">        value: 324</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">  .echarts-box &#123;</span><br><span class="line">    margin: 20px 0;</span><br><span class="line">    padding: 20px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    .echarts &#123;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 600px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>ECharts</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>ECharts</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 移动端项目的一些 UI 框架</title>
    <url>/article/vue-mobile-ui.html</url>
    <content><![CDATA[<p>  公司基于 Vue 的移动端项目基本都是引入 Mint UI，但是目前 Mint UI 在 Github 上已一年多无人更新维护，很多 Issues也没有得到及时的回复处理。基于上述因素，准备在新项目的 UI 选型上开始考虑选择其他维护积极的 project。这里记录一下遇到的一些个人觉得不错的 UI 选择。</p>
<a id="more"></a>
<p>1、Vant —— 轻量、可靠的移动端 Vue 组件库，由有赞维护 <code>star 7.5k</code><br>
　　<a href="https://youzan.github.io/vant/#/zh-CN/intro" target="_blank" rel="noopener">中文文档</a> <a href="https://github.com/youzan/vant" target="_blank" rel="noopener">Github 地址</a></p>
<p>2、Mint UI —— 纪念一下在很多项目中使用到的 Mint UI <code>star 13.4k</code><br>
　　<a href="https://mint-ui.github.io/docs/#/zh-cn2" target="_blank" rel="noopener">中文文档</a> <a href="https://github.com/ElemeFE/mint-ui/tree/master/example/pages" target="_blank" rel="noopener">Github 地址</a> <a href="http://elemefe.github.io/mint-ui/#/" target="_blank" rel="noopener">在线预览</a></p>
<p>3、Muse UI —— 是一个在我看来比较美观的 UI 框架 <code>star 7.1k</code><br>
　　<a href="https://muse-ui.org/#/zh-CN/installation" target="_blank" rel="noopener">中文文档</a> <a href="https://github.com/museui/muse-ui" target="_blank" rel="noopener">Github 地址</a></p>
<p>4、Vonic —— 是一个基于 Vue 和 ionic CSS 的 UI 框架 <code>star 3.0k</code><br>
　　用于快速构建移动端单页应用，因为实习时写 Angular 搭配过 ionic，所以对这个 UI 框架有更多熟悉的感觉<br>
　　<a href="https://wangdahoo.github.io/vonic-documents/#/" target="_blank" rel="noopener">中文文档</a> <a href="https://github.com/wangdahoo/vonic" target="_blank" rel="noopener">Github 地址</a> <a href="https://wangdahoo.github.io/vonic/docs/#/home" target="_blank" rel="noopener">在线预览</a></p>
<p>5、VUX —— 是一个移动端 UI 组件库，样式基于<a href="https://github.com/Tencent/weui" target="_blank" rel="noopener">WeUI</a> <code>star 15.1k</code><br>
　　<a href="https://vux.li/#/?id=%E7%AE%80%E4%BB%8B" target="_blank" rel="noopener">中文文档</a> <a href="https://github.com/airyland/vux" target="_blank" rel="noopener">Github 地址</a> <a href="https://vux.li/demos/v2/?x-page=v2-doc-home#/" target="_blank" rel="noopener">在线预览</a></p>
<p>6、MUI —— 最接近原生APP体验的高性能前端框架 <code>star 10.9k</code><br>
　　<a href="http://dev.dcloud.net.cn/mui/" target="_blank" rel="noopener">中文文档</a> <a href="https://github.com/dcloudio/mui/" target="_blank" rel="noopener">Github 地址</a> <a href="http://www.dcloud.io/hellomui/" target="_blank" rel="noopener">在线预览</a></p>
<p>7、Cube UI —— 是基于 Vue.js 实现的精致移动端组件库，由滴滴团队实现 <code>star 5.4k</code><br>
　　<a href="https://didi.github.io/cube-ui/#/zh-CN/docs/introduction" target="_blank" rel="noopener">中文文档</a> <a href="https://github.com/didi/cube-ui" target="_blank" rel="noopener">Github 地址</a></p>
<blockquote>
<p>目前只接触过前五种 UI 框架，希望在后续的学习中能够接触更多简洁、美观的 UI 框架。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义滚动条样式</title>
    <url>/article/scroll-bar.html</url>
    <content><![CDATA[<p>  记录一下自定义滚动条样式的代码。</p>
<a id="more"></a>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-thumb</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#d0d0d0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">outline-offset</span>: -<span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">0</span> solid <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">-webkit-border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span> solid <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-track-piece</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中 == 和 === 的区别</title>
    <url>/article/js-equal.html</url>
    <content><![CDATA[<p>  刚开始接触前端的时候一直不太懂 JavaScript 中 == 和 === 的区别，查找资料后记录一下自己的理解。</p>
<a id="more"></a>
<h3 id="一-简单理解"><a class="header-anchor" href="#一-简单理解">¶</a>一、简单理解</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/js-equal/1.png" alt></p>
<p>== 代表相同，=== 代表严格相同。</p>
<p>当进行双等号比较的时候，先检查两个操作数的数据类型，如果相同，则进行 === 比较；<br>
如果不同，则进行一次类型转换，转换成相同类型后再进行比较。</p>
<p>而 === 比较时，如果类型不同，直接输出 false。</p>
<h3 id="二-比较过程"><a class="header-anchor" href="#二-比较过程">¶</a>二、比较过程</h3>
<p>双等号==：<br>
　　（1）如果两个值类型相同，再进行三个等号(===)的比较<br>
　　（2）如果两个值类型不同，也有可能相等，需根据以下规则进行类型转换在比较：<br>
　　　　1）如果一个是 null，一个是 undefined，那么相等<br>
　　　　2）如果一个是字符串，一个是数值，把字符串转换成数值之后再进行比较</p>
<p>三等号===:<br>
　　（1）如果类型不同，就一定不相等<br>
　　（2）如果两个都是数值，并且是同一个值，那么相等；如果其中至少一个是 NaN，那么不相等。（判断一个值是否是 NaN，只能使用 isNaN( ) 来判断）<br>
　　（3）如果两个都是字符串，每个位置的字符都一样，那么相等，否则不相等。<br>
　　（4）如果两个值都是 true，或是 false，那么相等<br>
　　（5）如果两个值都引用同一个对象或是函数，那么相等，否则不相等<br>
　　（6）如果两个值都是 null，或是 undefined，那么相等</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 项目实现微信自定义分享</title>
    <url>/article/vue-wx-share.html</url>
    <content><![CDATA[<p>  最近公司项目中有在微信中自定义分享的需要，遇到的问题记录一下。</p>
<a id="more"></a>
<h3 id="一-实现效果"><a class="header-anchor" href="#一-实现效果">¶</a>一、实现效果</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-wx-share/3.png" alt></p>
<h3 id="二-遇到的问题"><a class="header-anchor" href="#二-遇到的问题">¶</a>二、遇到的问题</h3>
<p>  1、需求：项目需要带参分享，进行好友拆礼盒的类似操作，需要带个参与活动的 id，其实这种分享微信是不太赞成的，这里不论。<br>
　　2、问题 1：项目本身引入的 js-sdk 是 1.3.3 版本，与微信目前推荐的 1.4.0 版本还有版本差距。<br>
　　3、问题 2：微信认证 url 之后，设置的分享链接在 ‘#’ 及其之后会被微信去除。</p>
<h3 id="三-解决过程"><a class="header-anchor" href="#三-解决过程">¶</a>三、解决过程</h3>
<p>  其实如果早知道第二条第 3 小条的话，也许我就不需要花费很多时间在这个自定义链接上。<br>
　　1、微信分享中的配置微信 js-sdk，自行查阅 <a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115" target="_blank" rel="noopener">微信 JS-SDK 说明文档</a>。<br>
　　2、因为项目有多处需要自定义分享，所以我将请求签名和注入权限的方法写到了一个 js 文件中，同时在需要自定义分享的页面加载时调用这些方法。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-wx-share/4.png" alt><br>
<img src="https://images-hosting.liuxianyu.cn/posts/vue-wx-share/5.png" alt></p>
<p>3、像下图这种基本就是没有完成页面的签名及授权验证，按照微信文档接收后端同学返回的数据即可。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-wx-share/1.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wxRegister(link) &#123;</span><br><span class="line">  let params = &#123;</span><br><span class="line">    url: link,</span><br><span class="line">    app_from: window.location.origin.substr(8, window.location.origin.length)</span><br><span class="line">  &#125;;</span><br><span class="line">  axios.get(api.get_wxconfig, &#123; params: params &#125;).then((res) =&gt; &#123;</span><br><span class="line">    if(res.data.status == 200) &#123;</span><br><span class="line">      wx.config(&#123;</span><br><span class="line">        debug: false,</span><br><span class="line">        appId: res.data.data.appId,</span><br><span class="line">        timestamp: Number(res.data.data.timestamp),</span><br><span class="line">        nonceStr: res.data.data.noncestr,</span><br><span class="line">        signature: res.data.data.sign,</span><br><span class="line">        jsApiList: [&apos;updateAppMessageShareData&apos;, &apos;updateTimelineShareData&apos;, &apos;onMenuShareAppMessage&apos;, &apos;onMenuShareTimeline&apos;,</span><br><span class="line">          &apos;previewImage&apos;]</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).catch((error) =&gt; &#123;</span><br><span class="line">    console.log(error)</span><br><span class="line">  &#125;);</span><br><span class="line">  // 需在用户可能点击分享按钮前就先调用</span><br><span class="line">  wx.ready(function() &#123;</span><br><span class="line">    // 获取微信分享参数</span><br><span class="line">    axios.get(api.get_share_params).then(res =&gt; &#123;</span><br><span class="line">      if(res.data.status == 200) &#123;</span><br><span class="line">        let params = res.data.data;</span><br><span class="line">        // 自定义“分享给朋友”及“分享到QQ”按钮的分享内容（1.4.0）</span><br><span class="line">        if(wx.updateAppMessageShareData) &#123;</span><br><span class="line">          wx.updateAppMessageShareData(&#123;</span><br><span class="line">            title: params.title, // 分享标题</span><br><span class="line">            desc: params.content, // 分享描述</span><br><span class="line">            link: link, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span><br><span class="line">            imgUrl: params.img, // 分享图标</span><br><span class="line">            success: function () &#123;</span><br><span class="line">              // 设置成功</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        // 自定义“分享到朋友圈”及“分享到QQ空间”按钮的分享内容（1.4.0）</span><br><span class="line">        if(wx.updateTimelineShareData) &#123;</span><br><span class="line">          wx.updateTimelineShareData(&#123;</span><br><span class="line">            title: params.title, // 分享标题</span><br><span class="line">            link: link, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span><br><span class="line">            imgUrl: params.img, // 分享图标</span><br><span class="line">            success: function () &#123;</span><br><span class="line">              // 设置成功</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、像下图这种就是困扰我的问题，分享出去的内容除了最关键的自定义链接，其余都正常，这是很伤心的一件事，也是这篇随笔的来源。解决这个问题需要知道这样的信息，<br>
微信公众号中的项目在请求签名和自定义分享链接的时候对于 Vue 的 # 路由不太友好，因为分享出去的自定义链接在 # 之后会被微信去除，了解这点后，我们就可以来着手解决问题了。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-wx-share/2.png" alt><br>
<br></p>
<p>5、点击页面中的分享按钮，这个时候将需要分享出去的自定义内容准备好，按照微信文档的格式写就可以。建议在调用微信分享方法前判断是否可用，因为这几个分享接口都是即将废弃的，<br>
下图中白色字体代码是因为当前没有引入 1.4.0 版本的 js 文件。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-wx-share/6.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 点击分享</span><br><span class="line">share () &#123;</span><br><span class="line">  let options = &#123;</span><br><span class="line">    title: &apos;魔法礼盒&apos;,</span><br><span class="line">    desc: &apos;快来帮您的好友拆开魔法礼盒吧&apos;,</span><br><span class="line">    imgUrl: this.box.prpic</span><br><span class="line">  &#125;;</span><br><span class="line">  // 参与魔盒活动(获取分享所需的url参数) - 拿mbjid</span><br><span class="line">  axios.post(api.join_magicbox + &apos;?token=&apos;+ localStorage.getItem(&apos;token&apos;), &#123; mbaid: this.mbaid &#125;).then(res =&gt; &#123;</span><br><span class="line">    if(res.data.status == 200) &#123;</span><br><span class="line">      localStorage.setItem(&apos;mbjid&apos;, res.data.data.mbjid);</span><br><span class="line">      options.link = window.location.href.split(&apos;#&apos;)[0] + &apos;?mbjid=&apos; + localStorage.getItem(&apos;mbjid&apos;);</span><br><span class="line">      // options.link = window.location.origin + &apos;/#/pandora?mbjid=&apos; + localStorage.getItem(&apos;mbjid&apos;);</span><br><span class="line"></span><br><span class="line">      // 点击分享</span><br><span class="line">      this.show_invite = true;</span><br><span class="line">      // 倒计时</span><br><span class="line">      const TIME_COUNT = 3;</span><br><span class="line">      let count = TIME_COUNT;</span><br><span class="line">      let time = setInterval(() =&gt; &#123;</span><br><span class="line">        if (count &gt; 0 &amp;&amp; count &lt;= TIME_COUNT) &#123;</span><br><span class="line">          count --;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.show_invite = false;</span><br><span class="line">          clearInterval(time);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, 1000);</span><br><span class="line">      axios.get(api.secret_usid + &apos;?token=&apos; + localStorage.getItem(&apos;token&apos;)).then(res =&gt; &#123;</span><br><span class="line">        if(res.data.status == 200) &#123;</span><br><span class="line">          options.link += &apos;&amp;secret_usid=&apos; + res.data.data.secret_usid;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      // 自定义“分享给朋友”及“分享到QQ”按钮的分享内容（1.4.0）</span><br><span class="line">      if(wx.updateAppMessageShareData) &#123;</span><br><span class="line">        wx.updateAppMessageShareData(options);</span><br><span class="line">      &#125;</span><br><span class="line">      // 自定义“分享到朋友圈”及“分享到QQ空间”按钮的分享内容（1.4.0）</span><br><span class="line">      if(wx.updateTimelineShareData) &#123;</span><br><span class="line">        wx.updateTimelineShareData(options);</span><br><span class="line">      &#125;</span><br><span class="line">      // 获取“分享给朋友”按钮点击状态及自定义分享内容接口（即将废弃）</span><br><span class="line">      if(wx.onMenuShareAppMessage) &#123;</span><br><span class="line">        wx.onMenuShareAppMessage(options);</span><br><span class="line">      &#125;</span><br><span class="line">      // 获取“分享到朋友圈”按钮点击状态及自定义分享内容接口（即将废弃）</span><br><span class="line">      if(wx.onMenuShareTimeline) &#123;</span><br><span class="line">        wx.onMenuShareTimeline(options);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、看上面的代码就能看出，我的思路是微信处理 # ，我就避开 # ，将需要分享的参数直接附在 # 之前，我的后端同学在以为是签名 url 出错时，给过替换 # 的提议，都是大同小异的方法。<br>
然后在 APP.vue 文件的初始化方法中查看点击分享到底是跳到什么 url 去了，建议使用 alert，因为 vconsoel 打印过后如果页面重定向后，就看不到打印的信息了。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-wx-share/7.png" alt></p>
<p>7、同时分享出去的自定义链接还会被微信加上一些识别流量来源的参数，但是这些参数并不会影响页面的重定向。可是为防止这些参数在分享出去后，在接收处理数据时乱入，故将其直接去除，使用 split。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?from=singlemessage</span><br><span class="line">?from=timeline</span><br><span class="line">?from=groupmessage</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>微信开发</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Mint-UI Datetime picker 中的起始时间和结束时间</title>
    <url>/article/data-time-picker.html</url>
    <content><![CDATA[<p>最近公司项目中用到出生日期的功能，使用了 <a href="https://mint-ui.github.io/docs/#/zh-cn2/datetime-picker" target="_blank" rel="noopener">Mint UI 中的 Datetime picker</a>，遇到的问题记录一下。</p>
<a id="more"></a>
<h3 id="datetime-picker-效果"><a class="header-anchor" href="#datetime-picker-效果">¶</a>Datetime picker 效果</h3>
<h4 id="1-官网效果"><a class="header-anchor" href="#1-官网效果">¶</a>1、官网效果</h4>
<p><img src="https://images-hosting.liuxianyu.cn/posts/data-time-picker/1.gif" alt></p>
<p>官网上给出了一些 API 文档，但是 <a href="https://mint-ui.github.io/docs/#/zh-cn2/datetime-picker" target="_blank" rel="noopener">Mint UI 的文档</a> 写的真心不怎么样，这里分享一下 Mint UI 的源码，这里是 <a href="https://github.com/ElemeFE/mint-ui/blob/master/example/pages/datetime-picker.vue" target="_blank" rel="noopener">Datetime picker</a> 的源码。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/data-time-picker/3.png" alt></p>
<p>  既然是选择出生日期，那可选日期当然需要做一些限制，粗略地处理为 1900-01-01 ~ 当前时间。注意到文档中的 startDate 和 endDate 可以控制起止时间，但是没有说明如何使用，源码中也没有例子。如果我们直接设置时间格式的字符串，如 <code>startDate: &quot;1901-01-01&quot;</code>，这样写是会报错的。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/data-time-picker/4.png" alt></p>
<p>根据上图可以看出传入 startDate 的值必须是 Date 类型，所以按下面的写法就可以了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">startDate: new Date(&quot;1901-01-01&quot;),</span><br><span class="line">endDate: new Date()</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/data-time-picker/5.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--出生日期的picker--&gt;</span><br><span class="line">&lt;mt-datetime-picker ref=&quot;birthdayPicker&quot; type=&quot;date&quot; v-model=&quot;user.usbirthday&quot; year-format=&quot;&#123;value&#125; 年&quot; month-format=&quot;&#123;value&#125; 月&quot; date-format=&quot;&#123;value&#125; 日&quot;</span><br><span class="line">             :startDate=&quot;startDate&quot; :endDate=&quot;endDate&quot; @confirm=&quot;handleChange&quot;&gt;</span><br><span class="line">&lt;/mt-datetime-picker&gt;</span><br></pre></td></tr></table></figure>
<p>v-model=&quot;user.usbirthday&quot;中的 user.usbirthday 可以设置成 <code>this.user.usbirthday = 1995-01-01</code>。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/data-time-picker/6.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 打开date-picker</span><br><span class="line">openPicker(picker) &#123;</span><br><span class="line">    this.$refs[picker].open();</span><br><span class="line">&#125;,</span><br><span class="line">// picker选择的日期改变</span><br><span class="line">handleChange(value) &#123;</span><br><span class="line">    this.birthday = moment(value).format(&apos;YYYY-MM-DD&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-实现效果"><a class="header-anchor" href="#2-实现效果">¶</a>2、实现效果</h4>
<p><img src="https://images-hosting.liuxianyu.cn/posts/data-time-picker/2.gif" alt></p>
<h4 id="3-引入-moment-js"><a class="header-anchor" href="#3-引入-moment-js">¶</a>3、引入 Moment.js</h4>
<p>随笔中的代码涉及了 Moment.js，这是一个用来格式化时间的 js 插件，比如下图的时间不便于前端使用，则可以通过 Moment.js 将其转化为 <code>2018-11-19</code> 等格式的时间。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/data-time-picker/7.png" alt></p>
<p>安装方式： <code>npm i moment</code></p>
<p>中文官网： <a href="http://momentjs.cn/" target="_blank" rel="noopener">http://momentjs.cn/</a></p>
<p>Github： <a href="https://github.com/moment/moment/" target="_blank" rel="noopener">https://github.com/moment/moment/</a></p>
<p>然后在 main.js 中添加下面两行代码来引入 Moment.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 引入moment用来格式化时间</span><br><span class="line">import moment from &quot;moment&quot;;</span><br><span class="line">Vue.prototype.$moment = moment;</span><br></pre></td></tr></table></figure>
<p>常用格式化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let date = moment(new Date(&quot;1901-01-01&quot;)).format(&quot;YYYY-MM-DD HH:mm:ss&quot;);</span><br><span class="line">let now = moment(new Date()).format(&quot;YYYY-MM-DD HH:mm:ss&quot;);</span><br><span class="line"></span><br><span class="line">console.log(date);        // 1901-01-01 08:00:00</span><br><span class="line">console.log(now);         // 2018-11-19 19:20:06</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>在 macOS 中安装 Jekyll</title>
    <url>/article/macos-jekyll.html</url>
    <content><![CDATA[<p>最近换了 macOS，所以把博客也迁移到了 macOS 上，这里做一些环境的准备，期间遇到了一些在 Windows 上没见过的问题，记录一下。</p>
<a id="more"></a>
<p>  电脑已经安装好 Git 环境，另外 macOS 自带有 Ruby，RubyGems 也需要，这个是我之前折腾 Consolas 字体时顺带安装的。首先打开 <a href="https://www.jekyll.com.cn/" target="_blank" rel="noopener">Jekyll 中文文档</a>，按照指令进行环境准备。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gem install jekyll</span><br></pre></td></tr></table></figure>
<p>这一步可能会遇到一些问题：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/macos-jekyll/1.png" alt></p>
<p>如上图所说，我对 /Library/Ruby/Gems/2.3.0 这个文件夹没有写权限，指令未完成，那就给文件夹权限呗。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd /Library/Ruby/Gems</span><br><span class="line">$ sudo chmod -R 777 2.3.0/</span><br><span class="line">Password:</span><br><span class="line">$ gem install jekyll</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意： 是 cd 到对应文件夹的父目录，然后执行 sudo chmod -R 777 后面跟上文件夹名称，然后输入密码，再执行一次，完成。</p>
</blockquote>
<p>接下来进入到博客文件夹，启动服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd *****.github.io</span><br><span class="line">$ jekyll serve</span><br></pre></td></tr></table></figure>
<p>此时出现了新的问题：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/macos-jekyll/2.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Configuration file: /Users/czre/git/blog/_config.yml</span><br><span class="line">   Deprecation: The &apos;gems&apos; configuration option has been renamed to &apos;plugins&apos;. Please update your config file accordingly.</span><br><span class="line">Dependency Error: Yikes! It looks like you don&apos;t have jekyll-paginate or one of its dependencies installed. In order to use Jekyll as currently configured, you&apos;ll need to install this gem. The full error message from Ruby is: &apos;cannot load such file -- jekyll-paginate&apos; If you run into trouble, you can find helpful resources at https://jekyllrb.com/help/!</span><br></pre></td></tr></table></figure>
<p>这是因为没有 jekyll-paginate，使用如下指令安装一下就好了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gem install jekyll-paginate</span><br></pre></td></tr></table></figure>
<p>另外也有可能出现没有 jekyll-gist 和 jekyll-sitemap 等错误，解决方法同上，这些错误取决于模板所采用的一些服务，需要安装好这些服务。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/macos-jekyll/3.png" alt></p>
<p>经过上述步骤，输入以下指令就可以在 <a href="http://127.0.0.1:4000/" target="_blank" rel="noopener">http://127.0.0.1:4000/</a> 或者 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 见到博客了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ jekyll serve</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/macos-jekyll/4.png" alt></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Mint-UI 省市区地址三级联动</title>
    <url>/article/vue-mintui-address.html</url>
    <content><![CDATA[<p>最近公司项目中用到收货地址的功能，遂采用这种联动的方式</p>
<a id="more"></a>
<h3 id="一-实现效果"><a class="header-anchor" href="#一-实现效果">¶</a>一、实现效果</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-mintui-address/1.gif" alt></p>
<p>功能的实现参考了部分资料：</p>
<p>1、<a href="https://www.cnblogs.com/WoAiZmm/p/8413604.html" target="_blank" rel="noopener">vue mint-ui 三级地址联动</a> 这篇文章中间联动部分的代码写的不是很好，直接复制是联动不了的。</p>
<p>2、<a href="https://github.com/ElemeFE/mint-ui/blob/master/example/pages/picker.vue" target="_blank" rel="noopener">Mint UI Picker 的源码</a> Mint UI 官网 <a href="https://mint-ui.github.io/docs/#/zh-cn2/picker" target="_blank" rel="noopener">Picker</a> 二级联动的代码，有一定的参考意义。</p>
<p>3、<a href="https://github.com/artiely/Administrative-divisions-of-China" target="_blank" rel="noopener">中国行政区划数据：省份、城市、区县、乡镇，省市区镇三级四级联动</a> 有二、三、四、五级的地名联动，在 <a href="http://README.md" target="_blank" rel="noopener">README.md</a> 中下载需要的 json 文件即可（打包下载，部分文件无港澳台地区的联动）。</p>
<p>4、<a href="https://github.com/liuxy0551/liuxy0551.github.io/blob/master/assets/posts/vue-mintui-address/pca-code.json" target="_black">pca-code.json</a></p>
<p>5、这篇随笔的代码：<a href="https://github.com/liuxy0551/liuxy0551.github.io/blob/master/assets/posts/vue-mintui-address/addAddress.vue" target="_black">addAddress.vue</a></p>
<h3 id="二-具体实现"><a class="header-anchor" href="#二-具体实现">¶</a>二、具体实现</h3>
<h4 id="1-html-部分"><a class="header-anchor" href="#1-html-部分">¶</a>1、HTML 部分</h4>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-mintui-address/2.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;li class=&quot;m-default-address&quot; @click=&quot;addressPopup = true&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span class=&quot;m-border&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;m-label&quot;&gt;&lt;span class=&quot;m-must&quot;&gt;*&lt;/span&gt; 省市区&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;m-address-text&quot;&gt;&#123;&#123;addressText&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;!--&lt;span class=&quot;m-icon-more&quot;&gt;&lt;/span&gt;--&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-mintui-address/3.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--省市区地址三级联动--&gt;</span><br><span class="line">&lt;mt-popup class=&quot;m-address-popup&quot; v-model=&quot;addressPopup&quot; position=&quot;bottom&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;m-popup-btn&quot;&gt;</span><br><span class="line">    &lt;div @click=&quot;addressPopup = false&quot;&gt;取消&lt;/div&gt;</span><br><span class="line">    &lt;div @click=&quot;addressDone&quot;&gt;确认&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;m-popup-btn&quot;&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;myAddressProvince&#125;&#125;-&#123;&#123;myAddressCity&#125;&#125;-&#123;&#123;myAddressArea&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;mt-picker :slots=&quot;myAddressSlots&quot; value-key=&quot;name&quot; :visibleItemCount=&quot;7&quot; @change=&quot;onMyAddressChange&quot;&gt;&lt;/mt-picker&gt;</span><br><span class="line">&lt;/mt-popup&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2-javascript-部分"><a class="header-anchor" href="#2-javascript-部分">¶</a>2、JavaScript 部分</h4>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-mintui-address/4.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    name: &apos;&apos;,</span><br><span class="line">    user: &#123;&#125;,</span><br><span class="line">    address: &#123; uadefault: &quot;0&quot; &#125;,</span><br><span class="line">    addressText: &quot;请选择省-市-区&quot;,</span><br><span class="line">    addressPopup: false,</span><br><span class="line">    myAddressSlots: [</span><br><span class="line">      &#123;</span><br><span class="line">        flex: 1,</span><br><span class="line">        defaultIndex: 1,</span><br><span class="line">        values: myaddress, //省份数组</span><br><span class="line">        className: &apos;slot1&apos;,</span><br><span class="line">        textAlign: &apos;center&apos;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        divider: true,</span><br><span class="line">        content: &apos;-&apos;,</span><br><span class="line">        className: &apos;slot2&apos;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        flex: 1,</span><br><span class="line">        values: [],</span><br><span class="line">        className: &apos;slot3&apos;,</span><br><span class="line">        textAlign: &apos;center&apos;</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        divider: true,</span><br><span class="line">        content: &apos;-&apos;,</span><br><span class="line">        className: &apos;slot4&apos;</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        flex: 1,</span><br><span class="line">        values: [],</span><br><span class="line">        className: &apos;slot5&apos;,</span><br><span class="line">        textAlign: &apos;center&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    myAddressProvince: &apos;&apos;,</span><br><span class="line">    myAddressCity: &apos;&apos;,</span><br><span class="line">    myAddressArea: &apos;&apos;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-mintui-address/5.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 地址三级联动</span><br><span class="line">onMyAddressChange(picker, values) &#123;</span><br><span class="line">  if(values[0]) &#123;      // 判断values[0]是否有值</span><br><span class="line">    picker.setSlotValues(1, values[0].children);    // 将所点击省份拿到的城市list赋值</span><br><span class="line">    this.myAddressProvince = values[0].name;</span><br><span class="line">    if(values[1]) &#123;      // 判断values[1]是否有值</span><br><span class="line">      picker.setSlotValues(2, values[1].children);  // 将所点击城市拿到的区县list赋值</span><br><span class="line">      this.myAddressCity = values[1].name;</span><br><span class="line">      if(values[2]) &#123;      // 判断values[2]是否有值</span><br><span class="line">        this.myAddressArea = values[2].name;</span><br><span class="line">        this.address.aaid = values[2].code;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">// 省市区三级联动选择后</span><br><span class="line">addressDone() &#123;</span><br><span class="line">  this.addressText = this.myAddressProvince + &quot;-&quot; + this.myAddressCity + &quot;-&quot; + this.myAddressArea;</span><br><span class="line">  this.addressPopup = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-mintui-address/6.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  common.changeTitle(&apos;添加地址&apos;);</span><br><span class="line">  this.getUser();         // 获取用户信息</span><br><span class="line"></span><br><span class="line">  this.$nextTick(() =&gt; &#123; //vue里面全部加载好了再执行的函数 （类似于setTimeout）</span><br><span class="line">    this.myAddressSlots[0].defaultIndex = 0;</span><br><span class="line">    // 这里的值需要和 data里面 defaultIndex 的值不一样才能够初始化</span><br><span class="line">    //因为我没有看过源码（我猜测是因为数据没有改变，不会触发更新）</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>图片大小不固定时在 div 中居中显示</title>
    <url>/article/image-center-css.html</url>
    <content><![CDATA[<p>  公司的一个商城项目中，需要实现商品详情页顶部图片非正方形时补白且居中，尝试了很多方法，实现后发现其实很简单，记录一下。</p>
<a id="more"></a>
<h3 id="一-实现效果"><a class="header-anchor" href="#一-实现效果">¶</a>一、实现效果</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/image-center-css/1.gif" alt></p>
<p>  项目是移动端的项目，基于 Vue + Mint UI 实现。效果区域使用的是 Mint UI 自带的 swipe 组件，取消了自动播放。</p>
<h3 id="二-具体实现"><a class="header-anchor" href="#二-具体实现">¶</a>二、具体实现</h3>
<h4 id="1-html-部分"><a class="header-anchor" href="#1-html-部分">¶</a>1、HTML 部分</h4>
<p><img src="https://images-hosting.liuxianyu.cn/posts/image-center-css/2.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mt-swipe :auto=&quot;0&quot;&gt;</span><br><span class="line">  &lt;mt-swipe-item class=&quot;product-swipe&quot; v-for=&quot;item in product_info.images&quot; :key=&quot;item.piid&quot;&gt;</span><br><span class="line">    &lt;img :src=&quot;item.piurl&quot; class=&quot;product-img&quot;&gt;</span><br><span class="line">  &lt;/mt-swipe-item&gt;</span><br><span class="line">&lt;/mt-swipe&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2-css-部分"><a class="header-anchor" href="#2-css-部分">¶</a>2、CSS 部分</h4>
<p><img src="https://images-hosting.liuxianyu.cn/posts/image-center-css/3.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.product-swipe &#123;</span><br><span class="line">  width: 750px;</span><br><span class="line">  height: 750px;</span><br><span class="line">  .product-img &#123;</span><br><span class="line">    max-width: 750px;</span><br><span class="line">    max-height: 750px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    margin: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.mint-swipe &#123;</span><br><span class="line">  width: 750px;</span><br><span class="line">  height: 750px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>在 VMware 中安装 MacOS High Sierra 10.13</title>
    <url>/article/vmware-macos.html</url>
    <content><![CDATA[<p>  最近抽空把以前在 VMware 中安装 MacOS 的过程回忆了一下，同时在自己电脑上再次安装了一遍，记录一下，随笔图片较多。</p>
<a id="more"></a>
<h2 id="工具-原料"><a class="header-anchor" href="#工具-原料">¶</a>工具 / 原料</h2>
<p>Windows 系统、VMware、unlocker（使得 VMware 可以识别到 MacOS）、MacOS High Sierra 10.13 镜像</p>
<h2 id="方法-步骤"><a class="header-anchor" href="#方法-步骤">¶</a>方法 / 步骤</h2>
<h3 id="1-准备工作"><a class="header-anchor" href="#1-准备工作">¶</a>1、准备工作</h3>
<p>(1) 这篇随笔记录的过程是在 Windows 系统上完成，准备工作需要在 Windows 上安装好 VMware，并下载好所需文件，<code>文件链接已失效</code>。其中文件夹是第二个压缩包解压后的文件，第一个压缩包备用，第三个压缩包就是 MacOS High Sierra 10.13 镜像。<br>
　　<br>
　　<img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/36.png" alt></p>
<p>(2) 保证 VMware 运行需要的几个服务已经启动，没设置过这些服务手动启动的可忽略。VMware 在关闭状态时，解压 unlocker-master.zip 文件，进入解压的文件夹，右击 win-install.cmd 文件，以管理员运行，等待运行完成即可。VMware 软件运行时以管理员运行该文件可能会报错，如果没有运行完成的话，可能会在新建虚拟机的时候发现没有 Apple Mac OS X(M) 操作系统选项。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/1.png" alt></p>
<h3 id="2-新建虚拟机-载入-macos"><a class="header-anchor" href="#2-新建虚拟机-载入-macos">¶</a>2、新建虚拟机，载入 MacOS</h3>
<p>在完成以上准备工作后，就可以开始新建虚拟机载入 MacOS 了，后续步骤以图片为主。</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/2.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/3.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/4.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/5.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/6.png" alt></div></div><div class="group-picture-row"></div></div></div>
<p>下图中的内存和处理器的分配数量可依主机性能而定，多多益善。</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/7.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/8.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/9.png" alt></div></div><div class="group-picture-row"></div><div class="group-picture-row"></div></div></div>
<p>正常情况下，初次开启此虚拟机后会出现如下图的错误，unlocker 的开发者给出了解决方法：找到并打开安装目录下的 XXXX.vmx 文件，使用记事本打开后，在 smc.present = “TRUE” 后添加以下代码后保存，问题即可解决。<br>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">smc.version = &quot;0&quot;</span><br></pre></td></tr></table></figure></p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/10.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/11.png" alt></div></div></div></div>
<p>按上图修改安装文件后，再次点击开启此虚拟机，即可开始初次开机时系统的安装过程。</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/12.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/13.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/14.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/15.png" alt></div></div><div class="group-picture-row"></div><div class="group-picture-row"></div></div></div>
<p>安装时会出现上图中的情况，只有一个磁盘。为了文件管理方便，我将磁盘抹掉并改名，然后将系统安装在新出现的磁盘上。点击继续后就是系统的安装过程，静候佳音。</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/16.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/17.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/18.png" alt></div></div><div class="group-picture-row"></div><div class="group-picture-row"></div></div></div>
<p>接下来就是系统的一些基本设置。</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/19.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/20.png" alt></div></div></div></div>
<h3 id="3-安装-vmware-tools"><a class="header-anchor" href="#3-安装-vmware-tools">¶</a>3、安装 VMware Tools</h3>
<p>  VMware 中安装 VMware Tools 后，可支持自由拖拽的功能，鼠标也可以在虚拟机与主机之前自由移动（不用再按 Ctrl + Alt），且虚拟机屏幕也可以全屏了，好处多多。</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/21.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/22.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/23.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/24.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/25.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/26.png" alt></div></div><div class="group-picture-row"></div></div></div>
<p>安装完成后重启，会报错 - 系统扩展已被阻止，按照图片顺序设置，允许载入该系统软件。</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/27.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/28.png" alt></div></div></div></div>
<br>
　　允许载入后按上述步骤重新安装 VMware Tools。
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/29.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/30.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/31.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/32.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/33.png" alt></div></div><div class="group-picture-row"></div></div></div>
<br>
　　安装完成后重启，按下图推出“ VMware Tools ”，这样桌面就很干净了。
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/34.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/vmware-macos/35.png" alt></div></div></div></div>
<br>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li>unlocker 的储存路径不要有中文字符，否则会安装失败，而且没有失败的提示；</li>
<li>有什么问题可以多重启，多百度。</li>
<li>如果系统可以使用，尽量不更新；</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>VMware</category>
      </categories>
      <tags>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令（九）—— git revert 反做 commit</title>
    <url>/article/git-order-i.html</url>
    <content><![CDATA[<p>  git 常用命令系列随笔会记录一些用到的常见命令，这里记录一下<code>git revert 反做某个版本</code>：</p>
<a id="more"></a>
<h3 id="一-适用场景："><a class="header-anchor" href="#一-适用场景：">¶</a>一、适用场景：</h3>
<p>  如果我们想改动之前某个 commit 的提交内容，但是又想保留此 commit 之后的 commit。</p>
<h3 id="二-具体操作："><a class="header-anchor" href="#二-具体操作：">¶</a>二、具体操作：</h3>
<p>  1、反做</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git revert -n 版本号(..版本号)</span><br></pre></td></tr></table></figure>
<p>  2、提交</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m 'commit message'</span><br><span class="line">git push origin develop</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令（八）—— 几种撤销操作和覆盖仓库</title>
    <url>/article/git-order-h.html</url>
    <content><![CDATA[<p>  git 常用命令系列随笔会记录一些用到的常见命令，这里记录一下<code>几种撤销操作和覆盖仓库</code>：</p>
<a id="more"></a>
<h3 id="一-git-add-之前撤销文件更改"><a class="header-anchor" href="#一-git-add-之前撤销文件更改">¶</a>一、git add 之前撤销文件更改</h3>
<p>  <code>git checkout --&lt;file&gt;...</code>修改 bug 时，发现尝试的方法不合适，当前所有改动的代码不想要了，可以执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure>
<h3 id="二-git-add-之后取消暂存文件"><a class="header-anchor" href="#二-git-add-之后取消暂存文件">¶</a>二、git add 之后取消暂存文件</h3>
<p>  <code>git reset HEAD &lt;file&gt;...</code>修改 bug 时，发现改好了，准备提交时发现有个非公共文件不需要提交，但是这个时候已经 git add 暂存文件了，可以执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure>
<h3 id="三-git-commit-之后撤回提交"><a class="header-anchor" href="#三-git-commit-之后撤回提交">¶</a>三、git commit 之后撤回提交</h3>
<p>  <code>git reset HEAD~&lt;number&gt;</code>修改 bug，提交后发现这次提交的内容是错误的，则应该撤回这次提交，意思就是让 HEAD 这个指针指向其他地方，可以执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset HEAD~</span><br></pre></td></tr></table></figure>
<p>  <code>~</code>之后不填则默认为 1，数字代表撤销几次提交。</p>
<h3 id="四-覆盖已经-push-到线上仓库的内容谨慎"><a class="header-anchor" href="#四-覆盖已经-push-到线上仓库的内容谨慎">¶</a>四、覆盖已经 push 到线上仓库的内容<code>谨慎</code></h3>
<p>  偶尔需要在测试服务器多次测试效果，将代码提交到 develop 分支然后通过 Jenkins 打包发布到测试环境，但是这些进行测试的 commit 不太好看，记录一下覆盖的操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset HEAD~</span><br><span class="line">git add .</span><br><span class="line">git commit -m 'commit message'</span><br><span class="line">git push -f origin develop</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong><code>-f</code>在多人协作时出现是可能会被其他人砍死的</strong></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令（七）—— Bug 分支</title>
    <url>/article/git-order-g.html</url>
    <content><![CDATA[<p>  git 常用命令系列随笔会记录一些用到的常见命令，这里记录一下<code>Bug 分支</code>：</p>
<a id="more"></a>
<h3 id="一-git-stash"><a class="header-anchor" href="#一-git-stash">¶</a>一、git stash</h3>
<p>  出现 bug 时可以通过一个新的临时分支来修复，修复后合并分支，然后将这个临时分支删除。在 develop 分支上开发的正嗨的时候，突然发现 master 分支上出现了一个 bug，这个时候很自然地想创建一个临时分支 issue01 来修复 bug，但是 develop 分支上的代码还没有提交。并不是不想提交，而是没开发完成，还没法提交。但是线上 bug 刻不容缓。这个时候<code>git stash</code>就可以登场了：</p>
<p>  1、暂存代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure>
<p>  2、切到 master 分支、创建临时分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git checkout -b issue01</span><br></pre></td></tr></table></figure>
<p>  3、修复后提交，切回 master 分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m 'fix: bug issue01'</span><br><span class="line">git checkout master</span><br></pre></td></tr></table></figure>
<p>  4、合并并删除临时分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge --no-ff -m 'merge issue01 fix bug' issue01</span><br><span class="line">git branch -d issue01</span><br></pre></td></tr></table></figure>
<p>  两分钟搞定，bug 修复完成了，可以去 develop 分支干活了。</p>
<p>  5、恢复暂存的代码，<code>git stash pop</code>恢复代码的同时也会把暂存的内容也删了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git stash list</span><br><span class="line">git stash pop stash@&#123;0&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二-git-cherry-pick"><a class="header-anchor" href="#二-git-cherry-pick">¶</a>二、git cherry-pick</h3>
<p>  在 master 分支上修复了 bug 后，仔细回忆一下，master 的代码是之前从 develop 分支上合并过去的，所以这个 bug 在 develop 分支上也存在。那在 develop 分支上怎么修复这个 bug 呢？Ctrl C、Ctrl V 再操作一次，提交就可以了？实际上这样操作也可以，但是如果 bug 修复涉及到的文件很多时，这样就有点不优雅了，<code>cherry-pick</code>命令可以很优雅地解决这个问题。</p>
<p>  同样的 bug，要在 develop 上修复，只需要把<code>ad52dcf fix: bug issue01</code>这个提交所做的修改<code>复制</code>到 develop 分支。注意：这里只想复制<code>ad52dcf fix: bug issue01</code>这个提交的内容到 develop 分支，而不是要把 master 分支整个 merge 过来。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git cherry-pick ad52dcf</span><br><span class="line">git push origin develop</span><br></pre></td></tr></table></figure>
<p>  不包含 A：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git cherry-pick A..B</span><br></pre></td></tr></table></figure>
<p>  包含 A：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git cherry-pick A^..B</span><br></pre></td></tr></table></figure>
<p>  git 自动给 develop 分支做了一次提交，这次提交不同于 master 分支的<code>ad52dcf</code>，因为这两个 commit 只是改动相同，但属于两个不同的 commit。用<code>git cherry-pick</code>，我们就不需要在 develop 分支上手动再把修复 bug 的过程重复一遍。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令（六）—— 从远程仓库中删除文件夹或文件</title>
    <url>/article/git-order-f.html</url>
    <content><![CDATA[<p>  git 常用命令系列随笔会记录一些用到的常见命令，这里记录一下<code>从远程仓库中删除文件夹或文件</code>：</p>
<a id="more"></a>
<p>  项目上传到远程仓库时，忘记忽略某个文件夹就 push 了，如：<code>.idea</code>，记录一下删除掉<code>.idea</code>的操作。</p>
<p>  1、git 记录中删除<code>.idea</code>文件夹：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rm -r --cached .idea</span><br></pre></td></tr></table></figure>
<p>  2、将更改记录提交到本地仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m 'delete: git .idea'</span><br></pre></td></tr></table></figure>
<p>  3、提交到远程仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<p>  本地项目中的<code>.idea</code>文件夹不收操作影响，删除的只是远程仓库中的<code>.idea</code>文件夹，可放心删除，其他文件或文件夹同理。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令（五）—— 删除本地、远程分支</title>
    <url>/article/git-order-e.html</url>
    <content><![CDATA[<p>  git 常用命令系列随笔会记录一些用到的常见命令，这里记录一下<code>删除本地、远程分支</code>：</p>
<a id="more"></a>
<p>  每次操作后可执行<code>git branch -a</code>查看分支情况：</p>
<h3 id="一-删除本地分支-dev："><a class="header-anchor" href="#一-删除本地分支-dev：">¶</a>一、删除本地分支 dev：</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure>
<p>  如果报错：error: The branch ‘dev01’ is not fully merged，可使用<code>git branch -D dev</code></p>
<h3 id="二-删除远程分支-dev"><a class="header-anchor" href="#二-删除远程分支-dev">¶</a>二、删除远程分支 dev</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin --delete dev</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令（四）—— 合并分支且保留合并记录</title>
    <url>/article/git-order-d.html</url>
    <content><![CDATA[<p>git 常用命令系列随笔会记录一些用到的常见命令，这里记录一下<code>合并分支</code>：</p>
<a id="more"></a>
<h3 id="一-合并-develop-到-master"><a class="header-anchor" href="#一-合并-develop-到-master">¶</a>一、合并 develop 到 master</h3>
<p>项目开发中将自己的代码提交到 develop，发布前将 develop 合并到 master：</p>
<p>1、在 develop 提交代码后，切换到 master 更新代码：<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></p>
<p>2、合并分支：<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge develop</span><br></pre></td></tr></table></figure></p>
<p>3、提交远程仓库：<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p>
<h3 id="二-合并分支且保留合并记录"><a class="header-anchor" href="#二-合并分支且保留合并记录">¶</a>二、合并分支且保留合并记录</h3>
<p>因为 git 创建、合并、删除分支都非常快，所以 git 鼓励使用分支完成任务，合并后再删除分支，这和直接在 master 分支上工作效果是一样的，但是过程更加安全。<br>
通常合并分支时，如果可以的话，git 会用<code>Fast forward</code>模式，但这种模式下，删除分支后会丢失分支信息。如果想要看出分支信息，可以强制禁用<code>Fast forward</code>模式，git 就会在 merge 时生成一个新的 commit。</p>
<p>1、切换到 master 拉取代码：<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></p>
<p>2、合并 develop 分支，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>模式：<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge --no-ff -m 'merge develop with no-ff' develop</span><br></pre></td></tr></table></figure></p>
<p>因为本次合并要创建一个新的 commit，所以加上 -m 参数，把 commit 描述写进去。合并后，可以使用<code>git log</code>查看分支历史。<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log</span><br><span class="line"></span><br><span class="line">*   e1e9c68 (HEAD -&gt; master) merge with no-ff</span><br><span class="line">|\  </span><br><span class="line">| * f52c633 (dev) add merge</span><br><span class="line">|/  </span><br><span class="line">*   cf810e4 conflict fixed</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令（三）—— 修改上次的 commit</title>
    <url>/article/git-order-c.html</url>
    <content><![CDATA[<p>git 常用命令系列随笔会记录一些用到的常见命令，这里记录一下<code>修改上次的 commit</code>：</p>
<a id="more"></a>
<h3 id="1-修改内容和上次的-commit-合并"><a class="header-anchor" href="#1-修改内容和上次的-commit-合并">¶</a>1、修改内容和上次的 commit 合并</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>
<h3 id="2-只修改上次的-commit-message"><a class="header-anchor" href="#2-只修改上次的-commit-message">¶</a>2、只修改上次的 commit message</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令（二）—— clone 远程仓库到本地</title>
    <url>/article/git-order-b.html</url>
    <content><![CDATA[<p>git 常用命令系列随笔会记录一些用到的常见命令，这里记录一下<code>clone 远程仓库到本地</code>：</p>
<a id="more"></a>
<h3 id="一-clone-项目到本地"><a class="header-anchor" href="#一-clone-项目到本地">¶</a>一、clone 项目到本地</h3>
<p>1、两种 clone 操作</p>
<p>（1）输入以下命令，就会进入主分支。其中 git clone 后的内容为你要下载的项目地址，newLearnGit 是本地目录：<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/liuxy0551/learnGit.git</span><br><span class="line">git clone https://github.com/liuxy0551/learnGit.git newLearnGit</span><br></pre></td></tr></table></figure></p>
<p>（2）clone 指定分支，就会进入指定分支。输入以下命令：<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone -b develop https://github.com/liuxy0551/learnGit.git</span><br></pre></td></tr></table></figure></p>
<p>格式为：git clone -b + 分支名 + 远程仓库地址</p>
<p>2、本地分支和远程分支</p>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git branch -a</td>
<td style="text-align:left">查看所有分支列表，包括本地仓库和远程仓库</td>
</tr>
<tr>
<td style="text-align:left">git checkout dev</td>
<td style="text-align:left">切换分支 dev</td>
</tr>
<tr>
<td style="text-align:left">git checkout -b dev</td>
<td style="text-align:left">本地仓库创建 dev 分支，同时切换到 dev 分支。只有提交的时候才会在远程仓库创建一个分支</td>
</tr>
</tbody>
</table>
<h3 id="二-切换到指定远程分支"><a class="header-anchor" href="#二-切换到指定远程分支">¶</a>二、切换到指定远程分支</h3>
<p><code>git checkout --track origin/develop</code> 可以缩写为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -t origin/develop</span><br></pre></td></tr></table></figure>
<p>等同于</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b develop origin/develop</span><br></pre></td></tr></table></figure>
<h3 id="三-创建并跟踪远程分支"><a class="header-anchor" href="#三-创建并跟踪远程分支">¶</a>三、创建并跟踪远程分支</h3>
<p><code>git push origin develop --set-upstream</code> 可以缩写为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin develop -u</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令（一）—— 将本地仓库与多个远程仓库关联</title>
    <url>/article/git-order-a.html</url>
    <content><![CDATA[<p>git 常用命令系列随笔会记录一些用到的常见命令，这里记录一下<code>将本地仓库与多个远程仓库关联</code>：</p>
<a id="more"></a>
<h3 id="将本地的项目与线上项目关联"><a class="header-anchor" href="#将本地的项目与线上项目关联">¶</a>将本地的项目与线上项目关联</h3>
<p>这一部分主要作用是将本地项目备份到线上，达到多端操作的目的。以 Github 举例：</p>
<p>1、新建 repository<br>
　　在 Github 下创建一个新的 repository，取名为 learnGit。</p>
<p>2、创建本地仓库<br>
　　进入本地文件夹路径，执行以下命令创建本地仓库：<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></p>
<p>3、修改 .gitignore 文件<br>
　　如果没有请手动创建一个，在里面加入忽略更新的内容，如<code>.idea</code>、<code>node_modules</code>等。</p>
<p>4、提交代码/文件<br>
　　执行以下命令，完成代码/文件在本地的提交：<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m 'commit message'</span><br></pre></td></tr></table></figure></p>
<p>5、设置远程仓库<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/liuxy0551/learnGit.git</span><br></pre></td></tr></table></figure></p>
<p>如果出现问题：<code>fatal: remote origin already exists</code>，提示 origin 已存在，执行<code>git remote rm origin</code>删除别名再重复第 5 步即可<br>
　　<img src="https://images-hosting.liuxianyu.cn/posts/git-order/1.png" alt></p>
<p><code>一个本地仓库可以同时关联多个远程仓库</code>，依次关联即可：<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add github https://github.com/liuxy0551/learnGit.git</span><br><span class="line">git remote add gitee https://gitee.com/liuxy0551/learnGit.git</span><br></pre></td></tr></table></figure></p>
<p>origin、github、gitee 均为别名，为了区分远程仓库。关联多个远程仓库的时候依次 push 即可：<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push github master</span><br><span class="line">git push gitee master</span><br></pre></td></tr></table></figure></p>
<p>6、更新远程仓库<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p>
<p>7、将本地新建的分支推到远程并和远程分支绑定<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin develop -u</span><br></pre></td></tr></table></figure></p>
<p>8、将本地的 tag 全部推到远程仓库<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure></p>
<p>9、将本地的某个 tag 推到远程仓库<br>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin v0.0.1-beta.0</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 生命周期的理解</title>
    <url>/article/vue-life-cycle.html</url>
    <content><![CDATA[<p>  我在学习 Vue 的时候，经常会接触到 Vue 的生命周期函数，常见的为 created 和 mounted，所以记录一下每个 Vue 实例在被创建之前都要经过的一系列初始化过程，例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这个过程便是 Vue 的生命周期。</p>
<a id="more"></a>
<h3 id="一-生命周期图示"><a class="header-anchor" href="#一-生命周期图示">¶</a>一、生命周期图示</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-life-cycle/1.png" alt></p>
<p>  上图展示了 Vue 实例的生命周期，<a href="https://cn.vuejs.org/images/lifecycle.png" target="_blank" rel="noopener">官网上的原图</a>，我在学习的时候也没有一下就弄懂这张图说的所有东西，但是随着 Vue 学习的深入，对这张图的兴趣越来越浓。可以看出，在 Vue 生命周期中有很多钩子函数提供给我们在 Vue 生命周期不同时刻进行操作。我们先在图上确认所有的生命周期函数，然后再依次理解。</p>
<blockquote>
<ul>
<li>beforeCreate、created　　　　　　　　　   创建前后</li>
<li>beforeMount、mounted　　　　　　　　　  挂载前后</li>
<li>beforeUpdate、updated　　　　　　　　　 数据更新前后</li>
<li>beforeDestroy、destroyed　　　　　　　　 页面销毁前后</li>
</ul>
</blockquote>
<h3 id="二-实际运行"><a class="header-anchor" href="#二-实际运行">¶</a>二、实际运行</h3>
<p>  复制下面的代码，找一个可以在线运行 js 代码的网站粘贴运行，看看 console 打印的内容，便于理解生命周期的实际流程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;vue生命周期学习&lt;/title&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.4.2/dist/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var vm = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: &apos;Vue的生命周期&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeCreate: function() &#123;</span><br><span class="line">      console.group(&apos;------beforeCreate创建前状态------&apos;);</span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot; , &quot;el     : &quot; + this.$el); //undefined</span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); //undefined </span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message) </span><br><span class="line">    &#125;,</span><br><span class="line">    created: function() &#123;</span><br><span class="line">      console.group(&apos;------created创建完毕状态------&apos;);</span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el); //undefined</span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); //已被初始化 </span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); //已被初始化</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeMount: function() &#123;</span><br><span class="line">      console.group(&apos;------beforeMount挂载前状态------&apos;);</span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + (this.$el)); //已被初始化</span><br><span class="line">      console.log(this.$el);</span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); //已被初始化  </span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); //已被初始化  </span><br><span class="line">    &#125;,</span><br><span class="line">    mounted: function() &#123;</span><br><span class="line">      console.group(&apos;------mounted 挂载结束状态------&apos;);</span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el); //已被初始化</span><br><span class="line">      console.log(this.$el);    </span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); //已被初始化</span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); //已被初始化 </span><br><span class="line">    &#125;,</span><br><span class="line">    beforeUpdate: function () &#123;</span><br><span class="line">      console.group(&apos;beforeUpdate 更新前状态===============》&apos;);</span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class="line">      console.log(this.$el);   </span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); </span><br><span class="line">    &#125;,</span><br><span class="line">    updated: function () &#123;</span><br><span class="line">      console.group(&apos;updated 更新完成状态===============》&apos;);</span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class="line">      console.log(this.$el); </span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); </span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy: function () &#123;</span><br><span class="line">      console.group(&apos;beforeDestroy 销毁前状态===============》&apos;);</span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class="line">      console.log(this.$el);    </span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); </span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed: function () &#123;</span><br><span class="line">      console.group(&apos;destroyed 销毁完成状态===============》&apos;);</span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class="line">      console.log(this.$el);  </span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class="line">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>运行后打开调试查看 console 打印的内容，可以看到：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/vue-life-cycle/2.png" alt></p>
<p>这样可以较为清晰地看到一个 Vue 示例在创建过程中调用的几个生命周期钩子函数。</p>
<h3 id="三-钩子函数解析"><a class="header-anchor" href="#三-钩子函数解析">¶</a>三、钩子函数解析</h3>
<p>  Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载 Dom、渲染 → 更新 → 渲染、销毁等一系列过程，我们称这是 Vue 的生命周期，通俗说就是 Vue 实例从创建到销毁的过程。每一个组件或者实例都会经历一个完整的生命周期，总共分为三个阶段：初始化、运行中、销毁。</p>
<p>1、<strong>beforeCreate 和 created：</strong> 在这两个生命周期之间，进行初始化事件，进行数据的观测，可以看到在 created 的时候数据已经和 data 属性进行绑定（放在 data 中的属性当值发生改变的同时，视图也会改变）；</p>
<p>2、<strong>beforeMount：</strong> 接下来开始找实例或者组件对应的模板，编译模板为虚拟 Dom 放入到渲染函数中准备渲染，然后执行 beforeMount 钩子函数，在这个函数中虚拟 Dom 已经创建完成，马上就要渲染，在这里也可以更改数据，不会触发 updated，在这里可以在渲染前最后一次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取；</p>
<p>3、<strong>mounted：</strong> 接下来开始渲染，渲染出真实 Dom，然后执行 mounted 钩子函数，此时组件已经出现在页面中，数据、真实 Dom 都已经处理好了,事件都已经挂载好了，可以在这里操作真实 Dom 等事情；</p>
<p>4、<strong>beforeUpdate 和 updated：</strong> 当 Vue 发现 data 中的数据发生了改变，会触发对应组件的重新渲染，先后调用 beforeUpdate 和 updated 钩子函数；</p>
<p>5、<strong>beforeDestroy：</strong> 在实例销毁之前使用，在这一步，实例仍然完全可用；</p>
<p>6、<strong>destroyed：</strong> 在 Vue 实例销毁后调用，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p>
<p>只需要记住在 Vue 的生命周期里有哪些钩子函数，它们分别是在什么情况下会被调用，以及其中的一些原理即可。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端调试神器 - vConsole</title>
    <url>/article/mobile-vConsole.html</url>
    <content><![CDATA[<p>  移动端进行真机调试时，可以使用<code>vConsole</code>查看部分调试信息，功能基本够用。记录一下使用方法。</p>
<a id="more"></a>
<h3 id="一-vconsole-js-控制"><a class="header-anchor" href="#一-vconsole-js-控制">¶</a>一、vConsole - js 控制</h3>
<h4 id="1-文档"><a class="header-anchor" href="#1-文档">¶</a>1、文档</h4>
<p><a href="https://github.com/Tencent/vConsole" target="_blank" rel="noopener">github</a>、<a href="https://github.com/Tencent/vConsole/blob/dev/README_CN.md" target="_blank" rel="noopener">中文文档</a>、<a href="https://github.com/Tencent/vConsole/blob/dev/doc/tutorial_CN.md" target="_blank" rel="noopener">使用教程</a></p>
<h4 id="2-安装"><a class="header-anchor" href="#2-安装">¶</a>2、安装</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i vconsole -D</span><br></pre></td></tr></table></figure>
<h4 id="3-简单使用"><a class="header-anchor" href="#3-简单使用">¶</a>3、简单使用</h4>
<p>在<code>main.js</code>中写道：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VConsole <span class="keyword">from</span> <span class="string">'vconsole'</span></span><br><span class="line"><span class="keyword">const</span> vConsole = <span class="keyword">new</span> VConsole()</span><br><span class="line">Vue.use(vConsole)</span><br></pre></td></tr></table></figure>
<h4 id="4-灵活使用-推荐"><a class="header-anchor" href="#4-灵活使用-推荐">¶</a>4、灵活使用 <code>推荐</code></h4>
<p>生产环境可能出现一些调试问题，除去抓包的方法外，可以使用 vConsole：写一个<code>vConsole.js</code>文件，在<code>App.vue</code>中使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vConsole.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  vConsole: <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// 打开 vConsole</span></span><br><span class="line">  open () &#123;</span><br><span class="line">    <span class="keyword">let</span> ids = [<span class="number">148</span>, <span class="number">488</span>] <span class="comment">// 书明，刘易</span></span><br><span class="line">    <span class="keyword">let</span> userInfo = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'userInfo'</span>))</span><br><span class="line">    <span class="keyword">let</span> isPC = localStorage.getItem(<span class="string">'isPC'</span>) === <span class="string">'true'</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// PC 端打开页面时不需要打开 vConsole</span></span><br><span class="line">    <span class="keyword">if</span> (isPC) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="regexp">/test/</span>.test(process.env.VUE_APP_BASE_URL)) &#123; <span class="comment">// 正式服</span></span><br><span class="line">        <span class="keyword">if</span> (!ids.includes(userInfo &amp;&amp; userInfo.id)) &#123; <span class="comment">// 正式服不包含测试和开发则不打开</span></span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">let</span> VConsole = <span class="built_in">require</span>(<span class="string">'vconsole/dist/vconsole.min.js'</span>)</span><br><span class="line">    <span class="keyword">this</span>.vConsole = <span class="keyword">new</span> VConsole()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line"><span class="keyword">import</span> vConsole <span class="keyword">from</span> <span class="string">"@/utils/vConsole"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    vConsole.open()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二-webpack-版插件"><a class="header-anchor" href="#二-webpack-版插件">¶</a>二、webpack 版插件</h3>
<h4 id="1-安装"><a class="header-anchor" href="#1-安装">¶</a>1、安装</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i vconsole-webpack-plugin -D</span><br></pre></td></tr></table></figure>
<h4 id="2-使用"><a class="header-anchor" href="#2-使用">¶</a>2、使用</h4>
<p>Vue CLI 3 中可以在<code>vue.config.js</code>中设置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 vConsole 插件</span></span><br><span class="line"><span class="keyword">const</span> vConsole = <span class="built_in">require</span>(<span class="string">'vconsole-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> vConsole(&#123;</span><br><span class="line">        filter: [],     <span class="comment">// 需要过滤的入口文件</span></span><br><span class="line">        enable: process.env.NODE_ENV === <span class="string">'development'</span>      <span class="comment">// 生产环境不打开</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li><strong>修改<code>vue.config.js</code>文件需要重启项目</strong></li>
</ul>
</blockquote>
<h3 id="三-通过-cdn-引入"><a class="header-anchor" href="#三-通过-cdn-引入">¶</a>三、通过 CDN 引入</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://wise-job.oss-cn-zhangjiakou.aliyuncs.com/webjs/libs/vConsole/vconsole.3.3.4.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vConsole</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小游戏跳坑之旅 —— 使用白鹭引擎开发之创建项目</title>
    <url>/article/egret-red-hat.html</url>
    <content><![CDATA[<p>  最近花了两周时间在微信小游戏里踩坑，觉得挺有意思的，在这里分享一下开发的过程，点此可查看项目 <a href="https://github.com/liuxy0551/RedHat/tree/master/gameDemo" target="_blank" rel="noopener">RedHat</a>。首先介绍一下基础：小游戏 <a href="https://developers.weixin.qq.com/minigame/dev/" target="_blank" rel="noopener">官网教程</a> 、腾讯课堂的课程： <a href="https://ke.qq.com/course/287266" target="_blank" rel="noopener">白鹭教育 - 成语大挑战小游戏开发</a>（视频中的资料链接：<a href="https://pan.baidu.com/s/1kkrCUwn0hikPLVg11PPFAA" target="_blank" rel="noopener">https://pan.baidu.com/s/1kkrCUwn0hikPLVg11PPFAA</a> 密码：<code>3gtt</code>）、B站的教程：<a href="https://www.bilibili.com/video/av18131669?from=search&amp;seid=12272566927635524397" target="_blank" rel="noopener">使用白鹭引擎快速开发微信小游戏最全指南</a>。这个小游戏是一个跳跃类游戏，基于白鹭（Egret）引擎开发，选用该引擎的原因是目前其对小游戏的开发支持较好，可以少踩些坑。上张图展示一下，下图为首页：<br>
<img src="https://images-hosting.liuxianyu.cn/posts/egret-red-hat/1.png" alt></p>
<a id="more"></a>
<h3 id="一-安装-egret-launcher"><a class="header-anchor" href="#一-安装-egret-launcher">¶</a>一、安装 Egret launcher</h3>
<p>下载 <a href="https://www.egret.com/downloads/wing.html" target="_blank" rel="noopener">Egret launcher</a> 后安装，然后在引擎页选择安装 5.1.2 以上版本，推荐最新版本；在工具页下载 Egret Wing 3 ，这是一个编辑器，可以很方便地编辑 exml 格式的文件，更方便地布局页面。<br>
等待引擎及 Egret Wing 3 安装好后即可进入项目页创建新的项目了。</p>
<h3 id="二-创建新项目-熟悉-egret-wing-3"><a class="header-anchor" href="#二-创建新项目-熟悉-egret-wing-3">¶</a>二、创建新项目，熟悉 Egret Wing 3</h3>
<h4 id="1-创建项目"><a class="header-anchor" href="#1-创建项目">¶</a>1、创建项目</h4>
<p>在项目页点击 创建项目 ，然后输入项目名称和项目存放的路径，因为这个项目用到的是 EUI ，所有创建的是一个 EUI 项目，引擎版本选择刚刚下载的那个版本即可。<br>
选择扩展库 建议勾选上 game 游戏库，也可以在开发的时候在添加到项目中，egret.setTimeOut 方法需要 game 游戏库的支持；第六个的 tween 缓动动画库是游戏中的物体缓动的必需库文件。舞台尺寸默认，<br>
小游戏不支持 showAll 的缩放模式，需要更改，然后点击 创建 。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/egret-red-hat/5.png" alt></p>
<h4 id="2-发布编译项目"><a class="header-anchor" href="#2-发布编译项目">¶</a>2、发布编译项目</h4>
<p>依据下图进行该项目的的发布设置，选中 微信小游戏 并 设为默认发布 ；然后填入自己的 AppID，在注册微信公众平台的时候一定要注意，在微信公众平台的 设置 &gt; 基本设置 &gt; 服务类目 中第一个<br>
大类一定要选择 游戏 ，否则在编译项目后会提示无app.json，看过小游戏官网教程的话就知道小游戏加载的是 game.json ；填上项目名称后点击 确定 ，等待发布编译，之后操作下图中的第六步，打开<br>
Egret Wing 3，然后在该编辑器中进行编写代码。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/egret-red-hat/6.png" alt></p>
<h4 id="3-熟悉-egret-wing-3"><a class="header-anchor" href="#3-熟悉-egret-wing-3">¶</a>3、熟悉 Egret Wing 3</h4>
<p>打开项目后可自行查看各个文件，感受一下每个文件是什么作用。其中 egretProperties.json 是一个很重要的文件，打开的时候确认 current 的值，如果是 web 的话，点击调试按钮的时候会弹出<br>
H5 页面查看小游戏的效果，更改为 wxgame 即可在点击调试按钮的时候直接打开微信开发者工具进行预览，下图左上角的箭头即指向调试按钮。前面提到的勾选 game 库，如果后期添加的话，需要在<br>
egretProperties.json 中按红框的格式添加，然后在终端输入 egret build -e 进行加载。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/egret-red-hat/8.png" alt></p>
<p>src 文件夹下的 Platform.ts 是 Egret 引擎和微信小游戏之间的桥接文件，主要功能是使用小游戏的 API ，Main.ts 文件是在该项目中加载 Platform.ts 文件。同时，为了避免混淆，在 src 文件夹下新建<br>
game 文件夹用于存放自己的游戏文件，右击game 文件夹选择 新建模板文件 &gt; 新建 EUI 组件 ，输入类名后，修改 皮肤默认路径 ，也放到 resource 的 game 文件夹下，避免混淆。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/egret-red-hat/9.png" alt></p>
<p>可以对照我放在 <a href="https://github.com/liuxy0551/RedHat" target="_blank" rel="noopener">Github</a> 上的源码，每个新建的 EUI 组件全部采用单例模式编写，利于后期调用被其他组件调用该组件中的方法。下图中的红框即是快速布局功能区。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/egret-red-hat/10.png" alt></p>
<h3 id="三-egret-中重要的-api"><a class="header-anchor" href="#三-egret-中重要的-api">¶</a>三、Egret 中重要的 API</h3>
<p>因为 Egret 不止是针对微信小游戏的引擎，所以其官网资料体系比较大，对小游戏有用的主要是以下几个：</p>
<p>开发者中心 &gt; 文档 &gt; <a href="http://developer.egret.com/cn/github/egret-docs/Engine2D/update/update527/index.html" target="_blank" rel="noopener">Egret Engine 2D</a>、<a href="http://developer.egret.com/cn/github/egret-docs/extension/threes/instructions/index.html" target="_blank" rel="noopener">Egret 扩展库</a> 、<br>
<a href="http://developer.egret.com/cn/apidoc/" target="_blank" rel="noopener">Egret API</a> 、<a href="http://developer.egret.com/cn/example/egret2d/index.html#010-disp-basic" target="_blank" rel="noopener">Egret 教学示例</a> 、<a href="http://bbs.egret.com/portal.php" target="_blank" rel="noopener">Egret 交流社区</a> 。</p>
<p>其中在这个项目中比较重要的几个点分别为： 滚动控制容器 、setTimeOut 、缓动动画及其 wait 延迟方法 、碰撞检测 、缓动动画的暂停与恢复 、通过深度值获取子对象来设置参数（深度管理） 、Timer定时器（后期剔除）等，在 <a href="https://github.com/liuxy0551/RedHat/blob/master/gameDemo/src/game/GamePage.ts" target="_blank" rel="noopener">GamePage.ts</a> 中可查看具体用法。</p>
<p>因为发布需要软著登记，所有暂时不发布了，先玩玩单机版的吧。</p>
]]></content>
      <categories>
        <category>微信开发</category>
      </categories>
      <tags>
        <tag>Egret</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 中实现验证码倒计时功能</title>
    <url>/article/code-setInterval.html</url>
    <content><![CDATA[<p>公司项目中有根据手机号获取验证码的环节，倒计时的实现还是比较有趣的，记录一下。</p>
<a id="more"></a>
<h3 id="实现效果"><a class="header-anchor" href="#实现效果">¶</a>实现效果</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/code-setInterval/1.gif" alt></p>
<h3 id="具体实现"><a class="header-anchor" href="#具体实现">¶</a>具体实现</h3>
<h4 id="1-html-部分"><a class="header-anchor" href="#1-html-部分">¶</a>1、HTML 部分</h4>
<p><img src="https://images-hosting.liuxianyu.cn/posts/code-setInterval/2.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;li&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span&gt;手机号&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; class=&quot;m-edit-input&quot; v-model=&quot;ustelphone&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span&gt;验证码&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; class=&quot;m-edit-input-s&quot; v-model=&quot;identifyingcode&quot; maxlength=&quot;6&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;m-get-code active&quot; v-if=&quot;!getCode&quot; @click=&quot;getInforcode&quot;&gt;获取验证码&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;m-get-code&quot; v-if=&quot;getCode&quot;&gt;&#123;&#123; count &#125;&#125; 秒后再次获取&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2-js-部分"><a class="header-anchor" href="#2-js-部分">¶</a>2、JS 部分</h4>
<p><img src="https://images-hosting.liuxianyu.cn/posts/code-setInterval/3.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    getCode: false,               // 是否已获取验证码</span><br><span class="line">    ustelphone: &apos;&apos;,               // 手机号码</span><br><span class="line">    timer: null,                  // 倒计时</span><br><span class="line">    count: &quot;&quot;                     // 倒计时</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/code-setInterval/4.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 获取验证码</span><br><span class="line">getInforcode() &#123;</span><br><span class="line">  if(!this.ustelphone)&#123;</span><br><span class="line">    Toast(&quot;请先输入手机号码&quot;);</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  // 倒计时60秒</span><br><span class="line">  const TIME_COUNT = 10;</span><br><span class="line">  if (!this.timer) &#123;</span><br><span class="line">    this.count = TIME_COUNT;</span><br><span class="line">    this.getCode = true;</span><br><span class="line">    this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">      if (this.count &gt; 0 &amp;&amp; this.count &lt;= TIME_COUNT) &#123;</span><br><span class="line">        this.count --;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.getCode = false;</span><br><span class="line">        clearInterval(this.timer);</span><br><span class="line">        this.timer = null;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;</span><br><span class="line">  axios.get(api.get_inforcode + &quot;?ustelphone=&quot; + this.ustelphone).then(res =&gt; &#123;</span><br><span class="line">    Toast(res.data.message);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-css-部分"><a class="header-anchor" href="#3-css-部分">¶</a>3、CSS 部分</h4>
<p><img src="https://images-hosting.liuxianyu.cn/posts/code-setInterval/5.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.m-get-code&#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  padding: 4px 15px;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  background-color: #CCCCCC;</span><br><span class="line">  color: #fff;</span><br><span class="line">  box-shadow:0 3px 6px rgba(0,0,0,0.16);</span><br><span class="line">  font-size: 21px;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  &amp;.active&#123;</span><br><span class="line">    background-color: @mainColor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 编程之路（三）—— Vue 中子组件在父组件的 v-for 循环里，父组件调取子组件的事件</title>
    <url>/article/v-for-father-children.html</url>
    <content><![CDATA[<p>最近公司的一个项目中使用 Vue 2.x + Element UI 实现一个后台管理系统的前端部分，属于商城类型。<br>
　　<img src="https://images-hosting.liuxianyu.cn/posts/v-for-father-children/9.gif" alt></p>
<a id="more"></a>
<h3 id="一-前期思路："><a class="header-anchor" href="#一-前期思路：">¶</a>一、前期思路：</h3>
<p>其中在“所有订单”页面，UI 给的设计页面如下：<br>
　　<img src="https://images-hosting.liuxianyu.cn/posts/v-for-father-children/1.png" alt></p>
<p>UI 理解：每个 Tab 点击后展现的页面都是这样的管理表格，所以这一部分表格写成组件。一开始采用的写法是下面这样的：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/v-for-father-children/2.png" alt></p>
<p>上图，前期实现。写完觉得代码很繁复，我在实现状态标识 + 对应的数量时，也发现上述写法不利于将 label 绑定为动态数值，转换思路和后端老哥沟通后改造了接口，返回数据的时候添加一下各个状态及其对应的数量。</p>
<h3 id="二-最终的实现思路："><a class="header-anchor" href="#二-最终的实现思路：">¶</a>二、最终的实现思路：</h3>
<p>基于简化代码的思想，决定将这些 tabs 用循环的方式展现出来，写法如下：<br>
　　<img src="https://images-hosting.liuxianyu.cn/posts/v-for-father-children/3.png" alt></p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/v-for-father-children/4.png" alt><br>
　　<center>上图，定义的 tabList。</center></p>
<p>因为要显示相应的数量，从接口中拿数据后与 tabList 进行拼接，不过给各位的参考意义不大，处理如下：<br>
　　<img src="https://images-hosting.liuxianyu.cn/posts/v-for-father-children/5.png" alt></p>
<p>下图将体现解决方法的核心，那就是带上对应的数组下标，即何时调用：<br>
　　<img src="https://images-hosting.liuxianyu.cn/posts/v-for-father-children/6.png" alt></p>
<p>我采用的逻辑是点击不同的 Tab 标签，携带不同的参数去请求数据，上图显示在返回的数据 order 有变化时，将变化后的 order 传值给子组件的 getOrderList 方法进行处理。这个时候就要解答标题了，因为 tabs 是循环出来的， console.log(this.$refs.child) 将显示类似下图：<br>
　　<img src="https://images-hosting.liuxianyu.cn/posts/v-for-father-children/7.png" alt></p>
<p>可以看出已经成了一个数组，这时候就需要我们加上下标再去调用相应的 tab 子组件方法，如下图，确定 tabList 的 index：<br>
　　<img src="https://images-hosting.liuxianyu.cn/posts/v-for-father-children/8.png" alt></p>
<h3 id="三-写在最后"><a class="header-anchor" href="#三-写在最后">¶</a>三、写在最后</h3>
<p>1、为何不像 <a href="https://liuxianyu.cn/article/data-father-child.html">Vue 编程之路（一）——父子组件之间的数据传递</a> 中介绍的直接传值？</p>
<p>直接传值在前期写法中尝试过，那时连请求数据都是在子组件中进行，所以有很多莫名其妙的 bug，比如每次请求数据后会再请求一次全部状态的数据，导致显示异常，转换思路后在父组件请求数据，按 Tab 标签分发对应的数据，这就需要将 Tab 标签的数据传入子组件的方法进行处理。</p>
<p>2、子组件在父组件中进行 v-for 循环前，因为 this.$refs.child 还不是数组，所以可以直接点出子组件的方法，这也是调用子组件方法的实现方案。</p>
<p>特殊点就是子组件在父组件中进行 v-for 循环后， this.$refs.child 会变成一个数组，这时候再调用子组件的方法就要带上数组的下标了，这个下标如何来，可以参考这篇随笔第二部分的实现思路。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 编程之路（二）——跳转页面传值</title>
    <url>/article/transmit-value.html</url>
    <content><![CDATA[<p>最近公司的一个项目中使用 Vue 2.0 + element UI 实现一个后台管理系统的前端部分，属于商城类型。其中我负责的部分有一项需要跳转页面，由于跳转前的页面是多个组件构成的，所以在跳转页面的时候，并不适合用传统的 href，于是使用路由进行传值。在这里分享一下开发的过程。<br>
如何引入路由，可查看官方文档：<a href="https://router.vuejs.org/zh/installation.html" target="_blank" rel="noopener">https://router.vuejs.org/zh/installation.html</a>，也可自行搜索。</p>
<a id="more"></a>
<h3 id="一-我采用的实现方法"><a class="header-anchor" href="#一-我采用的实现方法">¶</a>一、我采用的实现方法</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/transmit-value/1.png" alt></p>
<p>上图，跳转前的页面。给每一行的按钮绑定点击事件，并将每一行的数据携带上。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/transmit-value/2.png" alt></p>
<p>上图，按钮的点击事件。首先创建 props ，然后在 props 中创建对应的属性名，之后即可在 template 中使用接收到的对象。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/transmit-value/3.png" alt></p>
<p>上图，跳转前的页面所对应的响应事件。其中 path 所对应的 ‘/order/orderDetails’ 我已经在 src/router/index.js 中注册声明，如下图：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/transmit-value/4.png" alt></p>
<p>上图，在 src/router/index.js 中注册声明。</p>
<p>点击“订单详情”按钮后，页面跳转，此时的 URL 为：</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/transmit-value/5.png" alt></p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/transmit-value/6.png" alt></p>
<p>上图，接收页接收数据。此时刷新页面，数据依然存在，因为 URL 没有改变，接收页直接从 URL 截取参数去接口中拿数据，故刷新页面不会影响接收页的数据。可以看到，这边是把需要的参数写入 URL 了，然后在接收页接收数据：</p>
<h3 id="二-介绍一下先前采用的方法"><a class="header-anchor" href="#二-介绍一下先前采用的方法">¶</a>二、介绍一下先前采用的方法</h3>
<p>拿着整个订单对象用路由传，实际上能传成功，但是会在刷新页面后拿不到数据，观察 URL 发现显示的是 Object ，可能是刷新后解析问题导致拿不到数据。</p>
<p>具体的采用可参照官方文档：<a href="https://router.vuejs.org/zh/guide/essentials/navigation.html" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/essentials/navigation.html</a>，我当时也是照着文档写的，获取参数可以用 this.$route.query。</p>
<h3 id="三-其他方法"><a class="header-anchor" href="#三-其他方法">¶</a>三、其他方法</h3>
<p>其实跳转页面传值的方法有很多，就我所听过的就还有以下方法，不过我没有实验过，有兴趣的可以自行尝试：</p>
<h4 id="1-使用-router-link-也会在刷新页面后丢失数据"><a class="header-anchor" href="#1-使用-router-link-也会在刷新页面后丢失数据">¶</a>1、使用 router-link 也会在刷新页面后丢失数据</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to=&quot;&#123; name: &apos;user&apos;, params: &#123; userId: 123 &#125;&#125;&quot;&gt;User&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2-通过-parent-children-等方法调取用层级关系的组件内的数据和方法"><a class="header-anchor" href="#2-通过-parent-children-等方法调取用层级关系的组件内的数据和方法">¶</a>2、通过 parent, children 等方法调取用层级关系的组件内的数据和方法</h4>
<p>通过下面的方法调用，虽然用起来比较灵活，但是容易造成代码耦合性高，导致后期维护困难。<br>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$parent.$data.id            // 获取父元素data中的id</span><br><span class="line">this.$children.$data.id          // 获取父元素data中的id</span><br></pre></td></tr></table></figure></p>
<h4 id="3-通过-eventbus-传递数据"><a class="header-anchor" href="#3-通过-eventbus-传递数据">¶</a>3、通过 eventBus 传递数据</h4>
<p>使用前可以在全局定义一个 eventBus<br>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.eventBus = new Vue();</span><br></pre></td></tr></table></figure></p>
<p>在需要传递参数的组件中，定义一个 emit 发送需要传递的值，键名可以自己定义（可以为对象）<br>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eventBus.$emit(&apos;eventBusName&apos;, id);</span><br></pre></td></tr></table></figure></p>
<p>在需要接受参数的组件重，用 on 接受该值（或对象）<br>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eventBus.$on(&apos;eventBusName&apos;, function(val) &#123;</span><br><span class="line">    console.log(val)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>最后记住要在 beforeDestroy() 中关闭这个 eventBus<br>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eventBus.$off(&apos;eventBusName&apos;);</span><br></pre></td></tr></table></figure></p>
<h4 id="4-借道-sessionstorage-localstorage"><a class="header-anchor" href="#4-借道-sessionstorage-localstorage">¶</a>4、借道 sessionStorage / localStorage</h4>
<p>localStorage 与 sessionStorage 存储的必需是字符串，而获取的交互数据是 Object，所以我们一般要把 JSON 格式的字符串转成字符。<br>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JSON.stringify();        // 将Json对象转为字符串。</span><br><span class="line">JSON.parse();            // 将字符串转为json格式。</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 编程之路（一）——父子组件之间的数据传递</title>
    <url>/article/data-father-child.html</url>
    <content><![CDATA[<p>最近公司的一个项目中使用 Vue 2.0 + element UI 实现一个后台管理系统的前端部分，属于商城类型。其中部分页面是数据管理页，所以有很多可以复用的表格，故引入自定义组件。</p>
<a id="more"></a>
<h3 id="一-父组件向子组件传值"><a class="header-anchor" href="#一-父组件向子组件传值">¶</a>一、父组件向子组件传值</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/data-father-child/2.png" alt></p>
<p>上图，这边实现的是从父组件向子组件动态传值，传的是一个对象。在子组件上动态绑定要传入的对象，如果是静态数据（如：“Hello World!”）则无需属性名前的冒号，并且需要在 components 中声明。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/data-father-child/3.png" alt></p>
<p>上图，首先创建 props ，然后在 props 中创建对应的属性名，之后即可在 template 中使用接收到的对象。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/data-father-child/4.png" alt></p>
<blockquote>
<p><strong>总结一下：  父组件向子组件传对象（值）成功</strong></p>
<ul>
<li>1、在父组件中注册并引用子组件</li>
<li>2、使用子组件时在子组件上添加一个属性，并绑定上数据</li>
<li>3、在子组件中创建 props ，在 props 中创建相同的属性名，用来接收数据</li>
<li>4、把接收到的数据在子组件中使用</li>
</ul>
</blockquote>
<h3 id="二-子组件向父组件传值"><a class="header-anchor" href="#二-子组件向父组件传值">¶</a>二、子组件向父组件传值</h3>
<p><img src="https://images-hosting.liuxianyu.cn/posts/data-father-child/5.png" alt></p>
<p>首先在子组件创建一个按钮，给这个按钮绑定一个点击事件。上图是子组件中又调用了其他的组件（分页组件），我这边是子组件把页码传递给父组件，父组件拿着页码去请求数据，原理和按钮绑定点击事件是相同的道理。</p>
<p>然后在方法中添加以下代码：<br>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pageChange(v)&#123;</span><br><span class="line">    this.$emit(&apos;toPage&apos;, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/data-father-child/6.png" alt></p>
<p>在父组件的子组件标签中监听该事件并添加一个响应事件来处理数据。点击分页组件上的页码按钮或点击创建的按钮，在响应事件中使用数据，可观察到传值成功。</p>
<blockquote>
<p><strong>总结一下：  子组件向父组件传值成功</strong></p>
<ul>
<li>1、子组件中需要发出该自定义事件，可以是按钮的点击事件，也可以是其他方式</li>
<li>2、将需要传的值放在 $emit 第二个参数的位置，这个参数会被传给父组件中的响应方法</li>
<li>3、需要在父组件中使用子组件并在子组件标签上绑定对事件的监听</li>
</ul>
</blockquote>
<p><strong>在通信中，无论是子组件向父组件传值还是父组件向子组件传值，他们都有一个共同点就是有中间介质，子向父的介质是自定义事件，父向子的介质是 props 中的属性。</strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>在 apizza 中使用 Mock 来模拟接口数据</title>
    <url>/article/apizza-mock.html</url>
    <content><![CDATA[<p>作为一个前端开发人员，经常需要和接口文档打交道，公司使用的是 apizza，在 Chrome 中安装插件后功能提升明显。</p>
<a id="more"></a>
<h3 id="apizza"><a class="header-anchor" href="#apizza">¶</a>apizza</h3>
<p><a href="https://apizza.net/" target="_blank" rel="noopener">apizza</a> 简单来说就是一个 API 管理工具，也可以称之为多人在线协作的接口调试工具。在 Chrome 中安装 apizza 的插件后可以使用免费版的全部功能。可以通过<br>
<a href="https://apizza.net/" target="_blank" rel="noopener">apizza官网</a> 右上角的 <a href="https://apizza.net/page/downloadext" target="_blank" rel="noopener">插件安装</a> 获取 Chrome 插件。也可以点击链接获取压缩包再安装：<a href="https://pan.baidu.com/s/1LkXXNtxKj2oF1_g8MmScCg" target="_blank" rel="noopener">https://pan.baidu.com/s/1LkXXNtxKj2oF1_g8MmScCg</a> 提取码：ayau。</p>
<p>使用方法可以参考一下这篇来自 <a href="https://me.csdn.net/ouxiaoxian" target="_blank" rel="noopener">ouxiaoxian</a> 的博客 <a href="https://blog.csdn.net/ouxiaoxian/article/details/80526979" target="_blank" rel="noopener">apizza的使用方法</a>。</p>
<h3 id="mock-js"><a class="header-anchor" href="#mock-js">¶</a>Mock.js</h3>
<p><a href="http://mockjs.com/" target="_blank" rel="noopener">Mock.js</a> 简而言之就是一个生成随机数据的工具。单纯使用的话可以直接进入 <a href="http://mockjs.com/" target="_blank" rel="noopener">Mock.js 官网</a> 顶部的 <a href="http://mockjs.com/examples.html" target="_blank" rel="noopener">示例</a> 标签查看使用方法，页面支持试验方法。</p>
<p>如果又兴趣查看源码的话可以从 <a href="http://mockjs.com/" target="_blank" rel="noopener">Mock.js 官网</a> 进入查看。</p>
<h3 id="如何使用-apizza-mock"><a class="header-anchor" href="#如何使用-apizza-mock">¶</a>如何使用 apizza mock</h3>
<p>apizza mock 是基于 Mock.js 开发的。具体文档可以 参见 Mock.js <a href="https://github.com/nuysoft/Mock/wiki" target="_blank" rel="noopener">详细文档</a> 或者查看 Mock.js 的 <a href="http://mockjs.com/examples.html" target="_blank" rel="noopener">示例</a>。</p>
<blockquote>
<p><strong>apizza 上如何使用 mock</strong></p>
<ul>
<li>1、新建接口</li>
<li>2、填写 mock 在线地址</li>
<li>3、编写 mock 数据模板</li>
<li>4、点击预览按钮查看 mock 响应</li>
<li>5、保存后，即可去代码中使用 mock 在线地址了</li>
</ul>
</blockquote>
<p><img src="https://images-hosting.liuxianyu.cn/posts/apizza-mock/1.png" alt></p>
<p>还可以去 apizza 的 <a href="https://apizza.net/wiki/datamodel" target="_blank" rel="noopener">使用帮助页</a> 查看更多使用方法。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Mock</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle 11g 数据库备份涉及的部分记忆点</title>
    <url>/article/oracle11g-PLSQL-emptytable.html</url>
    <content><![CDATA[<p>  在开发中有一个项目，其中有 32 个表，含有 10 个空表（没有数据），开发过程恰逢自己电脑换系统和新配一台工作电脑，在备份数据库时，感觉有部分记忆点值得记录一下。</p>
<a id="more"></a>
<h3 id="一-导出-导入数据文件-可用于数据备份-或者不同地点间的数据库同步"><a class="header-anchor" href="#一-导出-导入数据文件-可用于数据备份-或者不同地点间的数据库同步">¶</a>一、导出、导入数据文件（可用于数据备份，或者不同地点间的数据库同步）</h3>
<p>  1、使用 PLSQL 12 中自带的 工具——导出表 ，单击第一个表，按住 Shift 键单击最后一个表即可将所有表全部选定，选定导出目录，填写输出文件名称，保存，数据多的时候可以在弹出的窗口中看见导出过程。（这时候可以发现有部分表提示“导出失败，某某表不存在”，查看这些表后发现这些表都有一个共同的特征：无数据，解决办法可跳至第三段）</p>
<p>  2、在新电脑中使用 PLSQL 12 中的 工具——导入表，选中刚刚的导出文件，导入数据即可。</p>
<h3 id="二-想象中的导出-导入数据文件"><a class="header-anchor" href="#二-想象中的导出-导入数据文件">¶</a>二、想象中的导出、导入数据文件</h3>
<h4 id="以下为缺少表空间的错误："><a class="header-anchor" href="#以下为缺少表空间的错误：">¶</a>以下为缺少表空间的错误：</h4>
<p>1、在原先正常的电脑上使用 PL SQL 12 导出 32 个表，为 .dmp 格式文件，并在新电脑进行导入表的操作<br>
2、弹出一个窗口后秒关，尝试通过截图快捷键截图查看，以失败告终，请教项目组上的数据库老师后知道了这是缺少表空间的缘故，之后   就是各种恶补表空间知识。<br>
3、在 PLSQL 中新建 SQL 窗口，键入以下语句并执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLESPACE OP</span><br><span class="line">LOGGING</span><br><span class="line">DATAFILE &apos;D:\Oracle\product\11.2.0\OP.DBF&apos;</span><br><span class="line">SIZE 50M</span><br><span class="line">AUTOEXTEND ON</span><br><span class="line">NEXT 32M MAXSIZE UNLIMITED</span><br><span class="line">EXTENT MANAGEMENT LOCAL;</span><br></pre></td></tr></table></figure>
<p>  其中第三行语句含有表空间的存放位置，建议放在 Oracle 的安装目录里面，防止误删除。OP 为表空间名字，其他行语句想了解的可自行百度具体含义。删除已经使用的表空间会使得对应的用户无法登录使用，我是重装 Oracle 解决的，就是这么低技术含量，幸好是没有什么重要数据。可以删除表空间后再删除这个 .DBF 文件，删除语句如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLESPACE OP;</span><br></pre></td></tr></table></figure>
<h3 id="三-解决空表不导出的方法"><a class="header-anchor" href="#三-解决空表不导出的方法">¶</a>三、解决空表不导出的方法</h3>
<p>1、在数据导出的时候，无法导出空表，提示错误“EXP-00011：table 不存在”。<br>
产生原因：Oracle 11g 默认创建一个表时不分配 segment，只有在插入数据时才会产生（当然也可以强制分配），以节省磁盘空间。</p>
<p>2、解决方法：<br>
  (1)第一种：在空表中插入一条数据然后再对插入的数据进行删除，便可以进行数据导出（我的那几个表添加假数据很难，如果表少的话可以手动执行，对于多个表的情况可以采用语句进行批量操作的）。<br>
  (2)第二种：可以使用手工为空表分配 Extent 的方式，来解决导出之前建立的空表的问题。在 PLSQL 中新建 SQL 窗口，键入以下语句并执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &apos;ALTER TABLE &apos;||TABLE_NAME||&apos; ALLOCATE EXTENT;&apos; FROM USER_TABLES WHERE SEGMENT_CREATED=&apos;NO&apos;;</span><br></pre></td></tr></table></figure>
<p><img src="https://images-hosting.liuxianyu.cn/posts/oracle11g-PLSQL-emptytable/1.png" alt><br></p>
<p>可以通过语句导出查询结果，执行导出的语句即可（表数量少的话可以复制粘贴执行查询结果）。</p>
<p><br><img src="https://images-hosting.liuxianyu.cn/posts/oracle11g-PLSQL-emptytable/2.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set heading off;</span><br><span class="line">set echo off;</span><br><span class="line">set feedback off;</span><br><span class="line">set termout on;</span><br><span class="line">spool D:\Oracle\product\11.2.0\allocate.sql;</span><br><span class="line">SELECT &apos;ALTER TABLE &apos;||TABLE_NAME||&apos; ALLOCATE EXTENT;&apos; FROM USER_TABLES WHERE SEGMENT_CREATED=&apos;NO&apos;;</span><br><span class="line">spool off;</span><br></pre></td></tr></table></figure>
<p>导出后执行导出的语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ D:\Oracle\product\11.2.0\allocate.sql;</span><br></pre></td></tr></table></figure>
<p>  (3)第三种：设置deferred_segment_creation 参数，该参数值默认是TRUE，当改为FALSE时，无论是空表还是非空表，都分配segment。<br>
（这种方法我没有试过，你可以自行尝试）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &apos;ALTER TABLE &apos;||TABLE_NAME||&apos; ALLOCATE EXTENT;&apos; FROM USER_TABLES WHERE NUM_ROWS=0;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>实测上面百度到的这句指令不显示空表结果，你可以自己试一试。</li>
<li>下面这个语句可在 TNS 连接不上时导入表：</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">imp scott/tiger@localhost:1521/orcl full=y  file= E:\my.dmp ignore=y;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>1、写这篇随笔的时候发现在 Atom 中选中单词，按住 Ctrl 后按 K， 再按 U，即可将选中的单词大写</li>
<li>2、白天的技巧：Eclipse 中查看方法在哪里被调用了——选中方法，直接Ctrl + Shift + G 或者 Ctrl + Alt + H</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Ionic 3 + AngularJS 4.x + Cordova 混合开发项目小战</title>
    <url>/article/ionic3-angular4.x-cordova.html</url>
    <content><![CDATA[<p>在实习过程中因项目组需要，学习了一段时间的混合开发，工银系统新版APP的部分开发工作。主要是利用 Ionic 3 + AngularJS 4.x + Cordova 混合开发这个项目，做的是一些基本工作，记录一下。内容很多，学会的也很多，记录下来的是一些此时觉得比较常用的知识点。</p>
<a id="more"></a>
<h3 id="一-准备工作"><a class="header-anchor" href="#一-准备工作">¶</a>一、准备工作</h3>
<p>1、安装 python；<br>
　　2、安装编辑器： webstorm（个人推荐）或 VS Code，2 和 3中的具体步骤可自行百度；<br>
　　3、安装最新版本的 node js，运行命令 node -v 和 npm -v， 来验证一下你正在运行的是 node 6.9.x 和 npm 3.x.x 以上的版本。</p>
<h3 id="二-了解-angularjs"><a class="header-anchor" href="#二-了解-angularjs">¶</a>二、了解 AngularJS</h3>
<h4 id="全局安装-angular-cli-脚手架工具-只需要安装一次"><a class="header-anchor" href="#全局安装-angular-cli-脚手架工具-只需要安装一次">¶</a>全局安装 Angular CLI 脚手架工具(只需要安装一次)</h4>
<p>安装 cnpm，npm 可能安装失败，建议先用 npm 安装一下，cnpm 用淘宝镜像安装 （<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a> )，指令：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>
<p>使用 cnpm 安装脚手架：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -g @angular/cli</span><br></pre></td></tr></table></figure></p>
<p>然后就可以新建项目了，进入刚才创建的项目里面启动服务:</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng new my-app</span><br><span class="line">cd my-app</span><br><span class="line">npm i</span><br><span class="line">ng serve --open</span><br></pre></td></tr></table></figure></p>
<h3 id="三-ionic-3"><a class="header-anchor" href="#三-ionic-3">¶</a>三、ionic 3</h3>
<p>全局安装 ionic 3 和 cordova，指令：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -g cordova ionic</span><br></pre></td></tr></table></figure></p>
<p>新建带 tabs 的项目并启动服务（或 menu）：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ionic start ionicDemo02 tabs</span><br><span class="line">cd ionicDemo02</span><br><span class="line">npm i</span><br><span class="line">ionic serve</span><br></pre></td></tr></table></figure></p>
<p>ionic 3 新建组件的命令：ionic g page 组件名，如：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ionic g page exam-online</span><br></pre></td></tr></table></figure></p>
<h3 id="四-打包项目"><a class="header-anchor" href="#四-打包项目">¶</a>四、打包项目</h3>
<p>这里只介绍我比较熟悉的 Android 打包，需要安装 Android SDK（可参考 <a href="https://liuxianyu.cn/article/AndroidIDE.html">轻松搞定 Android 开发环境的搭建</a> 中安装 Android SDK 的部分），我安装的是 Android 8.0.0（API 26），与下文中的 gradle 4.1 版本相对应。点此下载 <a href="https://pan.baidu.com/s/1uvbvk2UBmsDHBHFckjq1ag" target="_blank" rel="noopener">gradle-4.1-all.zip</a> 密码：<code>yt35</code>。将这个压缩包解压，添加 bin 文件夹路径至环境变量 Path。</p>
<p><br><img src="https://images-hosting.liuxianyu.cn/posts/ionic3-angular4.x-cordova/1.png" alt></p>
<p>添加打包平台（Android）的命令：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ionic cordova platform add android</span><br></pre></td></tr></table></figure></p>
<p>修改 <code>E:\AppDemo\Ionic2\cplease\platforms\android\cordova\lib\builders\GradleBuilder.js</code> 中的第250行，将行末改为指向本地的 gradle-4.1-all.zip 文件，改为&quot;…/gradle-4.1-all.zip&quot;。</p>
<br>
打包成 apk 文件（生成一个 debug 包，无签名）的命令：
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ionic cordova build android  --prod</span><br></pre></td></tr></table></figure></p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/ionic3-angular4.x-cordova/2.png" alt><br>
<img src="https://images-hosting.liuxianyu.cn/posts/ionic3-angular4.x-cordova/3.png" alt></p>
<p>打包成 apk 文件的命令（比上一个打包出来的占用空间大）：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ionic cordova build android</span><br></pre></td></tr></table></figure></p>
<p>打包后的文件位置（自行对应这个文件夹下的 apk 文件）：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\AppDemo\Ionic2\cplease\platforms\android\app\build\outputs\apk\debug</span><br></pre></td></tr></table></figure></p>
<p>以下为部分真机测试时的截图</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/ionic3-angular4.x-cordova/4.png" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/ionic3-angular4.x-cordova/5.png" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/ionic3-angular4.x-cordova/6.png" alt></div></div><div class="group-picture-row"></div></div></div>
]]></content>
      <categories>
        <category>前端</category>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 清空具有外键约束的表中 id 自增长报 1701 解决方法</title>
    <url>/article/mysql-1701.html</url>
    <content><![CDATA[<p>开发中遇到测试数据清空时，发现 tbl_dept 表自增长的 id 是 tbl_emp 表的外键，使用 TRUNCATE TABLE tbl_dept;语句会报错。</p>
<a id="more"></a>
<h3 id="1-错误信息如下："><a class="header-anchor" href="#1-错误信息如下：">¶</a>1、错误信息如下：</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 queries executed, 0 success, 1 errors, 0 warnings</span><br><span class="line">查询：truncate table tbl_dept</span><br><span class="line">错误代码： 1701</span><br><span class="line">Cannot truncate a table referenced in a foreign key constraint (`ssm_crud`.`tbl_emp`, CONSTRAINT `fk_emp_dept` FOREIGN KEY (`d_id`) REFERENCES `ssm_crud`.`tbl_dept` (`dept_id`))</span><br><span class="line">执行耗时   : 0 sec</span><br><span class="line">传送时间   : 0 sec</span><br><span class="line">总耗时     : 0.001 sec</span><br></pre></td></tr></table></figure>
<h3 id="2-解决方法"><a class="header-anchor" href="#2-解决方法">¶</a>2、解决方法</h3>
<p>SQL 窗口执行以下语句即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET FOREIGN_KEY_CHECKS=0;</span><br><span class="line">TRUNCATE TABLE `tbl_dept`;</span><br><span class="line">SET FOREIGN_KEY_CHECKS=1;</span><br></pre></td></tr></table></figure>
<p>转载自 <a href="https://www.aliang.org/MySQL/874.html" target="_blank" rel="noopener">mysql 清空具有外键约束的表时报 ERROR 1701(42000)的解决</a></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>如何快速开启和关闭 Oracle 所需的服务</title>
    <url>/article/oracle-service.html</url>
    <content><![CDATA[<p>个人在学习 Oracle 时，安装好后会在系统中添加七个 Oracle 开头的服务，后文介绍。但这七个服务在启动后都很占资源，所以在我们不使用 Oracle 的时候，就可以将这些服务关闭。这就是这篇经验解决的问题——快速开启或关闭 Oracle 所需的服务。</p>
<a id="more"></a>
<h2 id="工具-原料"><a class="header-anchor" href="#工具-原料">¶</a>工具 / 原料</h2>
<p>Windows 系统、Oracle 11g、PLSQL Developer 12（等第三方数据库管理工具）</p>
<hr>
<h2 id="方法-步骤"><a class="header-anchor" href="#方法-步骤">¶</a>方法 / 步骤</h2>
<h3 id="1-更改服务启动类型"><a class="header-anchor" href="#1-更改服务启动类型">¶</a>1、更改服务启动类型</h3>
<p>安装好 Oracle 11g 和第三方工具 PLSQL Developer 12 后，右击我的电脑 -&gt; 服务或者控制面板 -&gt; 管理工具 -&gt; 服务，找到 Oracle 开头的七个或六个服务，将这些服务的启动类型全部改成手动。<br>
<br><img src="https://images-hosting.liuxianyu.cn/posts/oracle-service/1.png" alt></p>
<h3 id="2-理解服务含义"><a class="header-anchor" href="#2-理解服务含义">¶</a>2、理解服务含义</h3>
<p>成功安装 Oracle 11g 后，共有七个服务，这七个服务的含义可以参照 <a href="https://zhidao.baidu.com/question/265616629111117845.html" target="_blank" rel="noopener">这篇百度知道理解</a>，内容如下：<br>
<br><img src="https://images-hosting.liuxianyu.cn/posts/oracle-service/2.png" alt><br></p>
<h3 id="3-新建-bat文件"><a class="header-anchor" href="#3-新建-bat文件">¶</a>3、新建.bat文件</h3>
<p>所以当我们使用 PLSQL Developer 12 等第三方可视化界面时，只需要启动 OracleServiceORCL 和 OracleOraDb11g_home1TNSListener 两个服务即可。新建一个文本文件，打开后复制粘贴下述文本，保存后将文件后缀名改为“bat”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">for /f &quot;skip=3 tokens=4&quot; %%i in (&apos;sc query &quot;OracleServiceORCL&quot;&apos;) do set &quot;zt=%%i&quot; &amp;goto :next</span><br><span class="line">:next</span><br><span class="line">if /i &quot;%zt%&quot;==&quot;RUNNING&quot; (</span><br><span class="line">  echo 1.服务OracleServiceORCL正在运行</span><br><span class="line">) else (</span><br><span class="line">  echo 1.服务OracleServiceORCL已停止</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">for /f &quot;skip=3 tokens=4&quot; %%i in (&apos;sc query &quot;OracleOraDb11g_home1TNSListener&quot;&apos;) do set &quot;zt=%%i&quot; &amp;goto :next</span><br><span class="line">:next</span><br><span class="line">if /i &quot;%zt%&quot;==&quot;RUNNING&quot; (</span><br><span class="line">  echo 2.服务OracleOraDb11g_home1TNSListener正在运行</span><br><span class="line">) else (</span><br><span class="line">  echo 2.服务OracleOraDb11g_home1TNSListener已停止</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">choice /c:12 /m &quot;启动/停止Oracle服务[1启动,2停止]&quot;</span><br><span class="line">if errorlevel 2 goto two</span><br><span class="line">if errorlevel 1 goto one</span><br><span class="line">:one</span><br><span class="line">echo 正在启用服务...</span><br><span class="line">net start &quot;OracleServiceORCL&quot;</span><br><span class="line">net start &quot;OracleOraDb11g_home1TNSListener&quot;</span><br><span class="line">echo 服务OracleServiceORCL、OracleOraDb11g_home1TNSListener 启动成功！</span><br><span class="line"></span><br><span class="line">choice /c:12 /m &quot; 是否启动PLSQL Developer 12 ？[1是,2否]&quot;</span><br><span class="line">if errorlevel 2 exit</span><br><span class="line">if errorlevel 1 start &quot;&quot; &quot;E:\PLSQL Developer 12\plsqldev.exe&quot;</span><br><span class="line">&gt;nul</span><br><span class="line"></span><br><span class="line">:two</span><br><span class="line">echo 正在禁用服务...</span><br><span class="line">net stop &quot;OracleServiceORCL&quot;</span><br><span class="line">net stop &quot;OracleOraDb11g_home1TNSListener&quot;</span><br><span class="line"></span><br><span class="line">echo 服务OracleServiceORCL、OracleOraDb11g_home1TNSListener 禁用成功！</span><br><span class="line">echo 可按任意键退出...</span><br><span class="line">timeout 3</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p><br><img src="https://images-hosting.liuxianyu.cn/posts/oracle-service/3.png" alt><br></p>
<blockquote>
<p><strong>注意</strong><br>
　　上图中矩形方框中是 PLSQL 的安装位置，椭圆形标注的是服务名，与系统中的服务名要一致。</p>
</blockquote>
<br>
<h3 id="4-美观步骤"><a class="header-anchor" href="#4-美观步骤">¶</a>4、美观步骤</h3>
<p>将上述文本文件改名为“PLSQL Developer 12.bat”，将文件剪切到 PLSQL Developer 12 的安装目录（随意哪个目录），然后“发送到 -&gt; 桌面快捷方式”右击桌面上该快捷方式 -&gt; 属性 -&gt; 更改图标 -&gt; 浏览，进入 PLSQL 安装目录，选择 plsqldev.exe，一路确认，将快捷方式改名为“PLSQL Developer 12”。<br>
<br><br>
<br><img src="https://images-hosting.liuxianyu.cn/posts/oracle-service/4.png" alt><br></p>
<h3 id="5-启动与停止服务"><a class="header-anchor" href="#5-启动与停止服务">¶</a>5、启动与停止服务</h3>
<p>打开快捷方式，根据提示选择，关闭服务后，两个服务已经停止。同理，启动服务按提示进行即可。使用后可前往“服务”查看服务是否已启动或停止。<br>
<br><br>
<br><img src="https://images-hosting.liuxianyu.cn/posts/oracle-service/5.png" alt></p>
<p>上文提到的部分文件：<br>
链接：<a href="http://pan.baidu.com/s/1hr5J3JA" target="_blank" rel="noopener">http://pan.baidu.com/s/1hr5J3JA</a> 密码：x705</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>勒索（比特币）病毒的预防</title>
    <url>/article/lesuobingdu.html</url>
    <content><![CDATA[<p>最近看到很多关于 ONION 和 WNCRY 勒索病毒攻击的信息，其中绝大多数是使用校园网的学生，但不仅仅是学生，也不仅仅在最近发生。中毒后被要求在规定时间内支付比特币等赎金才能解密恢复文件，对个人资料和经济造成严重损失。</p>
<a id="more"></a>
<h3 id="1-工具"><a class="header-anchor" href="#1-工具">¶</a>1、工具</h3>
<p>360 安全卫士、360NSA 武器库免疫工具</p>
<h3 id="2-勒索病毒全球爆发"><a class="header-anchor" href="#2-勒索病毒全球爆发">¶</a>2、勒索病毒全球爆发</h3>
<blockquote>
<p>根据网络安全机构通报，这是不法分子利用 NSA 黑客武器库泄漏的“永恒之蓝”发起的病毒攻击事件。“永恒之蓝”会扫描开放 445 文件共享端口的 Windows 机器，无需用户任何操作，只要开机上网，不法分子就能在电脑和服务器中植入勒索软件、远程控制木马、虚拟货币挖矿机等恶意程序。<br>
由于以前国内多次爆发利用 445 端口传播的蠕虫，运营商对个人用户已封掉 445 端口，但是教育网并没有此限制，仍然存在大量暴露 445 端口的机器。据有关机构统计，目前国内平均每天有 5000 多台机器遭到 NSA“永恒之蓝”黑客武器的远程攻击，教育网是受攻击的重灾区。<br>
目前微软已发布补丁 MS17-010 修复了“永恒之蓝”攻击的系统漏洞，请尽快为电脑安装此补丁；对于 XP、2003 等微软已不再提供安全更新的机器，推荐使用“NSA武器库免疫工具”检测系统是否存在漏洞，并关闭受到漏洞影响的端口，可以避免遭到勒索软件等病毒的侵害。    ——<a href="https://weibo.com/u/6038922387?refer_flag=1001030101_" target="_blank" rel="noopener">黑客凯文的微博</a></p>
</blockquote>
<h3 id="3-未中毒的电脑"><a class="header-anchor" href="#3-未中毒的电脑">¶</a>3、未中毒的电脑</h3>
<p>1、未中毒的电脑考虑多次、多种途径备份重要资料，做好云盘和移动硬盘等的备份，尤其是校园网内的毕业季学生；<br>
2、点击 <a href="https://technet.microsoft.com/zh-cn/library/security/MS17-010" target="_blank" rel="noopener">微软补丁MS17-010O</a> 给电脑安装最新补丁，XP 及以下版本忽略；<br>
3、点击 <a href="http://blog.csdn.net/m0_38130651/article/details/71794637#%E6%9C%AA%E4%B8%AD%E6%AF%92%E7%9A%84%E7%94%B5%E8%84%91" target="_blank" rel="noopener">360NSA武器库免疫工具</a> 下载“360NSA 武器库免疫工具”，不保证完全好用。使用方法：下载完成拔除网线后开机，开机后不要联网，确认 360 安全卫士运行正常，打开 360 安全卫士的“反勒索服务”，再使用“360NSA 武器库免疫工具”检测电脑；<br>
4、关闭 445、135 等危险端口，具体操作参考 <a href="https://jingyan.baidu.com/article/d621e8da0abd192865913f1f.html" target="_blank" rel="noopener">对应的百度经验</a>；<br>
5、不要访问可疑网站、不打开可疑邮件和文件。</p>
<h3 id="4-已中毒的电脑"><a class="header-anchor" href="#4-已中毒的电脑">¶</a>4、已中毒的电脑</h3>
<p>1、不要给赎金，赎金很贵并且交了之后未必给你恢复；<br>
2、报警，在上一步骤中的“360 反勒索”中点击“申请服务”；<br>
3、胆大心大且无所谓资料想练手的网友可以参考这篇文章：<a href="http://www.360.cn/qiaozha/news.html?i=qzznews02151" target="_blank" rel="noopener">360安全卫士发布“纵情文件修复”病毒解密工具</a><br>
4、实在看不懂的可以把网掐了。</p>
<blockquote>
<ul>
<li>1、电脑中毒后尽量不要自行尝试解密，高强度不对称加密方式不是谁都能反向破解的；</li>
<li>2、日常生活中注意防毒，预防为主。</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>大学</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>Arduino + ESP8266 + DHT11 传输数据到网络调试助手</title>
    <url>/article/arduino-ESP8266-DHT11.html</url>
    <content><![CDATA[<p>在课程设计的学习过程中，有一个部分是使用 Arduino 平台，利用 ESP8266 传输 DHT11 的温湿度数据到网络调试助手，实验成功后便拿来分享了。</p>
<a id="more"></a>
<h2 id="工具-原料"><a class="header-anchor" href="#工具-原料">¶</a>工具 / 原料</h2>
<p>硬件：Arduino Uno, ESP8266, DHT11<br>
软件：Arduino IDE1.7.8, USR-TCP232-Test-V1.3<br>
代码文件：ESP8266_DHT11.ino<br>
此随笔涉及的文件：链接: <a href="https://pan.baidu.com/s/1dMRsvG" target="_blank" rel="noopener">https://pan.baidu.com/s/1dMRsvG</a> 密码: f4q6</p>
<h2 id="方法-步骤"><a class="header-anchor" href="#方法-步骤">¶</a>方法 / 步骤</h2>
<h3 id="一-电路连线"><a class="header-anchor" href="#一-电路连线">¶</a>一、电路连线</h3>
<p>1、DHT11 和 Arduino：vcc 连 3.3V，DATA 连 A0，GND 连 GND；<br>
　　2、ESP8266 和 Arduino：TX 连 0, RX 连 1, EN（CH_PD）和 3V3 连 3.3v, GND 连 GND。</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="https://images-hosting.liuxianyu.cn/posts/arduino-ESP8266-DHT11/1.jpg" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/arduino-ESP8266-DHT11/4.jpg" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/arduino-ESP8266-DHT11/5.jpg" alt></div></div></div></div>
<h3 id="二-编译上传代码"><a class="header-anchor" href="#二-编译上传代码">¶</a>二、编译上传代码</h3>
<p>使用 Arduino IDE1.7.8 打开 ESP8266_DHT11.ino 文件，编译并上传到 Arduino 板子上。<br>
<strong>注意</strong>：编译成功后拔掉 ESP8266 的 TX 和 RX 线（或 Arduino 上的 0 和 1 口），再上传，否则会报错：<strong>上传时占用输入输出口</strong>！上传成功后记得再连好。<br>
<br><img src="https://images-hosting.liuxianyu.cn/posts/arduino-ESP8266-DHT11/2.jpg" alt><br></p>
<h3 id="三-数据传输"><a class="header-anchor" href="#三-数据传输">¶</a>三、数据传输</h3>
<p>电脑连上 WiFi，再打开 USR-TCP232-Test-V1.3 串口转网络调试助手，本篇经验只使用右侧的网络调试助手。</p>
<p>1、网络设置区域的协议类型选择“TCP Server”；本地 ip 地址栏通常会在连接上 WiFi 后打开软件时自动更新；<br>
本地端口号为“8080”，可改。<br>
　　2、设置好后点击“开始监听”按钮，重启 Arduino 板子，等待十秒以内网络调试助手连接对象区域会出现 ESP8266 的 IP，此时代表<br>
已经连接上，等待网络数据接收区域显示内容后，在 DHT11 温湿度模块上哈几口气验证数据，数据正常变化实验即完成。<br>
<br><img src="https://images-hosting.liuxianyu.cn/posts/arduino-ESP8266-DHT11/3.jpg" alt><br></p>
<p>如果网盘链接挂了可以在百度文库下载或复制 <a href="https://wenku.baidu.com/view/ab3db226591b6bd97f192279168884868662b856" target="_blank" rel="noopener">Arduino + ESP8266 + DHT11 传输数据到网络调试助手</a> 文本文件，其余软件可自行百度下载。</p>
<blockquote>
<ul>
<li>1、电脑和 ESP8266 连接同一 WiFi，即局域网内完成实验；</li>
<li>2、编译成功后拔掉 ESP8266 的 TX 和 RX 线（或 Arduino 上的 0 和 1 口），再上传，否则会报错：上传时占用输入输出口！上传成功后记得再连好。</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>大学</category>
        <category>Arduino</category>
      </categories>
      <tags>
        <tag>Arduino</tag>
      </tags>
  </entry>
  <entry>
    <title>ESP8266 通过 Arduino 自动发送数据到网络调试助手</title>
    <url>/article/arduino-ESP8266.html</url>
    <content><![CDATA[<p>在课程设计的学习过程中，有一个部分是使用 ESP8266-WiFi 模块通过 Arduino 平台自动发送数据到网络调试助手，现在拿来分享。</p>
<a id="more"></a>
<h2 id="工具-原料"><a class="header-anchor" href="#工具-原料">¶</a>工具 / 原料</h2>
<p>硬件：Arduino Uno，ESP8266<br>
软件：Arduino IDE1.7.8，USR-TCP232-Test-V1.3<br>
代码文件：ESP8266auto.ino<br>
此随笔涉及的文件：链接: <a href="https://pan.baidu.com/s/1dMRsvG" target="_blank" rel="noopener">https://pan.baidu.com/s/1dMRsvG</a> 密码: f4q6</p>
<h2 id="方法-步骤"><a class="header-anchor" href="#方法-步骤">¶</a>方法 / 步骤</h2>
<h3 id="一-电路连线"><a class="header-anchor" href="#一-电路连线">¶</a>一、电路连线</h3>
<p>ESP8266 和 Arduino：TX 连 8，RX 连 9，EN（CH_PD）和 3V3 连 3.3V，GND 连 GND。  <br><br>
<br><img src="https://images-hosting.liuxianyu.cn/posts/arduino-ESP8266/2.jpg" alt></p>
<h3 id="二-编译上传代码"><a class="header-anchor" href="#二-编译上传代码">¶</a>二、编译上传代码</h3>
<p>使用 Arduino IDE1.7.8 打开 ESP8266auto.ino 文件，编译并上传到 Arduino 板子上。  <br><br>
<br><img src="https://images-hosting.liuxianyu.cn/posts/arduino-ESP8266/3.jpg" alt></p>
<h3 id="三-数据传输"><a class="header-anchor" href="#三-数据传输">¶</a>三、数据传输</h3>
<p>电脑连上 WiFi，再打开 USR-TCP232-Test-V1.3 串口转网络调试助手，本篇经验只使用右侧的网络调试助手。</p>
<p>1、网络设置区域的协议类型选择“TCP Server”；本地 ip 地址栏通常会在连接上 WiFi 后打开软件时自动更新；本地端口号为“8080”，可改。</p>
<p>2、设置好后点击“开始监听”按钮，重启 Arduino 板子，等待一分钟左右网络调试助手连接对象区域会出现 ESP8266 的 IP，此时代表已经连接上，等待网络数据接收区域显示内容后，数据正常变化实验即完成。  <br></p>
<p><br><img src="https://images-hosting.liuxianyu.cn/posts/arduino-ESP8266/1.jpg" alt>  <br></p>
<p>如果网盘链接挂了可以在百度文库下载或复制 <a href="https://wenku.baidu.com/view/7761a44a302b3169a45177232f60ddccda38e69c.html" target="_blank" rel="noopener">ESP8266通过Arduino自动发送数据代码</a> 文本文件，其余软件可自行百度下载。</p>
<blockquote>
<ul>
<li>1、连接到网络调试助手的时间较长，耐心等待；</li>
<li>2、电脑和ESP8266连接同一WiFi，即局域网内完成实验;</li>
<li>3、可以用手机开热点，这样可以看到ESP8266是否连接上WiFi。</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>大学</category>
        <category>Arduino</category>
      </categories>
      <tags>
        <tag>Arduino</tag>
      </tags>
  </entry>
  <entry>
    <title>轻松搞定 Android 开发环境的搭建</title>
    <url>/article/Android-IDE.html</url>
    <content><![CDATA[<p>在Windows下安装Android的开发环境虽说不简单但也算不上复杂，本篇经验写给同为小白的朋友们，随笔步骤经作者测试正确可行，希望对准备进入Android开发的你有所帮助。</p>
<a id="more"></a>
<h3 id="一-jdk-的安装与环境变量的配置"><a class="header-anchor" href="#一-jdk-的安装与环境变量的配置">¶</a>一、JDK 的安装与环境变量的配置</h3>
<p>选择 <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Oracle公司官网</a> 下载对应版本的 JDK 或者直接选择百度“JDK”下载。安装时 jre 尽量和 jdk 的文件夹分开，安装完成后出现两个文件夹 jdk 和 jre，接下来我们需要设置三个系统变量，右击	我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 系统设置 -&gt; 环境变量 -&gt; 系统变量，三个系统变量分别是：</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>变量值</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>JAVA_HOME</td>
<td><code>E:\java\jdk1.8.0_121</code></td>
<td>变量值为JDK在你电脑上的安装路径</td>
</tr>
<tr>
<td>CLASSPATH</td>
<td><code>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar</code></td>
<td>注意变量值字符串前面有一个&quot;.&quot;表示当前目录</td>
</tr>
<tr>
<td>Path</td>
<td><code>;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</code></td>
<td>Path属性已存在，可直接编辑，在原来变量后追加即可</td>
</tr>
</tbody>
</table>
<ul>
<li>变量值中如果已经有内容，用 ; 隔开；</li>
<li>测试是否安装配置成功：Win + R，输入 cmd，按 Enter 继续，输入 javac，按 Enter，出现相关内容即证明安装配置成功。</li>
</ul>
<h3 id="二-下载安装-eclipse"><a class="header-anchor" href="#二-下载安装-eclipse">¶</a>二、下载安装 Eclipse</h3>
<p>Eclipse 是一种 Java 应用程序及 Android 开发的 IDE（集成开发环境），不需要安装，下载后解压，剪切 eclipse 文件夹到你想安装的地方，打开时设置你的工作目录即日后各种项目的存放位置，此时已完成了普通 Java 应用程序的开发环境准备。本篇经验下载的是 <a href="https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/oxygen/2/eclipse-jee-oxygen-2-win32-x86_64.zip" target="_blank" rel="noopener">Eclipse IDE for Java EE Developers</a> 版本，点击 <code>DOWNLOAD</code> 下载，然后等待浏览器下载。</p>
<h3 id="三-下载安装-android-sdk"><a class="header-anchor" href="#三-下载安装-android-sdk">¶</a>三、下载安装 Android SDK</h3>
<h4 id="1-下载"><a class="header-anchor" href="#1-下载">¶</a>1、下载</h4>
<p>我们要使用 Eclipse 来开发 Android 应用程序，那么需要下载 Android SDK 和在 Eclipse 中安装 ADT 插件，这个插件能让 Eclipse 和 Android SDK 关联起来。</p>
<p>打开 <a href="http://developer.android.com/sdk/index.html" target="_blank" rel="noopener">http://developer.android.com/sdk/index.html</a>（没有梯子打不开）可下载 Android SDK。或者从下面两个网站下载<br>
<a href="http://www.androiddevtools.cn/" target="_blank" rel="noopener">http://www.androiddevtools.cn/</a></p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/Android-IDE/6.png" alt></p>
<p><a href="http://tools.android-studio.org/index.php/sdk/" target="_blank" rel="noopener">http://tools.android-studio.org/index.php/sdk/</a></p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/Android-IDE/7.png" alt></p>
<h4 id="2-安装"><a class="header-anchor" href="#2-安装">¶</a>2、安装</h4>
<p>下载完成后双击“installer_r24.4.1-windows.exe”，选择解压文件夹，完成后双击“SDK Manager”，加载可安装的安卓版本。下面是我的一些安装选项，仅供参考：</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="https://images-hosting.liuxianyu.cn/posts/Android-IDE/1.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/Android-IDE/2.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/Android-IDE/3.png" alt></div></div></div></div>
<ul>
<li>1、建议使用旧手机测试程序，旧手机是什么版本就勾选什么版本，无需多装其他版本，不宜贪多;</li>
<li>2、选好后点击安装，同意，开始安装，这一步非常耗时也经常出现安装失败的情况，安装失败的安装包重新勾选再安装。</li>
</ul>
<h4 id="3-安装-adt-离线安装"><a class="header-anchor" href="#3-安装-adt-离线安装">¶</a>3、安装 ADT（离线安装）</h4>
<p>官网各版本下载链接：（本篇经验使用的是 ADT-23.0.6）</p>
<p><a href="https://dl.google.com/android/ADT-23.0.6.zip" target="_blank" rel="noopener">https://dl.google.com/android/ADT-23.0.6.zip</a><br>
<a href="https://dl.google.com/android/ADT-23.0.4.zip" target="_blank" rel="noopener">https://dl.google.com/android/ADT-23.0.4.zip</a><br>
<a href="https://dl.google.com/android/ADT-23.0.3.zip" target="_blank" rel="noopener">https://dl.google.com/android/ADT-23.0.3.zip</a><br>
<a href="https://dl.google.com/android/ADT-23.0.2.zip" target="_blank" rel="noopener">https://dl.google.com/android/ADT-23.0.2.zip</a><br>
<a href="https://dl.google.com/android/ADT-23.0.0.zip" target="_blank" rel="noopener">https://dl.google.com/android/ADT-23.0.0.zip</a></p>
<p>启动 Eclipse，Help -&gt; Install New Software，点击 Add… 按钮，名称可以用 ADT，然后点击 Archive 选择 ADT 的压缩包，点击 OK 选择要安装的工具，下一步。安装完成重启 Eclipse。可不进行：在 Eclipse 中点击 Window -&gt; Preferences…，选择 Android：配置好你的 SDK 路径，则会出现刚才在 SDK 中安装的各平台包。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/Android-IDE/5.png" alt></p>
<p>到这里，Windows 系统上的 Android 开发环境就搭建完成了。在 Eclipse 中打开 File -&gt; New -&gt; Project 新建一个项目的时候，就可以看到建立 Android 项目的选项。测试运行程序可以连接 USB 线使用真机（需打开开发者模式中的 USB 调试功能），也可以使用此时已安装好的 Android SDK and AVD Manager 来创建虚拟设备。</p>
<p><img src="https://images-hosting.liuxianyu.cn/posts/Android-IDE/4.png" alt></p>
<ul>
<li>下面的步骤可能已经不需要了：因为国内有墙，有时候会出现加载安卓版本失败的情况。从万能的百度搜索上，找到了解决这个问题的方法：</li>
</ul>
<h4 id="1-更改-host-文件"><a class="header-anchor" href="#1-更改-host-文件">¶</a>(1).更改 host 文件</h4>
<p>在 C:\Windows\System32\drivers\etc 目录下，用记事本打开“hosts”文件，将下面两行信息加到 hosts 文件的末尾，保存退出。</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">203.208.46.146 dl.google.com  </span><br><span class="line">203.208.46.146 dl-ssl.google.com</span><br></pre></td></tr></table></figure>
<h4 id="2-将-sdk-manage-上的-https-请求更改成-http-请求"><a class="header-anchor" href="#2-将-sdk-manage-上的-https-请求更改成-http-请求">¶</a>(2).将 SDK Manage 上的 https 请求更改成 http 请求</h4>
<p>打开 SDK Manager，Tools -&gt; Options，勾选 Force https://…sources to be fetched using http://… ，如图。退出重新打开 SDK Manager，一般情况下就可以正常加载了。</p>
<blockquote>
<ul>
<li>安装多个安卓版本会十分耗时，耐心等待；</li>
<li>建议安装测试设备对应的安卓版本或其他目标版本，多个版本很占用空间，不宜贪多。</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>大学</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Jekyll 搭建个人博客【转载】</title>
    <url>/article/jekyll-tutorials.html</url>
    <content><![CDATA[<h1 id="原作者leopard"><a class="header-anchor" href="#原作者leopard">¶</a><a href="http://baixin.io" target="_blank" rel="noopener">原作者leopard</a></h1>
<p>  Jekyll 是一个简单的博客形态的静态站点生产机器。它有一个模版目录，其中包含原始文本格式的文档，通过 Markdown （或者 Textile） 以及 Liquid 转化成一个完整的可发布的静态网站，你可以发布在任何你喜爱的服务器上。Jekyll 也可以运行在 GitHub Page 上，也就是说，你可以使用 GitHub 的服务来搭建你的项目页面、博客或者网站，而且是完全免费的。<br>
  使用 Jekyll 搭建博客之前要确认下本机环境，Git 环境（用于部署到远端）、<a href="http://www.ruby-lang.org/en/downloads/" target="_blank" rel="noopener">Ruby</a> 环境（Jekyll 是基于 Ruby 开发的）、包管理器 <a href="http://rubygems.org/pages/download" target="_blank" rel="noopener">RubyGems</a>如果你是 Mac 用户，你就需要安装 Xcode 和 Command-Line Tools了。下载方式 Preferences → Downloads → Components。<br>
  Jekyll 是一个免费的简单静态网页生成工具，可以配合第三方服务例如： Disqus（评论）、多说(评论) 以及分享 等等扩展功能，Jekyll 可以直接部署在 Github（国外） 或 Coding（国内） 上，可以绑定自己的域名。<a href="https://www.jekyll.com.cn/" target="_blank" rel="noopener">Jekyll中文文档</a>、<a href="https://jekyllrb.com/" target="_blank" rel="noopener">Jekyll英文文档</a>、<a href="http://jekyllthemes.org/" target="_blank" rel="noopener">Jekyll主题列表</a>。</p>
<h3 id="jekyll-环境配置"><a class="header-anchor" href="#jekyll-环境配置">¶</a>Jekyll 环境配置</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem install jekyll</span><br><span class="line">jekyll new myBlog</span><br><span class="line">cd myBlog</span><br><span class="line">jekyll serve</span><br></pre></td></tr></table></figure>
<p>  在浏览器里输入： <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>，就可以看到你的博客效果了。</p>
<p>so easy !</p>
<h3 id="目录结构"><a class="header-anchor" href="#目录结构">¶</a>目录结构</h3>
<p>  Jekyll 的核心其实是一个文本转换引擎。它的概念其实就是： 你用你最喜欢的标记语言来写文章，可以是 Markdown，也可以是 Textile,或者就是简单的 HTML, 然后 Jekyll 就会帮你套入一个或一系列的布局中。在整个过程中你可以设置URL路径, 你的文本在布局中的显示样式等等。这些都可以通过纯文本编辑来实现，最终生成的静态页面就是你的成品了。</p>
<p>  一个基本的 Jekyll 网站的目录结构一般是像这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── _includes</span><br><span class="line">|   ├── footer.html</span><br><span class="line">|   └── header.html</span><br><span class="line">├── _layouts</span><br><span class="line">|   ├── default.html</span><br><span class="line">|   ├── post.html</span><br><span class="line">|   └── page.html</span><br><span class="line">├── _posts</span><br><span class="line">|   └── 2016-10-08-welcome-to-jekyll.markdown</span><br><span class="line">├── _sass</span><br><span class="line">|   ├── _base.scss</span><br><span class="line">|   ├── _layout.scss</span><br><span class="line">|   └── _syntax-highlighting.scss</span><br><span class="line">├── about.md</span><br><span class="line">├── css</span><br><span class="line">|   └── main.scss</span><br><span class="line">├── feed.xml</span><br><span class="line">└── index.html</span><br></pre></td></tr></table></figure>
<p>  这些目录结构以及具体的作用可以参考 <a href="http://jekyll.com.cn/docs/structure/" target="_blank" rel="noopener">官网文档</a>。进入 _config.yml 里面，修改成你想看到的信息，重新 jekyll server ，刷新浏览器就可以看到你刚刚修改的信息了。到此，博客初步搭建算是完成了，</p>
<h3 id="博客部署到远端"><a class="header-anchor" href="#博客部署到远端">¶</a>博客部署到远端</h3>
<p>  我这里讲的是部署到 Github Page 创建一个 github 账号，然后创建一个跟你账户名一样的仓库，如我的 github 账户名叫 <a href="https://github.com/leopardpan" target="_blank" rel="noopener">leopardpan</a>，我的 github 仓库名就叫 <a href="https://github.com/leopardpan/leopardpan.github.io" target="_blank" rel="noopener">leopardpan.github.io</a>，创建好了之后，把刚才建立的 myBlog 项目 push 到 username.github.io仓库里去（username指的是你的github用户名），检查你远端仓库已经跟你本地 myBlog 同步了，然后你在浏览器里输入 <a href="http://username.github.io" target="_blank" rel="noopener">username.github.io</a> ，就可以访问你的博客了。</p>
<h3 id="编写文章"><a class="header-anchor" href="#编写文章">¶</a>编写文章</h3>
<p>  所有的文章都是 _posts 目录下面，文章格式为 mardown 格式，文章文件名可以是 .mardown 或者 .md。编写一篇新文章很简单，你可以直接从 _posts/ 目录下复制一份出来 <code>2016-10-16-welcome-to-jekyll副本.markdown</code> ，修改名字为 2016-10-16-article1.markdown ，注意：文章名的格式前面必须为 2016-10-16- ，日期可以修改，但必须为 年-月-日- 格式，后面的 article1 是整个文章的连接 URL，如果文章名为中文，那么文章的连接URL就会变成这样的：<a href="http://baixin.io/2015/08/%E6%90%AD%E5/" target="_blank" rel="noopener">http://baixin.io/2015/08/搭�/</a> ， 所以建议文章名最好是英文的或者阿拉伯数字。 双击 2016-10-16-article1.markdown 打开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: post</span><br><span class="line">title:  &quot;Welcome to Jekyll!&quot;</span><br><span class="line">date:   2016-10-16 11:29:08 +0800</span><br><span class="line">categories: jekyll update</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">正文...</span><br></pre></td></tr></table></figure>
<p>title: 显示的文章名， 如：title: 我的第一篇文章<br>
date:  显示的文章发布日期，如：date: 2016-10-16<br>
categories: tag标签的分类，如：categories: 随笔</p>
<p>注意：文章头部格式必须为上面的，… 就是文章的正文内容。<br>
我写文章使用的是 Sublime Text2 编辑器，如果你对 markdown 语法不熟悉的话，可以看看<a href="https://www.zybuluo.com/" target="_blank" rel="noopener">作业部落的教程</a></p>
<h3 id="使用我的博客模板"><a class="header-anchor" href="#使用我的博客模板">¶</a>使用我的博客模板</h3>
<p>  虽然博客部署完成了，你会发现博客太简单不是你想要的，如果你喜欢我的模板的话，可以使用我的模板。首先你要获取的我博客，<a href="https://github.com/leopardpan/leopardpan.github.io.git" target="_blank" rel="noopener">Github项目地址</a>，你可以直接<a href="https://github.com/leopardpan/leopardpan.github.io/archive/master.zip" target="_blank" rel="noopener">点击下载博客</a>，<a href="http://xn--leopardpan-rl5q5588c.github.io/" target="_blank" rel="noopener">进去leopardpan.github.io/</a> 目录下， 使用命令部署本地服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ jekyll server</span><br></pre></td></tr></table></figure>
<h3 id="如果你本机没配置过任何jekyll的环境-可能会报错"><a class="header-anchor" href="#如果你本机没配置过任何jekyll的环境-可能会报错">¶</a>如果你本机没配置过任何jekyll的环境，可能会报错</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/Users/xxxxxxxx/.rvm/rubies/ruby-2.2.2/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require&apos;: cannot load such file -- bundler (LoadError)</span><br><span class="line">	from /Users/xxxxxxxx/.rvm/rubies/ruby-2.2.2/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require&apos;</span><br><span class="line">	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/gems/jekyll-3.3.0/lib/jekyll/plugin_manager.rb:34:in `require_from_bundler&apos;</span><br><span class="line">	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/gems/jekyll-3.3.0/exe/jekyll:9:in `&lt;top (required)&gt;&apos;</span><br><span class="line">	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/bin/jekyll:23:in `load&apos;</span><br><span class="line">	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/bin/jekyll:23:in `&lt;main&gt;&apos;</span><br><span class="line">	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/bin/ruby_executable_hooks:15:in `eval&apos;</span><br><span class="line">	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/bin/ruby_executable_hooks:15:in `&lt;main&gt;&apos;</span><br></pre></td></tr></table></figure>
<p>  原因： 没有安装 bundler ，执行安装 bundler 命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gem install bundler</span><br></pre></td></tr></table></figure>
<p>  提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Fetching: bundler-1.13.5.gem (100%)</span><br><span class="line">Successfully installed bundler-1.13.5</span><br><span class="line">Parsing documentation for bundler-1.13.5</span><br><span class="line">Installing ri documentation for bundler-1.13.5</span><br><span class="line">Done installing documentation for bundler after 5 seconds</span><br><span class="line">1 gem installed</span><br></pre></td></tr></table></figure>
<p>  再次执行 $ jekyll server  ，提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Could not find proper version of jekyll (3.1.1) in any of the sources</span><br><span class="line">Run `bundle install` to install missing gems.</span><br></pre></td></tr></table></figure>
<p>  跟着提示运行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bundle install</span><br></pre></td></tr></table></figure>
<p>  这个时候你可能会发现 bundle install 运行卡主不动了。如果很长时间都没任何提示的话，你可以尝试修改 gem 的 source：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gem sources --remove https://rubygems.org/</span><br><span class="line">$ gem sources -a http://ruby.taobao.org/</span><br><span class="line">$ gem sources -l</span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">http://ruby.taobao.org</span><br></pre></td></tr></table></figure>
<p>  再次执行命令 $ bundle install，发现开始有动静了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Fetching gem metadata from https://rubygems.org/...........</span><br><span class="line">Fetching version metadata from https://rubygems.org/..</span><br><span class="line">Fetching dependency metadata from https://rubygems.org/.</span><br><span class="line">。。。</span><br><span class="line">Installing jekyll-watch 1.3.1</span><br><span class="line">Installing jekyll 3.1.1</span><br><span class="line">Bundle complete! 3 Gemfile dependencies, 17 gems now installed.</span><br><span class="line">Use `bundle show [gemname]` to see where a bundled gem is installed.</span><br></pre></td></tr></table></figure>
<p>  bundler安装完成，后再次启动本地服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ jekyll server</span><br></pre></td></tr></table></figure>
<p>  继续报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Configuration file: /Users/tendcloud-Caroline/Desktop/leopardpan.github.io/_config.yml</span><br><span class="line">  Dependency Error: Yikes! It looks like you don&apos;t have jekyll-sitemap or one of its dependencies installed. In order to use Jekyll as currently configured, you&apos;ll need to install this gem. The full error message from Ruby is: &apos;cannot load such file -- jekyll-sitemap&apos; If you run into trouble, you can find helpful resources at http://jekyllrb.com/help/!</span><br><span class="line">jekyll 3.1.1 | Error:  jekyll-sitemap</span><br></pre></td></tr></table></figure>
<p>  表示 当前的 jekyll 版本是 3.1.1 ，无法使用 jekyll-sitemap，解决方法有两个：</p>
<blockquote>
<p>1、打开当前目录下的 _config.yml 文件，把 gems: [jekyll-paginate,jekyll-sitemap] 换成 gems: [jekyll-paginate] ，也就是去掉jekyll-sitemap。<br>
2、升级 jekyll 版本，我当前的是 jekyll 3.1.2 。</p>
</blockquote>
<p>  修改完成后保存配置，再次执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ jekyll server</span><br></pre></td></tr></table></figure>
<p>  提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Configuration file: /Users/baixinpan/Desktop/OpenSource/Mine/Page-Blog/leopardpan.github.io-github/_config.yml</span><br><span class="line">            Source: /Users/baixinpan/Desktop/OpenSource/Mine/Page-Blog/leopardpan.github.io-github</span><br><span class="line">       Destination: /Users/baixinpan/Desktop/OpenSource/Mine/Page-Blog/leopardpan.github.io-github/_site</span><br><span class="line"> Incremental build: disabled. Enable with --incremental</span><br><span class="line">      Generating...</span><br><span class="line">                    done in 0.901 seconds.</span><br><span class="line"> Auto-regeneration: enabled for &apos;/Users/baixinpan/Desktop/OpenSource/Mine/Page-Blog/leopardpan.github.io-github&apos;</span><br><span class="line">Configuration file: /Users/baixinpan/Desktop/OpenSource/Mine/Page-Blog/leopardpan.github.io-github/_config.yml</span><br><span class="line">    Server address: http://127.0.0.1:4000/</span><br><span class="line">  Server running... press ctrl-c to stop.</span><br></pre></td></tr></table></figure>
<p>  表示本地服务部署成功。在浏览器输入 <a href="127.0.0.1:4000" target="_blank" rel="noopener">127.0.0.1:4000</a> ， 就可以看到<a href="http://baixin.io" target="_blank" rel="noopener">baixin.io</a>博客效果了。</p>
<h3 id="修改成你自己的博客"><a class="header-anchor" href="#修改成你自己的博客">¶</a>修改成你自己的博客</h3>
<blockquote>
<ul>
<li>如果你想使用我的模板请把 _posts/ 目录下的文章都去掉。</li>
<li>修改 _config.yml 文件里面的内容为你自己的。</li>
</ul>
</blockquote>
<p>  然后使用 git push 到你自己的仓库里面去，检查你远端仓库，在浏览器输入 <a href="http://username.github.io" target="_blank" rel="noopener">username.github.io</a> 就会发现，你有一个漂亮的主题模板了。</p>
<h4 id="如果想修改博客样式却不知道怎么修改-可以直接在评论里给我提问"><a class="header-anchor" href="#如果想修改博客样式却不知道怎么修改-可以直接在评论里给我提问">¶</a>【 如果想修改博客样式却不知道怎么修改，可以直接在评论里给我提问 】</h4>
<h3 id="为什么要是用-jekyll"><a class="header-anchor" href="#为什么要是用-jekyll">¶</a>为什么要是用 Jekyll</h3>
<p>  使用了 Jekyll 你会发现如果你想使用多台电脑发博客都很方便，只要把远端 github 仓库里的博客 clone 下来，写文章后再提交就可以了，Hexo 由于远端提交的是静态网页，所有无法直接写 Markdown 的文章。后面会继续介绍，在我的博客基础上，如何修改成你自己喜欢的 Style，欢迎继续关注我博客的更新。</p>
<h3 id="q-a"><a class="header-anchor" href="#q-a">¶</a>Q&amp;A</h3>
<blockquote>
<p>问题：最近很多朋友使用我的模板报警告：The CNAME <code>baixin.io</code> is already taken<br>
解决：把CNAME里面的baixin.io修改成你自己的域名，如果你暂时没有域名，CNAME里面就什么都不用谢。（之前没人反馈过这个问题，应该是github page最近才最的限制。）</p>
</blockquote>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>小思</title>
    <url>/article/thinking.html</url>
    <content><![CDATA[<p>小思</p>
<a id="more"></a>
<p>  这是我 QQ 空间仅剩的两篇日志之一，那时候有好几篇日志都是转载的，但是渐渐不在 QQ 空间发什么内容了，这样，生活中的那些人就琢磨不到我的内心了。尽管如此，心里想说的话还是有的，在这里记录一下吧。</p>
<p>  以前那份痴情的执着,怎么没了？苦笑，因为，快长大了。</p>
<p>  不知从何时起，失去了等待和爱一个人的能力，然而都明白，又有谁愿意停下脚步，来安静的看看一个人的伤疤，听听他的苦衷，慢慢的了解他呢？开始学会贮藏自己的情感，少一点期盼，少一点失望，少一点偏执，少一点伤害。成长剥夺了曾经那些矫情又幼稚的情感、经历，冷却了心里的温度，很难再热起来。终于学会了聪明，不会对一个人倾之所有，不会再轻易对一个人敞开心扉，不会再对一个人倾注过多的时间和精力。长大了，便已然不是那个肆意挥霍时间和精力的少年。优胜劣汰的现实社会，有那么优秀的人仿佛麋鹿一般在用力奔跑,要不回头的向前跑，没有时间驻足，没有时间恻隐，必须把更多的人落在身后，最无可奈何的是必须如此才能有一个好一点生活。</p>
<p>  有那么一段时光，总是会感慨生命中来来去去的人，会想起、会思念、会矫情，但片刻之后便会回归自己的生活，马不停蹄的奔向自己的未来。也不知是摒弃了矫情，还是学会了冷漠。我想，只有放肆的矫情过，疯狂过，长大后才会明白，人的情感，其实都是有期限的，爱、憎、恨，这世间所有的情感，都有期限，过了这个期限，一切都化作似水流年。伤情是因为遗憾，因为不舍，因为对于感情长久的天真，而过了这个期限，已然不会再如此矫情了。成长总会教人放下和忘记，而曾经那份伤情和遗憾的情愫，便是对过往青春最好的祭奠。我们将来终其一生寻找的无非是那个甘愿停下脚步，为你驻足的人。<br>
　　<br>
  逐渐懂得，生命的时光，越走越短。真正进入生命的人，也越来越少。曾经根深蒂固的情感，也可能慢慢的剥离，直到从生活的轨迹中弥散。终有一天，会开始习惯告别，习惯真的就再也不见。</p>
<p>  终会懂得，人的成长，注定是一场孤独的旅途。学会在生命里那个寒冷的冬天，一个人孤独的过冬。不奢求别人，不依赖别人，自己温暖自己，自己给自己力量和勇气。我们都一样，要学会承受生命的孤独与无助，挺过去才能看见美好和繁华。也许永远，实在是太远了，也许人生真的无法十全十美吧！我的一个朋友说她自己很自私，与男朋友相处时也是，但我感觉似乎不是如此。当她没有那种感觉后，什么都对，但是，感觉不对。我知道，这种只要感觉的人是相处中是最难成功的，我也想过去逼问她，到底是怎样的感觉呢？</p>
<p>  终究还是没问，我想她也是不想说，或者她自己也说不清。或许她只是希望，在她不开心的时候，他可以让她觉得他会一直在她身边，去深深地理解。我忽然觉得有一丝感动，在这个心里的光无法穿越的城市里，感觉到了一丝温情的光。</p>
<p>  我想，终有一天，我的生命里也会出现这么一个人，她接受我波澜不惊的爱情，陪着我去看世界的风景，许给我一世的欢颜。</p>
]]></content>
      <categories>
        <category>小思</category>
      </categories>
  </entry>
  <entry>
    <title>优易口</title>
    <url>/article/you.html</url>
    <content><![CDATA[<p>小思</p>
<a id="more"></a>
<p>  这是我 QQ 空间仅剩的两篇日志之一，那时候有好几篇日志都是转载的，但是渐渐不在 QQ 空间发什么内容了，这样，生活中的那些人就琢磨不到我的内心了。尽管如此，心里想说的话还是有的，在这里记录一下吧。</p>
<p>  今天是 2015 年 1 月  19号，得空来写一些心里的想法和回忆，因为没有人说话。人是孤独的，没有人可以像你自己一样知道你所知道的一切，一些烦恼似乎在换了倾诉对象后就无法排除了。比如说，感情。</p>
<p>  似乎我们现在谈爱情为时过早，所以予之为&quot;感情&quot;，但我们心里确实有那种令人愉悦的感觉，即便痛过，依旧不舍得丢弃。当你听到和你在一起的人对你说&quot;我不喜欢你&quot;，你觉得你的心很痛，对，很痛。可是，他只是在和你开一个玩笑，接下来他说的是&quot;因为我爱你！&quot;暂不谈我们能否承担起&quot;爱&quot;这个字，只知道你又喜笑颜开，你的喜怒哀乐全都被他掌控，但你依然发自内心的高兴。这是为什么？只是因为你喜欢他？不，也可以是他喜欢你，而你意在其他，只是为了不辜负他的一番好意，逢场作戏，却惹得大家分隔，该死。也算作是痛吧。</p>
<p>  自此，你便是独来独往，在需要人帮助、哭诉之时，还是你一个人去面对，面对自己种下的因果。开心是短，痛苦为长。捧着常规来劝别人：忘记便得新生活，俨然一副人生导师的模样。殊不知，自己也尚未懂得，总是带着回忆过往的心情，不怕痛，不怕苦，走在令人伤感的地方。或许，明知如此只会更加痛苦，但，即便痛，也不愿意走出来。</p>
<p>  也罢，痛苦不一定就是坏事，myself 说过 “What pains us trains us.”</p>
<p>  明明带着伤，却还可以和你们说笑，不是忘却，而是铭记，铭记于心。面对再也回不去了，放弃挣扎，即使一个人生活，你也可以有欢声笑语，只不过不要憋坏了自己，空气也可以陪着你聊聊天。孤独是伤人利器，分别后怕起了热闹，怕起了喝酒。也并不是真的不想和大家一起玩，也有试过忘我的疯狂，可是曲终人散后呢，只有自己带着醉意晃荡在街头，偶尔拉人来陪，可是你说不出来，还是压在心头。你做错在先，承受吧，你一开始的选择就是错的，因为你还年轻。</p>
<p>  不必说抱歉，这是我们成长中的经历，你也可以看之为财富。</p>
]]></content>
      <categories>
        <category>小思</category>
      </categories>
  </entry>
</search>
