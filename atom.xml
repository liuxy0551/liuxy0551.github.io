<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘先玉</title>
  
  <subtitle>知易行难</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liuxianyu.cn/"/>
  <updated>2023-05-30T16:55:42.000Z</updated>
  <id>https://liuxianyu.cn/</id>
  
  <author>
    <name>liuxy0551</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git 常用命令（十四）—— Git 批量删除分支</title>
    <link href="https://liuxianyu.cn/article/git-order-n.html"/>
    <id>https://liuxianyu.cn/article/git-order-n.html</id>
    <published>2023-05-30T16:55:42.000Z</published>
    <updated>2023-05-30T16:55:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>  在日常工作中，每个需求会单独切一个分支，通过 MR 合入公共分支的同时可以在 MR 勾选删除源分支，日积月累就会导致本地有很多分支且对应的远程分支已经被删除。这里记录下如何快速清理这些分支。</p><a id="more"></a><p><strong>清理前</strong></p><p>  确认即将清理的本地分支是已经 merged 的分支，避免丢失分支。同时分支名有一定规律则方便批量删除。</p><p><img src="https://images-hosting.liuxianyu.cn/posts/git-order/4.png" alt></p><h3 id="批量删除本地分支"><a class="header-anchor" href="#批量删除本地分支">¶</a>批量删除本地分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch |grep <span class="string">'feat_5.2.x_'</span> |xargs git branch -D</span><br></pre></td></tr></table></figure><p><img src="https://images-hosting.liuxianyu.cn/posts/git-order/5.png" alt></p><h3 id="批量删除远程分支"><a class="header-anchor" href="#批量删除远程分支">¶</a>批量删除远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r| grep <span class="string">'feat_5.2.x_'</span> | sed <span class="string">'s/origin\///g'</span> | xargs -I &#123;&#125; git push origin :&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images-hosting.liuxianyu.cn/posts/git-order/6.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  在日常工作中，每个需求会单独切一个分支，通过 MR 合入公共分支的同时可以在 MR 勾选删除源分支，日积月累就会导致本地有很多分支且对应的远程分支已经被删除。这里记录下如何快速清理这些分支。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://liuxianyu.cn/categories/git/"/>
    
    
      <category term="git" scheme="https://liuxianyu.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>在服务器上自建图床</title>
    <link href="https://liuxianyu.cn/article/images-hosting.html"/>
    <id>https://liuxianyu.cn/article/images-hosting.html</id>
    <published>2023-03-10T22:37:22.000Z</published>
    <updated>2023-03-10T22:37:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>  至此，博客的图片资源已经经历 github -&gt; 阿里云服务器(1M 带宽) -&gt; 七牛云 -&gt; gitee -&gt; 腾讯云服务器(4M 带宽)，一直没有一个稳定的方案，上一次使用的还是 Gitee 图床，可以点击 <a href="https://liuxianyu.cn/article/gitee-image-hosting.html" target="_black">Gitee 图床【已不可用】</a> 查看当时的过程。</p><a id="more"></a><p>  接下来通过把图片等静态资源放到服务器上，再通过 nginx 转发 + 域名生成固定格式的图片链接，记录下过程。</p><h4 id="1-解析域名"><a class="header-anchor" href="#1-解析域名">¶</a>1、解析域名</h4><p>  在对应的服务器控制台解析域名，我这里使用的是 <code>images-hosting.liuxianyu.cn</code>。</p><h4 id="2-申请并下载-ssl-证书"><a class="header-anchor" href="#2-申请并下载-ssl-证书">¶</a>2、申请并下载 SSL 证书</h4><p>  因为博客使用的是 <code>https</code>，所以需要申请一个 SSL 证书，我的域名是在阿里云购买的，每年赠送 20个 免费的证书。申请完成后下载 Nginx 版本的 SSL 证书，重命名并放到服务器指定路径下。</p><h4 id="3-服务器创建文件夹"><a class="header-anchor" href="#3-服务器创建文件夹">¶</a>3、服务器创建文件夹</h4><p>  需要进行的操作：创建 deploy 用户、添加本机的 SSH 公钥到服务器、创建文件夹等</p><ul><li><p>创建 deploy 用户并设置密码，把 deploy 用户添加到 sudo 用户组中 - 参考 <a href="https://liuxianyu.cn/article/cent-os-base.html#%E4%BA%8C-%E6%B7%BB%E5%8A%A0%E6%9C%AC%E6%9C%BA%E7%9A%84-ssh-%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8">Cent OS 基础环境搭建 - 添加 deploy 用户</a></p></li><li><p>添加本机的 SSH 公钥到服务器 - 参考 <a href="https://liuxianyu.cn/article/cent-os-base.html#%E4%BA%8C-%E6%B7%BB%E5%8A%A0%E6%9C%AC%E6%9C%BA%E7%9A%84-ssh-%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8">Cent OS 基础环境搭建 - 添加本机的 SSH 到服务器</a></p></li><li><p>在服务器上新建一个 <code>images-hosting</code> 文件夹，用来存储图片等静态资源，并授权给 deploy 用户。</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /mnt/projects/images-hosting</span><br><span class="line">cd /mnt/projects/</span><br><span class="line">sudo chown -R deploy:deploy images-hosting</span><br></pre></td></tr></table></figure><h4 id="4-本地环境变量"><a class="header-anchor" href="#4-本地环境变量">¶</a>4、本地环境变量</h4><p>  在本地添加远程服务器的环境变量，避免服务器 IP 暴露在公网。<code>vim ~/.zshrc</code> 添加以下内容后执行 <code>source ~/.zshrc</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 腾讯云服务器</span><br><span class="line">export serverIP=&quot;43.139.139.139&quot;</span><br></pre></td></tr></table></figure><h4 id="5-本地图床仓库"><a class="header-anchor" href="#5-本地图床仓库">¶</a>5、本地图床仓库</h4><p>  在 gitee 新建了一个仓库用来做备份，但是由于包含图床内容，gitee 不允许公开仓库。在本地图床仓库中添加 <code>deploy.command</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">echo -e &apos;1、本地压缩资源中...&apos;</span><br><span class="line">gtar -czf images-hosting.tar.gz *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo -e &apos;2、上传压缩包到远程服务器&apos;</span><br><span class="line">scp -P 22 -r images-hosting.tar.gz deploy@$serverIP:/mnt/projects/images-hosting/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo -e &apos;3、在远程服务器解压中...&apos;</span><br><span class="line">ssh deploy@$serverIP &quot;cd /mnt/projects/images-hosting/; tar -xzf images-hosting.tar.gz; rm -rf images-hosting.tar.gz; ls&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo -e &apos;4、删除本地压缩包&apos;</span><br><span class="line">rm -rf images-hosting.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo -e &apos;\n资源已经成功上传到远程服务器啦~&apos;</span><br></pre></td></tr></table></figure><p>  在本地图床仓库中添加 <code>package.json</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;images-hosting&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;在服务器上自建图床 https://liuxianyu.cn/article/images-hosting.html&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;deploy&quot;: &quot;bash deploy.command&quot;,</span><br><span class="line">    &quot;push&quot;: &quot;git add . &amp;&amp; git commit -m &apos;new images&apos; &amp;&amp; git push&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>npm run deploy</code> 可将本地图床仓库中的图片等静态资源上传到远程服务器指定的地址了。<br>执行 <code>npm run push</code> 可以提交到远程 git 仓库。</p><h4 id="6-配置-nginx"><a class="header-anchor" href="#6-配置-nginx">¶</a>6、配置 nginx</h4><p>  配置完成后重启 nginx。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># images-hosting 的 nginx 配置</span><br><span class="line"># http</span><br><span class="line">#server &#123;</span><br><span class="line">#    listen          80;</span><br><span class="line">#    server_name     images-hosting.liuxianyu.cn;</span><br><span class="line">#    root            /mnt/projects/images-hosting;</span><br><span class="line">#</span><br><span class="line">#    location / &#123;</span><br><span class="line">#        try_files $uri $uri/ /index.html;</span><br><span class="line">#    &#125;</span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line"># https</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  images-hosting.liuxianyu.cn;</span><br><span class="line">    root         /mnt/projects/images-hosting;</span><br><span class="line">    ssl_certificate cert/images-hosting.liuxianyu.cn.pem;</span><br><span class="line">    ssl_certificate_key cert/images-hosting.liuxianyu.cn.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>图片资源可以访问啦</strong><br><img src="https://images-hosting.liuxianyu.cn/comment-bg.png" alt></p><h4 id="7-替换博客原有的链接地址"><a class="header-anchor" href="#7-替换博客原有的链接地址">¶</a>7、替换博客原有的链接地址</h4><p>  全局替换 <code>https://gitee.com/liuxy0551/image-hosting/</code> -&gt; <code>https://images-hosting.liuxianyu.cn/</code>，重新部署博客即可恢复图片资源的访问啦。</p><h4 id="8-缺点"><a class="header-anchor" href="#8-缺点">¶</a>8、缺点</h4><ul><li>每次都是上传全量资源，耗时较长</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  至此，博客的图片资源已经经历 github -&amp;gt; 阿里云服务器(1M 带宽) -&amp;gt; 七牛云 -&amp;gt; gitee -&amp;gt; 腾讯云服务器(4M 带宽)，一直没有一个稳定的方案，上一次使用的还是 Gitee 图床，可以点击 &lt;a href=&quot;https://liuxianyu.cn/article/gitee-image-hosting.html&quot; target=&quot;_black&quot;&gt;Gitee 图床【已不可用】&lt;/a&gt; 查看当时的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Blog" scheme="https://liuxianyu.cn/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://liuxianyu.cn/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Cent OS 安装使用 clash</title>
    <link href="https://liuxianyu.cn/article/linux-clash.html"/>
    <id>https://liuxianyu.cn/article/linux-clash.html</id>
    <published>2022-11-12T08:16:46.000Z</published>
    <updated>2022-11-12T08:16:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>  记录下在 Cent OS 中安装使用 clash 的过程。</p><a id="more"></a><h4 id="1-创建目录"><a class="header-anchor" href="#1-创建目录">¶</a>1、创建目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /mnt &amp;&amp; mkdir clash</span><br></pre></td></tr></table></figure><h4 id="2-下载-clash-并解压"><a class="header-anchor" href="#2-下载-clash-并解压">¶</a>2、下载 clash 并解压</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/Dreamacro/clash/releases/download/v1.11.12/clash-linux-amd64-v1.11.12.gz</span><br></pre></td></tr></table></figure><p>  最新版本可在 <a href="https://github.com/Dreamacro/clash/releases" target="_blank" rel="noopener">https://github.com/Dreamacro/clash</a> 查看，执行以下命令解压并将二进制文件重命名为 clash。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip -d clash-linux-amd64-v1.11.12.gz</span><br><span class="line">mv clash-linux-amd64-v1.11.12 clash</span><br></pre></td></tr></table></figure><h4 id="3-下载配置文件"><a class="header-anchor" href="#3-下载配置文件">¶</a>3、下载配置文件</h4><p>  在 clash 二进制文件的目录下执行以下命令下载你的 clash 配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -o config.yaml "配置文件的 url"</span><br></pre></td></tr></table></figure><h4 id="4-启动-clash"><a class="header-anchor" href="#4-启动-clash">¶</a>4、启动 clash</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./clash -d .</span><br></pre></td></tr></table></figure><p>  上述命令会启动 Clash，同时启动 HTTP 代理和 Socks5 代理；在上述命令后加上<code>&amp;</code>，可以后台运行。如果提示权限不足，请执行<code>chmod +x clash</code>。</p><blockquote><p><strong>注意</strong><br>当出现如下报错时，请执行以下命令下载文件并重命名为<code>Country.mmdb</code>，参考：<a href="https://github.com/Dreamacro/clash/issues/854" target="_blank" rel="noopener">clash issue 854</a><br>INFO[0000] Can’t find MMDB, start download</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget "https://raw.githubusercontent.com/wp-statistics/GeoLite2-Country/master/GeoLite2-Country.mmdb.gz"</span><br><span class="line">gzip -d GeoLite2-Country.mmdb.gz</span><br><span class="line">mv GeoLite2-Country.mmdb Country.mmdb</span><br></pre></td></tr></table></figure><h4 id="5-下载静态页面-可选"><a class="header-anchor" href="#5-下载静态页面-可选">¶</a>5、下载静态页面 可选</h4><ul><li>（1）第三方 <a href="https://github.com/haishanh/yacd" target="_blank" rel="noopener">https://github.com/haishanh/yacd</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/haishanh/yacd/archive/gh-pages.zip</span><br><span class="line">unzip gh-pages.zip</span><br><span class="line">rm -rf gh-pages.zip</span><br><span class="line">mv yacd-gh-pages/ clash-dashboard/</span><br></pre></td></tr></table></figure><ul><li>（2）<a href="https://github.com/Dreamacro/clash-dashboard" target="_blank" rel="noopener">https://github.com/Dreamacro/clash-dashboard</a></li></ul><p>  下载后自行 build，使用 dist 文件夹</p><figure class="highlight yaml"><figcaption><span>config.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">secret:</span> <span class="string">''</span> <span class="comment"># 访问密码</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:7891</span> <span class="comment"># 静态页面地址</span></span><br><span class="line"><span class="attr">external-ui:</span> <span class="string">clash-dashboard</span> <span class="comment"># 静态页面文件夹</span></span><br></pre></td></tr></table></figure><p>访问<code>server ip:7891/ui</code>：</p><p><img src="https://images-hosting.liuxianyu.cn/posts/linux-clash/1.png" alt></p><h4 id="6-启用-停用代理"><a class="header-anchor" href="#6-启用-停用代理">¶</a>6、启用/停用代理</h4><figure class="highlight shell"><figcaption><span>启用临时代理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=127.0.0.1:7890</span><br><span class="line">export http_proxys=127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>可以通过<code>cat $http_proxy</code>来查看是否启用了临时代理</p><figure class="highlight shell"><figcaption><span>停用临时代理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unset http_proxy</span><br><span class="line">unset https_proxy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  记录下在 Cent OS 中安装使用 clash 的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Cent OS" scheme="https://liuxianyu.cn/categories/Cent-OS/"/>
    
    
      <category term="Linux" scheme="https://liuxianyu.cn/tags/Linux/"/>
    
      <category term="Cent OS" scheme="https://liuxianyu.cn/tags/Cent-OS/"/>
    
  </entry>
  
  <entry>
    <title>安装 on-my-zsh 和常用插件</title>
    <link href="https://liuxianyu.cn/article/on-my-zsh.html"/>
    <id>https://liuxianyu.cn/article/on-my-zsh.html</id>
    <published>2022-11-11T20:31:23.000Z</published>
    <updated>2022-11-11T20:31:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>  最近之前买的三年服务器到期了，新买了腾讯云的服务器，Cent OS 7.6，记录下安装<code>oh-my-zsh</code>及常用插件的过程，MacOS 通用。</p><a id="more"></a><h4 id="1-查看当前-shell"><a class="header-anchor" href="#1-查看当前-shell">¶</a>1、查看当前 shell</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><h4 id="2-安装-zsh"><a class="header-anchor" href="#2-安装-zsh">¶</a>2、安装 zsh</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zsh -y</span><br></pre></td></tr></table></figure><h4 id="3-查看已经安装的-shell"><a class="header-anchor" href="#3-查看已经安装的-shell">¶</a>3、查看已经安装的 shell</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><h4 id="4-切换-zsh"><a class="header-anchor" href="#4-切换-zsh">¶</a>4、切换 zsh</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h4 id="5-安装-git"><a class="header-anchor" href="#5-安装-git">¶</a>5、安装 git</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git -y</span><br></pre></td></tr></table></figure><h4 id="6-安装-oh-my-zsh"><a class="header-anchor" href="#6-安装-oh-my-zsh">¶</a>6、安装 oh-my-zsh</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</span><br></pre></td></tr></table></figure><p>  由于网络原因，上述命令可能无法执行，此时新建一个<code>install.sh</code>脚本文件，复制 <a href="https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh" target="_blank" rel="noopener">ohmyzsh/install.sh</a> 的内容，然后执行<code>bash install.sh</code>命令即可。</p><h4 id="8-下载插件"><a class="header-anchor" href="#8-下载插件">¶</a>8、下载插件</h4><p>  <code>oh-my-zsh</code> 有很多的插件：<a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins" target="_blank" rel="noopener">plugins</a>，我常用的有 z、cp、zsh-autosuggestions、zsh-syntax-highlighting，它们的功能分别是跳转常用目录、cp 通过<code>rsync</code>命令提供带进度条的复制文件命令、自动提示、错误命令高亮。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting $ZSH_CUSTOM/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p>  自带的插件：git、<a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/z" target="_blank" rel="noopener">z</a>、<a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/cp" target="_blank" rel="noopener">cp</a></p><blockquote><p>z 查看历史记录<br>–add 添加目录到记录里<br>-c 只查看当前目录<br>-t 按最近使用的匹配</p></blockquote><blockquote><p>rsync<br>-r 递归文件夹<br>-h 显示常见的文件大小单位<br>-P 显示进度条</p></blockquote><h4 id="9-编辑配置文件"><a class="header-anchor" href="#9-编辑配置文件">¶</a>9、编辑配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .zshrc</span><br></pre></td></tr></table></figure><p>  我常用的主题是 ys，日常配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">export ZSH=&quot;/Users/liuxy/.oh-my-zsh&quot;</span><br><span class="line"></span><br><span class="line">ZSH_THEME=&quot;ys&quot;</span><br><span class="line">plugins=(git z cp zsh-autosuggestions zsh-syntax-highlighting)</span><br><span class="line"></span><br><span class="line">source $ZSH/oh-my-zsh.sh</span><br><span class="line">source ~/.bash_profile</span><br><span class="line"></span><br><span class="line"># node n taobao 镜像</span><br><span class="line">export N_NODE_MIRROR=https://npm.taobao.org/dist/</span><br><span class="line"></span><br><span class="line"># pnpm</span><br><span class="line">alias p=&quot;pnpm&quot;</span><br></pre></td></tr></table></figure><p>  可能执行<code>source .zshrc</code>后会报错：<code>/etc/bashrc &quot;command not found: shopt&quot;</code>，编辑<code>.bashrc</code>，将<code>. /etc/bashrc</code>替换成<code>bash -c &quot;. /etc/bashrc&quot;</code>，保存后退出，再次执行<code>source .zshrc</code>即可。</p><h4 id="10-卸载-oh-my-zsh"><a class="header-anchor" href="#10-卸载-oh-my-zsh">¶</a>10、卸载 oh-my-zsh</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uninstall_oh_my_zsh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近之前买的三年服务器到期了，新买了腾讯云的服务器，Cent OS 7.6，记录下安装&lt;code&gt;oh-my-zsh&lt;/code&gt;及常用插件的过程，MacOS 通用。&lt;/p&gt;
    
    </summary>
    
      <category term="Cent OS" scheme="https://liuxianyu.cn/categories/Cent-OS/"/>
    
    
      <category term="Linux" scheme="https://liuxianyu.cn/tags/Linux/"/>
    
      <category term="Cent OS" scheme="https://liuxianyu.cn/tags/Cent-OS/"/>
    
  </entry>
  
  <entry>
    <title>前端学习 Docker 之旅（七）—— Docker 中安装 MongoDB</title>
    <link href="https://liuxianyu.cn/article/docker-f.html"/>
    <id>https://liuxianyu.cn/article/docker-f.html</id>
    <published>2022-08-04T10:51:23.000Z</published>
    <updated>2022-08-04T10:51:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>  最近在公司中，有个项目需要用到数据库，选择了尝试下 MongoDB，记录下在 Docker 中安装 MongoDB 的过程。</p><a id="more"></a><h3 id="一-安装-mongodb"><a class="header-anchor" href="#一-安装-mongodb">¶</a>一、安装 MongoDB</h3><h4 id="1-查找镜像"><a class="header-anchor" href="#1-查找镜像">¶</a>1、查找镜像</h4><p>  在 Docker Hub 官网查找自己需要的版本 <a href="https://hub.docker.com/_/mongo?tab=tags" target="_blank" rel="noopener">https://hub.docker.com/_/mongo?tab=tags</a></p><h4 id="2-下载镜像"><a class="header-anchor" href="#2-下载镜像">¶</a>2、下载镜像</h4><p>  我选择的是最新版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo</span><br></pre></td></tr></table></figure><h4 id="3-创建挂载文件夹"><a class="header-anchor" href="#3-创建挂载文件夹">¶</a>3、创建挂载文件夹</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mnt/docker/mongo</span><br><span class="line">cd /mnt/docker/mongo</span><br></pre></td></tr></table></figure><h3 id="二-运行-mongodb"><a class="header-anchor" href="#二-运行-mongodb">¶</a>二、运行 MongoDB</h3><h4 id="1-使用镜像创建容器并运行"><a class="header-anchor" href="#1-使用镜像创建容器并运行">¶</a>1、使用镜像创建容器并运行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /mnt/docker/mongo:/data/db --name mongodb -p 27019:27017 -e MONGO_INITDB_ROOT_USERNAME=root -e MONGO_INITDB_ROOT_PASSWORD='123456' -d mongo --auth</span><br></pre></td></tr></table></figure><p>指令解释：</p><ul><li><code>-v</code> 挂载本地文件夹，存储数据</li><li><code>--name</code> 表示给容器指定的名称</li><li><code>-p</code> 表示端口映射，<code>-p 宿主机port:容器port</code>，这里不使用相同端口是为了防止攻击</li><li><code>-e</code> 携带密码等参数</li><li><code>-d</code> 表示后台启动</li><li><code>--auth</code> MongoDB 进行权限校验</li></ul><h4 id="2-进入容器"><a class="header-anchor" href="#2-进入容器">¶</a>2、进入容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mongodb mongo admin</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong><br>如果出现以下报错，可能是你的 mongodb 镜像版本比较高，mongodb 5.0 以上的版本需要使用<code>mongosh</code>来代替原来的<code>mongo</code><br>rpc error: code = 2 desc = oci runtime error: exec failed: container_linux.go:235: starting container process caused “exec: “mongo”: executable file not found in $PATH”</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mongodb mongosh admin</span><br></pre></td></tr></table></figure><h4 id="3-验证用户名密码登录"><a class="header-anchor" href="#3-验证用户名密码登录">¶</a>3、验证用户名密码登录</h4><p>  返回 1 代表登录成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.auth('root', '123456')</span><br></pre></td></tr></table></figure><p><img src="https://images-hosting.liuxianyu.cn/posts/docker-f/1.png" alt></p><h4 id="4-使用数据库"><a class="header-anchor" href="#4-使用数据库">¶</a>4、使用数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use landingDB</span><br></pre></td></tr></table></figure><h4 id="5-创建数据库的管理员"><a class="header-anchor" href="#5-创建数据库的管理员">¶</a>5、创建数据库的管理员</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123; user: "landing-user", pwd: "landing-admin.1234", roles: [&#123; role: "readWrite", db: "landingDB" &#125;] &#125;)</span><br></pre></td></tr></table></figure><p>  MongoDB 不允许同一窗口有多个用户登录，退出再次进入终端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use landingDB</span><br><span class="line">db.auth('landing-user', 'landing-admin.1234')</span><br></pre></td></tr></table></figure><h4 id="6-创建表"><a class="header-anchor" href="#6-创建表">¶</a>6、创建表</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection('article')</span><br><span class="line">db.createCollection('tag')</span><br></pre></td></tr></table></figure><h4 id="7-测试插入数据"><a class="header-anchor" href="#7-测试插入数据">¶</a>7、测试插入数据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.article.insert(&#123; id: 1, title: '测试文章标题' &#125;)</span><br></pre></td></tr></table></figure><h4 id="8-通过-mongodb-compass-连接数据库"><a class="header-anchor" href="#8-通过-mongodb-compass-连接数据库">¶</a>8、通过 MongoDB Compass 连接数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://landing-user:landing-admin.1234@127.0.0.1:27019/landingDB</span><br></pre></td></tr></table></figure><p><img src="https://images-hosting.liuxianyu.cn/posts/docker-f/2.png" alt><br><img src="https://images-hosting.liuxianyu.cn/posts/docker-f/3.png" alt></p><h3 id="三-在-node-中使用"><a class="header-anchor" href="#三-在-node-中使用">¶</a>三、在 node 中使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; MongoClient &#125; = <span class="built_in">require</span>(<span class="string">'mongodb'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; host, port, dbName, username, password &#125; = configObj</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">`mongodb://<span class="subst">$&#123;username&#125;</span>:<span class="subst">$&#123;password&#125;</span>@<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>/<span class="subst">$&#123;dbName&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> MongoClient(url)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化数据库链接</span></span><br><span class="line"><span class="keyword">const</span> initDB = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> client.connect()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Connected successfully to mongodb'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增查询到的标签列表</span></span><br><span class="line"><span class="keyword">const</span> insertTags = <span class="keyword">async</span> (tagList) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> db = client.db(dbName)</span><br><span class="line">    <span class="keyword">const</span> collection = db.collection(<span class="string">'tag'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> updateResult = <span class="keyword">await</span> collection.updateMany(&#123; <span class="attr">isDelete</span>: <span class="number">0</span> &#125;, &#123; <span class="attr">$set</span>: &#123; <span class="attr">isDelete</span>: <span class="number">1</span>, <span class="attr">updateTime</span>: getDateStr() &#125; &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'updateTags documents =&gt;'</span>, updateResult)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> insertResult = <span class="keyword">await</span> collection.insertMany(tagList)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'insertTags documents =&gt;'</span>, insertResult)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询标签列表</span></span><br><span class="line"><span class="keyword">const</span> getTagList = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> db = client.db(dbName)</span><br><span class="line">    <span class="keyword">const</span> collection = db.collection(<span class="string">'tag'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> collection.find(&#123; <span class="attr">isDelete</span>: <span class="number">0</span> &#125;).toArray()</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        code: <span class="number">200</span>,</span><br><span class="line">        data,</span><br><span class="line">        message: <span class="string">'成功'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    initDB,</span><br><span class="line">    insertTags,</span><br><span class="line">    getTagList,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附：<a href="https://liuxianyu.cn/article/docker-b.html" target="_black">前端学习 Docker 之旅（二）—— 常用指令</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近在公司中，有个项目需要用到数据库，选择了尝试下 MongoDB，记录下在 Docker 中安装 MongoDB 的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://liuxianyu.cn/categories/Docker/"/>
    
    
      <category term="Cent OS" scheme="https://liuxianyu.cn/tags/Cent-OS/"/>
    
      <category term="Docker" scheme="https://liuxianyu.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>规范 git commit、设置版本号、自动生成 changelog</title>
    <link href="https://liuxianyu.cn/article/git-commit-version-changelog.html"/>
    <id>https://liuxianyu.cn/article/git-commit-version-changelog.html</id>
    <published>2022-04-12T15:49:25.000Z</published>
    <updated>2022-04-12T15:49:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>  在开源项目中，规范的 commit message 可以让修改记录更简洁明了，记录下借助工具实现规范的 git commit。这里主要介绍 <a href="https://github.com/commitizen/cz-cli" target="_black">commitizen</a>、<a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli" target="_black">conventional-changelog-cli</a>、<a href="https://github.com/conventional-changelog/standard-version" target="_black">standard-version</a> 这三款工具。</p><a id="more"></a><p>  全局安装是为了本地方便运行，<code>-D</code> 安装是为了方便 CI。</p><h3 id="一-commitizen"><a class="header-anchor" href="#一-commitizen">¶</a>一、commitizen</h3><h4 id="1-1-安装"><a class="header-anchor" href="#1-1-安装">¶</a>1.1、安装</h4><p>  <a href="https://github.com/commitizen/cz-cli" target="_black">commitizen</a> 是一款标准化 git commit 的工具，在没有规范的情况下，开发人员的 commit message 通常是随意的，这就导致 commit message 显得有些无用。可是当你在做git log、code review、编写 changelog 等情况时，良好的 commit 规范就显得尤为重要。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install commitizen -g</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install commitizen -D</span><br></pre></td></tr></table></figure><p>  使用 commitizen 来安装<code>cz-conventional-changelog</code>，commitizen 安装 cz-conventional-changelog 后会自动在 package.json 中添加如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commitizen init cz-conventional-changelog --save-dev --save-exact</span><br></pre></td></tr></table></figure><figure class="highlight"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"config": &#123;</span><br><span class="line">  "commitizen": &#123;</span><br><span class="line">    "path": "./node_modules/cz-conventional-changelog"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  安装并添加完成后，便可以使用<code>git cz</code>命令来替换<code>git commit</code>了。修改一个文件并<code>git add</code>后，通过<code>git cz</code>试一下：</p><p><img src="https://images-hosting.liuxianyu.cn/posts/git-commit-version-changelog/1.png" alt></p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>feat</td><td>新增功能</td></tr><tr><td>fix</td><td>bug 修复</td></tr><tr><td>docs</td><td>文档更新</td></tr><tr><td>style</td><td>不影响程序逻辑的代码修改(修改空白字符，格式缩进，补全缺失的分号等，没有改变代码逻辑)</td></tr><tr><td>refactor</td><td>重构代码(既没有新增功能，也没有修复 bug)</td></tr><tr><td>perf</td><td>性能, 体验优化</td></tr><tr><td>test</td><td>新增测试用例或是更新现有测试</td></tr><tr><td>build</td><td>主要目的是修改项目构建系统(例如 glup，webpack，rollup 的配置等)的提交</td></tr><tr><td>ci</td><td>主要目的是修改项目继续集成流程(例如 Travis，Jenkins，GitLab CI，Circle等)的提交</td></tr><tr><td>chore</td><td>不属于以上类型的其他类型</td></tr><tr><td>revert</td><td>回滚某个更早之前的提交</td></tr></tbody></table><blockquote><p><strong>注意</strong><br>如果想修改已经打好的 commit message，我们可以通过<code>git reset HEAD~</code>命令来修改</p></blockquote><h4 id="1-2-commit-message-的格式规范"><a class="header-anchor" href="#1-2-commit-message-的格式规范">¶</a>1.2、commit message 的格式规范</h4><p>  commit message 包含三个部分：Header、Body、Footer，一般 Header 是必需的，Body 和 Footer 可以省略。<code>Header</code>部分只有一行，包括三个字段：<code>type</code>（必需）、<code>scope</code>（可选，用于定义 type 的影响范围）和<code>subject</code>（必需，commit 的简短描述）。</p><h3 id="二-conventional-changelog-cli"><a class="header-anchor" href="#二-conventional-changelog-cli">¶</a>二、conventional-changelog-cli</h3><h4 id="2-1-安装"><a class="header-anchor" href="#2-1-安装">¶</a>2.1、安装</h4><p>  <a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli" target="_black">conventional-changelog-cli</a> 默认推荐的 commit 标准是来自 angular，还有其他可选值：atom, codemirror, ember, eslint, express, jquery。可用来生成<code>CHANGELOG.md</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install conventional-changelog-cli -g</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install conventional-changelog-cli -D</span><br></pre></td></tr></table></figure><p>  在项目根目录执行以下命令，不会覆盖以前的<code>CHANGELOG.md</code>，只会在<code>CHANGELOG.md</code>的头部加上自从上次<code>git push</code>以来的变动。<code>-s</code>表示读写同一文件，<code>-r</code>表示生成 changelog 所需要使用的发布版本数量，默认为 1，全部则是 0。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conventional-changelog -p angular -i CHANGELOG.md -s -r 0</span><br></pre></td></tr></table></figure><h4 id="2-2-自定义参数"><a class="header-anchor" href="#2-2-自定义参数">¶</a>2.2、自定义参数</h4><p>  生成的 changelog 中有些常用内容可以通过自定义参数来根据需求更改，例如版本号、commit 地址等等。</p><ul><li>版本号是从 package.json 中获取的 version 字段值；</li><li>commit 地址是从 package.json 中获取的 repository 字段值；</li><li>issue 地址是从 package.json 中获取的 repository 字段值；</li></ul><p>  如果你使用了第三方的协作系统，那么在生成 changelog 后可以使用 replace 工具（<code>--quiet</code> 表示不输出 replace 日志）来处理文本中的原有地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replace <span class="string">'https://github.com/myproject/issues/'</span> <span class="string">'https://redmine.example.com'</span> CHANGELOG.md --quiet</span><br></pre></td></tr></table></figure><p>  <a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-core" target="_black">点此查看</a> 更多配置选项。</p><h3 id="三-standard-version"><a class="header-anchor" href="#三-standard-version">¶</a>三、standard-version</h3><h4 id="3-1-安装"><a class="header-anchor" href="#3-1-安装">¶</a>3.1、安装</h4><p>  <a href="https://github.com/conventional-changelog/standard-version" target="_black">standard-version</a> 是一款遵循语义化版本 <a href="https://semver.org/" target="_black">semver</a> 和 <a href="https://conventionalcommits.org/" target="_black">commit message 标准规范</a> 的版本和 changelog 自动化工具。通常情况下，我们会在 master 分支进行如下的版本发布操作：</p><blockquote><p>1、git pull origin master<br>2、根据 package.json 中的 version 更新版本号，更新 changelog<br>3、git add ., 然后 git commit<br>4、git tag 打版本操作<br>5、push 版本 tag 和 master 分支到仓库</p></blockquote><p>  其中 2，3，4 是 standard-version 工具会自动完成的工作，配合本地的 shell 脚本，就可以完成一系列版本发布的工作了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install standard-version -g</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install standard-version -D</span><br></pre></td></tr></table></figure><h4 id="3-2-命令"><a class="header-anchor" href="#3-2-命令">¶</a>3.2、命令</h4><p>  在项目根目录执行 standard-version 命令，可以在控制台看到整个执行流程的 log 信息，在这里几个常用的参数需要注意下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">standard-version</span><br></pre></td></tr></table></figure><p>1、<strong>–release-as, -r 指定版本号</strong></p><p>  默认情况下，工具会自动根据 主版本（major）、次版本（ minor）、修订版（patch）规则生成版本号，例如如果你 package.json 中的 version 为 1.0.0, 那么执行后版本号则是：1.0.1。自定义可以通过：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">standard-version -r minor // 1.1.0</span><br><span class="line">standard-version -r 2.0.0 // 2.0.0</span><br><span class="line">standard-version -r 2.0.0-test // 2.0.0-test</span><br></pre></td></tr></table></figure><p>2、<strong>–prerelease, -p 预发版本命名</strong></p><p>  用来生成预发版本, 如果当期的版本号是 2.0.0，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">standard-version --prerelease alpha // 2.0.0-alpha.0</span><br></pre></td></tr></table></figure><p>3、<strong>–tag-prefix, -t 版本 tag 前缀</strong></p><p>  用来给生成 tag 标签添加前缀，例如如果前版本号为 2.0.0，则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">standard-version --tag-prefix <span class="string">"stable-"</span> // tag: stable-v2.0.0</span><br></pre></td></tr></table></figure><p>  以上几个参数用得会多一些，还有其他选项可以通过<code>standard-version --help</code>查看。</p><h4 id="3-3-集成-npm"><a class="header-anchor" href="#3-3-集成-npm">¶</a>3.3、集成 npm</h4><p>  把命令集成到 package.json 的 scripts 中, 并配合 shell 脚本使用, 如下：</p><figure class="highlight"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "release": "./scripts/release.sh",</span><br><span class="line">  "changelog": "conventional-changelog -p angular -i CHANGELOG.md -s -r 0 &amp;&amp; git add CHANGELOG.md &amp;&amp; npm run change-issue-url",</span><br><span class="line">  "change-issue-url": "replace 'https://github.com/myproject/issues/' 'https://redmine.example.com/' CHANGELOG.md"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>release.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Release branch</span></span><br><span class="line">branch=<span class="string">"master"</span></span><br><span class="line">prefix=<span class="string">"v"</span></span><br><span class="line"></span><br><span class="line">git pull origin <span class="variable">$branch</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Current pull origin <span class="variable">$branch</span>."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Auto generate version number and tag</span></span><br><span class="line">standard-version -r <span class="variable">$release</span> --tag-prefix <span class="variable">$prefix</span></span><br><span class="line"></span><br><span class="line">git push --follow-tags origin <span class="variable">$branch</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Git push origin <span class="variable">$branch</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Release finished."</span></span><br></pre></td></tr></table></figure><h3 id="四-使用-husky-校验"><a class="header-anchor" href="#四-使用-husky-校验">¶</a>四、使用 husky 校验</h3><p>  <a href="https://github.com/typicode/husky" target="_black">husky</a> 主用功能是为 git 添加钩子，它允许我们在 git 的一些重要动作发生时触发动作(npm script), 比如我们可以在 git push 之前执行特定的自定义脚本对代码进行单元测试、又或者在 git commit 之前执行 eslint 校验。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install husky -D</span><br></pre></td></tr></table></figure><figure class="highlight"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"husky": &#123;</span><br><span class="line">  "hooks": &#123;</span><br><span class="line">    "pre-commit": "echo commit 之前的动作",</span><br><span class="line">    "commit-msg": "echo $HUSKY_GIT_PARAMS $HUSKY_GIT_STDIN",</span><br><span class="line">    "pre-push": "echo push 之前的动作"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  在开源项目中，规范的 commit message 可以让修改记录更简洁明了，记录下借助工具实现规范的 git commit。这里主要介绍 &lt;a href=&quot;https://github.com/commitizen/cz-cli&quot; target=&quot;_black&quot;&gt;commitizen&lt;/a&gt;、&lt;a href=&quot;https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli&quot; target=&quot;_black&quot;&gt;conventional-changelog-cli&lt;/a&gt;、&lt;a href=&quot;https://github.com/conventional-changelog/standard-version&quot; target=&quot;_black&quot;&gt;standard-version&lt;/a&gt; 这三款工具。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://liuxianyu.cn/categories/git/"/>
    
    
      <category term="git" scheme="https://liuxianyu.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>通过 Lerna 创建自己的 eslint 配置包</title>
    <link href="https://liuxianyu.cn/article/my-eslint-config-by-lerna.html"/>
    <id>https://liuxianyu.cn/article/my-eslint-config-by-lerna.html</id>
    <published>2022-03-23T17:24:04.000Z</published>
    <updated>2022-03-23T17:24:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>  最近在写一个<code>eslint config</code>的整合包，因为有不同语言，会发多个 npm 包，通过 <a href="https://github.com/lerna/lerna" target="_black">Lerna</a> 来管理多包发布，它优化了使用 git 和 npm 管理多包存储库的工作流，Vue、Babel、React 都有使用 Lerna。这里记录下使用过程中的一些点。</p><a id="more"></a><h3 id="一-两种工作模式"><a class="header-anchor" href="#一-两种工作模式">¶</a>一、两种工作模式</h3><h4 id="1-1-固定模式"><a class="header-anchor" href="#1-1-固定模式">¶</a>1.1、固定模式</h4><p>  Fixed/Locked mode，Vue，Babel 都是用这种，在 publish 的时候，会依据<code>lerna.json</code>文件里面的<code>&quot;version&quot;: &quot;0.0.1&quot;</code>进行增加，只选择一次，其他有改动的包自动更新版本号。</p><h4 id="1-2-独立模式"><a class="header-anchor" href="#1-2-独立模式">¶</a>1.2、独立模式</h4><p>  Independent mode，执行<code>lerna init --independent</code>命令初始化项目，<code>lerna.json</code>文件里面会设置<code>&quot;version&quot;: &quot;independent&quot;</code>。每次 publish 时，会得到一个提示符，提示每个已更改的包，以指定是补丁、次要更改、主要更改还是自定义更改(<code>x.y.z</code>)。</p><h3 id="二-初始化"><a class="header-anchor" href="#二-初始化">¶</a>二、初始化</h3><p>  新建一个文件夹<code>eslint-config-liuxy0551</code>，并进入该文件夹；为了方便 github action，安装 lerna 到开发环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">yarn add lerna -D</span><br></pre></td></tr></table></figure><p>  因为 lerna 经常需要用到，我们全局安装下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add lerna</span><br></pre></td></tr></table></figure><p>  安装完成后输入<code>lerna -v</code>查看版本号：</p><p><img src="https://images-hosting.liuxianyu.cn/posts/my-eslint-config-by-lerna/1.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lerna init</span><br></pre></td></tr></table></figure><p>  我们使用固定模式，然后进入<code>packages</code>文件夹初始化几个不同语言对应的 eslint config 包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> packages</span><br><span class="line">mkdir basic prettier typescript</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> basic</span><br><span class="line">npm init -y</span><br><span class="line"><span class="built_in">cd</span> ../prettier</span><br><span class="line">npm init -y</span><br><span class="line"><span class="built_in">cd</span> ../react</span><br><span class="line">npm init -y</span><br><span class="line"><span class="built_in">cd</span> ../typescript</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>  项目结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">eslint-config-liuxy0551</span><br><span class="line">├─lerna.json</span><br><span class="line">├─package.json</span><br><span class="line">├─result.txt</span><br><span class="line">├─yarn.lock</span><br><span class="line">├─packages</span><br><span class="line">|    ├─typescript</span><br><span class="line">|    |     └package.json</span><br><span class="line">|    ├─react</span><br><span class="line">|    |   └package.json</span><br><span class="line">|    ├─prettier</span><br><span class="line">|    |    └package.json</span><br><span class="line">|    ├─basic</span><br><span class="line">|    |   └package.json</span><br></pre></td></tr></table></figure><p>  按照约定 <a href="https://eslint.org/docs/developer-guide/shareable-configs" target="_black">Shareable Configs</a>，包名应该以<code>eslint-config-</code>开头，例如：<code>eslint-config-liuxy0551-basic</code>。依次将 packages 下的几个 package.json 中的 name 改成如：@liuxy0551/eslint-config-liuxy0551-basic，version 改成 0.0.0。</p><p>  每个子 package 都有自己的 node_modules，通过如下设置，就可以只在根目录创建 node_modules，只有开启了 private 的项目才能使用 workspaces。依次修改根目录的 package.json 和 lerna.json，添加以下配置项：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"private": true,</span><br><span class="line">"workspaces": [</span><br><span class="line">  <span class="string">"packages/*"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"useWorkspaces": true,</span><br><span class="line">"npmClient": "yarn"</span><br></pre></td></tr></table></figure><h3 id="三-绑定-git-和-npm"><a class="header-anchor" href="#三-绑定-git-和-npm">¶</a>三、绑定 git 和 npm</h3><p>  接下来与远程仓库绑定，并登录 npm：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:liuxy0551/eslint-config-liuxy0551.git</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm whoami</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong><br>如果上述命令报错，排查 npm 源: <code>npm config ls</code><br>设置 npm 官方源: <code>npm config set registry https://registry.npmjs.org/</code><br>如果未登录则执行<code>npm login</code>登录</p></blockquote><h3 id="四-配置内容"><a class="header-anchor" href="#四-配置内容">¶</a>四、配置内容</h3><p>  在 packages/basic 文件夹下新建 index.js，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  extends: [</span><br><span class="line">    <span class="string">'airbnb'</span>,</span><br><span class="line">    <span class="string">'plugin:import/errors'</span>,</span><br><span class="line">    <span class="string">'plugin:import/warnings'</span>,</span><br><span class="line">    <span class="string">'plugin:eslint-comments/recommended'</span>,</span><br><span class="line">    <span class="string">'plugin:yml/recommended'</span>,</span><br><span class="line">    <span class="string">'prettier'</span>,</span><br><span class="line">  ],</span><br><span class="line">  plugins: [<span class="string">'html'</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <code>rules</code>对象就是我们可以自己改动的配置项，在<code>Airbnb/JavaScript</code>仓库中的 <a href="https://github.com/airbnb/javascript/issues/1089" target="_black">https://github.com/airbnb/javascript/issues/1089</a>，告诉了我们有哪些规则可以被修改。</p><h3 id="五-lerna-命令"><a class="header-anchor" href="#五-lerna-命令">¶</a>五、lerna 命令</h3><h4 id="5-1-创建一个包"><a class="header-anchor" href="#5-1-创建一个包">¶</a>5.1、创建一个包</h4><p><code>lerna create &lt;包名&gt; [存放的目录]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lerna create packageName</span><br></pre></td></tr></table></figure><h4 id="5-2-查看当前列表"><a class="header-anchor" href="#5-2-查看当前列表">¶</a>5.2、查看当前列表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lerna list</span><br></pre></td></tr></table></figure><p><img src="https://images-hosting.liuxianyu.cn/posts/my-eslint-config-by-lerna/2.png" alt></p><h4 id="5-3-增加本地或者远程-package-作为当前项目-packages-里面的依赖"><a class="header-anchor" href="#5-3-增加本地或者远程-package-作为当前项目-packages-里面的依赖">¶</a>5.3、增加本地或者远程 package 作为当前项目 packages 里面的依赖</h4><p><code>lerna add [@version] [--scope=localPackageName] [-D] [--exact]</code></p><ul><li>-D 表示安装到 devDependencies</li><li>–exact 表示安装准确版本，不带 ^</li></ul><blockquote><p><strong>注意</strong><br>以下基于<code>node 12</code>版本安装插件，需要兼容低版本的可以在插件后加上版本号</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lerna add eslint</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-basic eslint-loader</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-basic eslint-config-airbnb</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-basic eslint-plugin-eslint-comments</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-basic eslint-plugin-html</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-basic eslint-plugin-import</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-basic eslint-plugin-node</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-basic eslint-plugin-promise</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-basic eslint-plugin-sort-requires</span><br></pre></td></tr></table></figure><p>  加上<code>--scope=</code>表示给本地指定的包安装依赖，也可以 cd 到这个包的文件夹下安装，就不用加<code>--scope=</code>了；不加则是给所有子包都安装该依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-typescript @liuxy0551/eslint-config-liuxy0551-basic</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-typescript @typescript-eslint/eslint-plugin</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-typescript @typescript-eslint/parser</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-react @liuxy0551/eslint-config-liuxy0551-typescript</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-react eslint-plugin-jest</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-react eslint-plugin-jsx-a11y</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-react eslint-plugin-react</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-react eslint-plugin-react-hooks</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-prettier @liuxy0551/eslint-config-liuxy0551-react</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-prettier prettier</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-prettier prettier-plugin-jsdoc</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-prettier eslint-config-prettier</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551-prettier eslint-plugin-prettier</span><br></pre></td></tr></table></figure><h4 id="5-4-安装依赖"><a class="header-anchor" href="#5-4-安装依赖">¶</a>5.4、安装依赖</h4><p>  因为我们指定过使用 yarn，直接执行<code>yarn install</code>就会把所有包的依赖安装到根目录的 node_modules。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lerna bootstrap</span><br></pre></td></tr></table></figure><h4 id="5-5-删除依赖"><a class="header-anchor" href="#5-5-删除依赖">¶</a>5.5、删除依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lerna clean --scope=特定的某个包</span><br></pre></td></tr></table></figure><p>  和<code>rm -rf node_modules</code>功能一致，<code>--scope=</code>表示指定包，不会移除根目录的 node_modules。</p><h4 id="5-6-建立软链接"><a class="header-anchor" href="#5-6-建立软链接">¶</a>5.6、建立软链接</h4><p><code>lerna link [--force-local]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lerna link --force-local</span><br></pre></td></tr></table></figure><p>  类似<code>npm link</code>的使用，–force-local 表示不论本地的版本是否符合，都使用本地的版本。</p><h4 id="5-7-列出更新的包"><a class="header-anchor" href="#5-7-列出更新的包">¶</a>5.7、列出更新的包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lerna changed</span><br></pre></td></tr></table></figure><p>  列出改动过的包，发布时只更新改动过的包。</p><p><img src="https://images-hosting.liuxianyu.cn/posts/my-eslint-config-by-lerna/3.png" alt></p><h4 id="5-8-指定版本号"><a class="header-anchor" href="#5-8-指定版本号">¶</a>5.8、指定版本号</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lerna version 0.0.2 -y</span><br></pre></td></tr></table></figure><p>  需要本地分支和远程分支无差别。</p><h4 id="5-9-发布"><a class="header-anchor" href="#5-9-发布">¶</a>5.9、发布</h4><p><code>lerna publish [--conventional-commits -y]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lerna publish</span><br></pre></td></tr></table></figure><p>  需要先执行 git commit，会打 tag，<code>--conventional-commits</code>表示生成 changelog。如果包名是带 scope 的格式，如：@liuxy0551/eslint-config-liuxy0551，则需要在 package.json 中添加配置项，packages 下的每个包都需要加：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"publishConfig": &#123;</span><br><span class="line">  "access": "public"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/my-eslint-config-by-lerna/4.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/my-eslint-config-by-lerna/5.png" alt></div></div><div class="group-picture-row"></div></div></div><h3 id="六-发布整合包"><a class="header-anchor" href="#六-发布整合包">¶</a>六、发布整合包</h3><blockquote><p>lerna publish 只会发布 packages 下的包，当前文件夹并不会作为一个包发布</p></blockquote><p>  在 packages 文件夹下新建一个<code>main</code>，作为入口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> packages</span><br><span class="line">mkdir main</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> main</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>  将 main 下 package.json 中的 name 改成如：@liuxy0551/eslint-config-liuxy0551，version 改成 0.0.0。添加依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551 eslint@^7.0.0</span><br><span class="line">lerna add --scope=@liuxy0551/eslint-config-liuxy0551 @liuxy0551/eslint-config-liuxy0551-react</span><br></pre></td></tr></table></figure><p>  在 packages/main 文件夹下新建 index.js，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Export all */</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  extends: [</span><br><span class="line">    <span class="string">'@liuxy0551/eslint-config-liuxy0551-react'</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  lerna 不会发布标记私有的项目，需要修改根目录 package.json 中的配置<code>&quot;private&quot;: false</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm whoami</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lerna publish</span><br></pre></td></tr></table></figure><p>  访问<a href="https://www.npmjs.com/search?q=@liuxy0551/eslint-config-liuxy0551" target="_black">https://www.npmjs.com/search?q=@liuxy0551/eslint-config-liuxy0551</a> 可以看到发布的包。</p><blockquote><p><strong>常见错误</strong><br>第一次发布失败后出现 Current HEAD is already released<br>执行<code>lerna publish from-package</code></p></blockquote><p>  <code>可选步骤</code>删除测试发布的 npm 包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm unpublish @liuxy0551/eslint-config-liuxy0551-react --force</span><br><span class="line">npm unpublish @liuxy0551/eslint-config-liuxy0551-typescript --force</span><br><span class="line">npm unpublish @liuxy0551/eslint-config-liuxy0551-prettier --force</span><br><span class="line">npm unpublish @liuxy0551/eslint-config-liuxy0551-basic --force</span><br><span class="line">npm unpublish @liuxy0551/eslint-config-liuxy0551 --force</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3><p>1、<a href="https://juejin.cn/post/6844903856153821198" target="_black">Lerna 中文教程详解</a><br>2、<a href="https://www.ahwgs.cn/ruhechuangjianzijideeslintpeizhibao.html" target="_black">如何创建自己的ESLint配置包</a><br>3、<a href="https://segmentfault.com/a/1190000023954051" target="_black">Lerna --多包存储管理工具（一）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近在写一个&lt;code&gt;eslint config&lt;/code&gt;的整合包，因为有不同语言，会发多个 npm 包，通过 &lt;a href=&quot;https://github.com/lerna/lerna&quot; target=&quot;_black&quot;&gt;Lerna&lt;/a&gt; 来管理多包发布，它优化了使用 git 和 npm 管理多包存储库的工作流，Vue、Babel、React 都有使用 Lerna。这里记录下使用过程中的一些点。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://liuxianyu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="eslint" scheme="https://liuxianyu.cn/tags/eslint/"/>
    
      <category term="Lerna" scheme="https://liuxianyu.cn/tags/Lerna/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 中操作 Redis</title>
    <link href="https://liuxianyu.cn/article/node-redis.html"/>
    <id>https://liuxianyu.cn/article/node-redis.html</id>
    <published>2022-03-12T22:25:55.000Z</published>
    <updated>2022-03-12T22:25:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>  之前写了个爬取 Github Trending 的服务 <a href="https://github.com/liuxy0551/github-trending-api" target="_black">github-trending-api</a>，因为网络原因，失败率比较高，最近在进行优化，会每个小时请求一次 Github，失败则重试5次，然后把成功的结果存到 Redis 中。记录下 Node.js 中操作 Redis 的一些方法。</p><a id="more"></a><h3 id="一-安装-redis"><a class="header-anchor" href="#一-安装-redis">¶</a>一、安装 Redis</h3><p>  我这里是通过 Docker 来安装 Redis 的，具体可参考：<a href="https://liuxianyu.cn/article/docker-d.html" target="_black">前端学习 Docker 之旅（五）—— 安装 Redis 并启动、连接</a>。</p><h3 id="二-缓存类型"><a class="header-anchor" href="#二-缓存类型">¶</a>二、缓存类型</h3><p>  主要分为三种：数据库、本地应用缓存（内存等）、远程缓存（Redis），这里不展开细讲。</p><h3 id="三-缓存模式"><a class="header-anchor" href="#三-缓存模式">¶</a>三、缓存模式</h3><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/node-redis/1.png" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/node-redis/2.png" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://images-hosting.liuxianyu.cn/posts/node-redis/3.png" alt></div></div><div class="group-picture-row"></div></div></div><h3 id="四-node-js-与-redis"><a class="header-anchor" href="#四-node-js-与-redis">¶</a>四、Node.js 与 Redis</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createClient &#125; <span class="keyword">from</span> <span class="string">'redis'</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> client = createClient(&#123;</span><br><span class="line">        url: <span class="string">'redis://username:password@host:port/db-number'</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    client.on(<span class="string">'error'</span>, (err) =&gt; <span class="built_in">console</span>.log(<span class="string">'Redis Client Error'</span>, err));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> client.connect();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> client.set(<span class="string">'key'</span>, <span class="string">'value'</span>);</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">await</span> client.get(<span class="string">'key'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>  语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">createClient(&#123;</span><br><span class="line">    url: <span class="string">'redis://alice:foobared@awesome.redis.server:6380'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="五-redis-value-类型"><a class="header-anchor" href="#五-redis-value-类型">¶</a>五、Redis value 类型</h3><p>  Redis 的 key 是唯一的，如果 key 所对应的 value 是 string 类型，则不能再次覆盖修改为 hash 类型。<a href="https://github.com/redis/node-redis/blob/be51abe347/packages/client/lib/client/commands.ts#L85" target="_black">点此查看其他方法</a></p><h4 id="5-1-string"><a class="header-anchor" href="#5-1-string">¶</a>5.1、string</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> redis.set(<span class="string">'key'</span>, <span class="string">'value'</span>)</span><br><span class="line"><span class="keyword">const</span> value = <span class="keyword">await</span> redis.get(<span class="string">'key'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> redis.setEx(<span class="string">'key'</span>, <span class="number">60</span>, <span class="string">'value'</span>) <span class="comment">// 设置缓存，单位秒</span></span><br></pre></td></tr></table></figure><p>  不建议赋值后再设置过期时间，这样不能保证原子性。</p><h4 id="5-2-hash"><a class="header-anchor" href="#5-2-hash">¶</a>5.2、hash</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">'Tom'</span> &#125;</span><br><span class="line"><span class="comment">// await redis.hSet('key', obj, 'EX', 60)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">await</span> redis.hGetAll(<span class="string">'key'</span>) <span class="comment">// &#123; name: 'Tom' &#125;</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="keyword">await</span> redis.hGet(<span class="string">'key'</span>, <span class="string">'name'</span>) <span class="comment">// 'Tom'</span></span><br><span class="line"><span class="keyword">const</span> value = <span class="keyword">await</span> redis.hVals(<span class="string">'key'</span>) <span class="comment">// ['Tom']</span></span><br></pre></td></tr></table></figure><p>  取出存入 Redis 的对象时，每个 key 的值会被转成 string。</p><h4 id="5-3-lists"><a class="header-anchor" href="#5-3-lists">¶</a>5.3、lists</h4><h4 id="5-4-sets"><a class="header-anchor" href="#5-4-sets">¶</a>5.4、sets</h4><h4 id="5-4-事务"><a class="header-anchor" href="#5-4-事务">¶</a>5.4、事务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis.multi()</span><br><span class="line">    .set(<span class="string">'key'</span>, <span class="string">'value'</span>)</span><br><span class="line">    .get(<span class="string">'key'</span>)</span><br><span class="line">    .exec(<span class="function">(<span class="params">error, replies</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(replies) <span class="comment">// ['OK', 'value']</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3><p>1、<a href="https://www.cnblogs.com/zhaowinter/p/10776868.html" target="_black">nodejs操作redis总结</a><br>2、<a href="https://github.com/redis/node-redis" target="_black">node-redis</a><br>3、<a href="https://redis.js.org/" target="_black">https://redis.js.org/</a><br>4、涉及代码：<a href="https://github.com/liuxy0551/github-trending-api" target="_black">https://github.com/liuxy0551/github-trending-api</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  之前写了个爬取 Github Trending 的服务 &lt;a href=&quot;https://github.com/liuxy0551/github-trending-api&quot; target=&quot;_black&quot;&gt;github-trending-api&lt;/a&gt;，因为网络原因，失败率比较高，最近在进行优化，会每个小时请求一次 Github，失败则重试5次，然后把成功的结果存到 Redis 中。记录下 Node.js 中操作 Redis 的一些方法。&lt;/p&gt;
    
    </summary>
    
      <category term="node" scheme="https://liuxianyu.cn/categories/node/"/>
    
      <category term="Redis" scheme="https://liuxianyu.cn/categories/node/Redis/"/>
    
    
      <category term="node" scheme="https://liuxianyu.cn/tags/node/"/>
    
      <category term="Redis" scheme="https://liuxianyu.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>iframe 跨域时的通信方式 postMessage</title>
    <link href="https://liuxianyu.cn/article/iframe-postMessage.html"/>
    <id>https://liuxianyu.cn/article/iframe-postMessage.html</id>
    <published>2022-03-10T23:02:41.000Z</published>
    <updated>2022-03-10T23:02:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>  最近有个公司客户对接了公司的用户中心，客户期望自己的系统在退出登录时，公司的用户中心也退出登录。提出了 iframe 的技术方案，并给出了实现方式。<br>  因为客户系统和公司的用户中心必然跨域，这里只记录一下跨域时的处理方法。</p><a id="more"></a><h3 id="一-如何实现"><a class="header-anchor" href="#一-如何实现">¶</a>一、如何实现</h3><h4 id="postmessage"><a class="header-anchor" href="#postmessage">¶</a>postMessage</h4><blockquote><p>window.postMessage() 方法可以安全地实现跨源通信。通常，对于两个不同页面的脚本，只有当执行它们的页面位于具有相同的协议（通常为https），端口号（443为https的默认值），以及主机  (两个页面的模数 Document.domain设置为相同的值) 时，这两个脚本才能相互通信。window.postMessage() 方法提供了一种受控机制来规避此限制，只要正确的使用，这种方法就很安全。</p></blockquote><p>  以上是摘自 MDN 的原文，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_black">window.postMessage</a></p><p><strong>语法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">otherWindow.postMessage(message, targetOrigin, [transfer]);</span><br></pre></td></tr></table></figure><ul><li><code>otherWindow</code> 其他窗口的引用对象</li><li><code>message</code> 将要传递的消息，字符串或对象</li><li><code>targetOrigin</code> 目标窗口，* 代表所有</li><li><code>transfer</code> 可选，是一串和 message 同时传递的对象</li></ul><p>  <code>postMessage</code>非常强大，既可以父传子，也可以子传父，并且是可以跨域传输的。</p><h4 id="业务场景"><a class="header-anchor" href="#业务场景">¶</a>业务场景</h4><p>  客户的系统退出登录后，公司的用户中心前端页面无法感知到已经退出登录，也就无法清除 cookie，如果此时进入公司的用户中心页面，依旧可以访问，所以需要实现同步退出登录。而且因为客户的系统和公司的用户中心不同源，存在跨域，这里通过<code>postMessage</code>来解决。</p><h4 id="父传子"><a class="header-anchor" href="#父传子">¶</a>父传子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 子页面</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, (e) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'这里是公司的用户中心，客户系统发来消息: '</span>, e.data)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (e.data !== <span class="string">'logout'</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// TODO 清除 cookie</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 父页面</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"子页面"</span> <span class="attr">id</span>=<span class="string">"dtstack-logout"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"logoutFunc()"</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">logoutFunc</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'dtstack-logout'</span>).contentWindow.postMessage(<span class="string">'logout'</span>, <span class="string">'*'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  上面的代码表示：在父页面引入 iframe，src 指向子页面，父页面点击<code>退出登录</code>按钮时，向子页面发送一个消息，子页面监听到事先和父页面约定好的信息后，清除 cookie，并给父页面一个反馈。</p><h4 id="子传父"><a class="header-anchor" href="#子传父">¶</a>子传父</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 子页面</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, (e) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'这里是公司的用户中心，客户系统发来消息: '</span>, e.data)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (e.data !== <span class="string">'logout'</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// TODO 清除 cookie</span></span></span><br><span class="line"><span class="javascript">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 向父页面传递消息</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.parent.postMessage(<span class="string">'clear done'</span>, <span class="string">'*'</span>)</span></span><br><span class="line">        &#125;, 2500)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 父页面</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"子页面"</span> <span class="attr">id</span>=<span class="string">"dtstack-logout"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"logoutFunc()"</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, (e) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'这里是客户系统，公司的用户中心发来消息: '</span>, e.data)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!e.data.includes(<span class="string">'clear'</span>)) <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// TODO 清除公司用户中心的 cookie 后需要进行的动作</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  上面的代码表示：在父页面引入 iframe，src 指向子页面，子页面在接收到父页面清除 cookie 的消息后，清除 cookie，并在完成后给父页面发送消息，父页面接收到后进行下一步动作。</p><h3 id="二-实现效果"><a class="header-anchor" href="#二-实现效果">¶</a>二、实现效果</h3><p align="center">    <img src="https://images-hosting.liuxianyu.cn/posts/iframe-postMessage/1.gif"></p><img src="https://images-hosting.liuxianyu.cn/posts/iframe-postMessage/2.png"><img src="https://images-hosting.liuxianyu.cn/posts/iframe-postMessage/3.png"><p>  以上截图的代码是临时 demo。</p><h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3><p>  1、<a href="https://www.runoob.com/tags/tag-iframe.html" target="_black">HTML iframe 标签</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近有个公司客户对接了公司的用户中心，客户期望自己的系统在退出登录时，公司的用户中心也退出登录。提出了 iframe 的技术方案，并给出了实现方式。&lt;br&gt;
  因为客户系统和公司的用户中心必然跨域，这里只记录一下跨域时的处理方法。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML" scheme="https://liuxianyu.cn/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://liuxianyu.cn/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 中的进程和线程</title>
    <link href="https://liuxianyu.cn/article/node-process-thread.html"/>
    <id>https://liuxianyu.cn/article/node-process-thread.html</id>
    <published>2022-02-22T20:43:37.000Z</published>
    <updated>2022-02-22T20:43:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>  线程和进程是计算机操作系统的基础概念，在程序员中属于高频词汇，那如何理解呢？Node.js 中的进程和线程又是怎样的呢？</p><a id="more"></a><p align="center">    <img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/1.png"></p><h3 id="一-进程和线程"><a class="header-anchor" href="#一-进程和线程">¶</a>一、进程和线程</h3><h4 id="1-1-专业性文字定义"><a class="header-anchor" href="#1-1-专业性文字定义">¶</a>1.1、专业性文字定义</h4><ul><li>进程（Process），进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础，进程是线程的容器。</li><li>线程（Thread），线程是操作系统能够进行运算调度的最小单位，被包含在进程之中，是进程中的实际运作单位。</li></ul><h4 id="1-2-通俗理解"><a class="header-anchor" href="#1-2-通俗理解">¶</a>1.2、通俗理解</h4><p>  以上描述比较硬，看完可能也没看懂，还不利于理解记忆。那么我们举个简单的例子：</p><p>  假设你是某个快递站点的一名小哥，起初这个站点负责的区域住户不多，收取件都是你一个人。给张三家送完件，再去李四家取件，事情得一件件做，这叫单线程，所有的工作都得按顺序执行。</p><p>  后来这个区域住户多了，站点给这个区域分配了多个小哥，还有个小组长，你们可以为更多的住户服务了，这叫多线程，小组长是主线程，每个小哥都是一个线程。</p><p>  快递站点使用的小推车等工具，是站点提供的，小哥们都可以使用，并不仅供某一个人，这叫多线程资源共享。</p><p>  站点小推车目前只有一个，大家都需要使用，这叫冲突。解决的方法有很多，排队等待或者等其他小哥用完后的通知，这叫线程同步。</p><p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/2.png" alt></p><p>  总公司有很多站点，各个站点的运营模式几乎一模一样，这叫多进程。总公司叫主进程，各个站点叫子进程。</p><p>  总公司和站点之间，以及各个站点互相之间，小推车都是相互独立的，不能混用，这叫进程间不共享资源。各站点间可以通过电话等方式联系，这叫管道。各站点间还有其他协同手段，便于完成更大的计算任务，这叫进程间同步。</p><p>  还可以看看阮一峰对 <a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_black">进程与线程的一个简单解释</a>。</p><h3 id="二-node-js-中的进程和线程"><a class="header-anchor" href="#二-node-js-中的进程和线程">¶</a>二、Node.js 中的进程和线程</h3><p>  Node.js 是单线程服务，事件驱动和非阻塞 I/O 模型的语言特性，使得 Node.js 高效和轻量。优势在于免去了频繁切换线程和资源冲突；擅长 I/O 密集型操作（底层模块 libuv 通过多线程调用操作系统提供的异步 I/O 能力进行多任务的执行），但是对于服务端的 Node.js，可能每秒有上百个请求需要处理，当面对 CPU 密集型请求时，因为是单线程模式，难免会造成阻塞。</p><h4 id="2-1-node-js-阻塞"><a class="header-anchor" href="#2-1-node-js-阻塞">¶</a>2.1、Node.js 阻塞</h4><p>  我们利用 Koa 简单地搭建一个 Web 服务，用斐波那契数列方法来模拟一下 Node.js 处理 CPU 密集型的计算任务：</p><blockquote><p>斐波那契数列，也称黄金分割数列，这个数列从第三项开始，每一项都等于前两项只和：0、1、1、2、3、5、8、13、21、…</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)()</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来测试是否被阻塞</span></span><br><span class="line">router.get(<span class="string">'/test'</span>, (ctx) =&gt; &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        pid: process.pid,</span><br><span class="line">        msg: <span class="string">'Hello World'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/fibo'</span>, (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; num = <span class="number">38</span> &#125; = ctx.query</span><br><span class="line">    <span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="comment">// 斐波那契数列</span></span><br><span class="line">    <span class="keyword">const</span> fibo = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">1</span> ? fibo(n - <span class="number">1</span>) + fibo(n - <span class="number">2</span>) : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    fibo(num)</span><br><span class="line"></span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        pid: process.pid,</span><br><span class="line">        duration: <span class="built_in">Date</span>.now() - start</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(router.routes())</span><br><span class="line">app.listen(<span class="number">9000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server is running on 9000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  执行<code>node app.js</code>启动服务，用 Postman 发送请求，可以看到，计算 38 次耗费了 617ms，换而言之，因为执行了一个 CPU 密集型的计算任务，所以 Node.js 主线程被阻塞了六百多毫秒。如果同时处理更多的请求，或者计算任务更复杂，那么在这些请求之后的所有请求都会被延迟执行。</p><p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/3.png" alt></p><p>  我们再新建一个 axios.js 用来模拟发送多次请求，此时将 app.js 中的 fibo 计算次数改为 43，用来模拟更复杂的计算任务：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios.js</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.get(<span class="string">`http://127.0.0.1:9000/<span class="subst">$&#123; url &#125;</span>`</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.data, <span class="string">`耗时: <span class="subst">$&#123; <span class="built_in">Date</span>.now() - start &#125;</span>ms`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="string">'test'</span>)</span><br><span class="line">fn(<span class="string">'fibo?num=43'</span>)</span><br><span class="line">fn(<span class="string">'test'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/4.png" alt></p><p>  可以看到，当请求需要执行 CPU 密集型的计算任务时，后续的请求都被阻塞等待，这类请求一多，服务基本就阻塞卡死了。对于这种不足，Node.js 一直在弥补。</p><h4 id="2-2-master-worker"><a class="header-anchor" href="#2-2-master-worker">¶</a>2.2、master-worker</h4><p>  master-worker 模式是一种并行模式，核心思想是：系统有两个及以上的进程或线程协同工作时，master 负责接收和分配并整合任务，worker 负责处理任务。</p><p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/5.png" alt></p><h4 id="2-3-多线程"><a class="header-anchor" href="#2-3-多线程">¶</a>2.3、多线程</h4><p>  线程是 CPU 调度的一个基本单位，只能同时执行一个线程的任务，同一个线程也只能被一个 CPU 调用。如果使用的是多核 CPU，那么将无法充分利用 CPU 的性能。</p><p>  多线程带给我们灵活的编程方式，但是需要学习更多的 Api 知识，在编写更多代码的同时也存在着更多的风险，线程的切换和锁也会增加系统资源的开销。</p><ul><li><a href="http://nodejs.cn/api-v14/worker_threads.html" target="_black">worker_threads 工作线程</a>，给 Node.js 提供了真正的多线程能力。</li></ul><p>  worker_threads 是 Node.js 提供的一种多线程 Api。对于执行 CPU 密集型的计算任务很有用，对 I/O 密集型的操作帮助不大，因为 Node.js 内置的异步 I/O 操作比 worker_threads 更高效。worker_threads 中的 Worker，parentPort 主要用于子线程和主线程的消息交互。</p><p>  将 app.js 稍微改动下，将 CPU 密集型的计算任务交给子线程计算：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)()</span><br><span class="line"><span class="keyword">const</span> &#123; Worker &#125; = <span class="built_in">require</span>(<span class="string">'worker_threads'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来测试是否被阻塞</span></span><br><span class="line">router.get(<span class="string">'/test'</span>, (ctx) =&gt; &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        pid: process.pid,</span><br><span class="line">        msg: <span class="string">'Hello World'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/fibo'</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; num = <span class="number">38</span> &#125; = ctx.query</span><br><span class="line">    ctx.body = <span class="keyword">await</span> asyncFibo(num)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asyncFibo = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 worker 线程并传递数据</span></span><br><span class="line">        <span class="keyword">const</span> worker = <span class="keyword">new</span> Worker(<span class="string">'./fibo.js'</span>, &#123; <span class="attr">workerData</span>: &#123; num &#125; &#125;)</span><br><span class="line">        <span class="comment">// 主线程监听子线程发送的消息</span></span><br><span class="line">        worker.on(<span class="string">'message'</span>, resolve)</span><br><span class="line">        worker.on(<span class="string">'error'</span>, reject)</span><br><span class="line">        worker.on(<span class="string">'exit'</span>, (code) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (code !== <span class="number">0</span>) reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Worker stopped with exit code <span class="subst">$&#123;code&#125;</span>`</span>))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(router.routes())</span><br><span class="line">app.listen(<span class="number">9000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server is running on 9000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  新增 fibo.js 文件，用来处理复杂计算任务：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; workerData, parentPort &#125; = <span class="built_in">require</span>(<span class="string">'worker_threads'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; num &#125; = workerData</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line"><span class="comment">// 斐波那契数列</span></span><br><span class="line"><span class="keyword">const</span> fibo = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">1</span> ? fibo(n - <span class="number">1</span>) + fibo(n - <span class="number">2</span>) : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fibo(num)</span><br><span class="line"></span><br><span class="line">parentPort.postMessage(&#123;</span><br><span class="line">    pid: process.pid,</span><br><span class="line">    duration: <span class="built_in">Date</span>.now() - start</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  执行上文的 axios.js，此时将 app.js 中的 fibo 计算次数改为 43，用来模拟更复杂的计算任务：</p><p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/6.png" alt></p><p>  可以看到，将 CPU 密集型的计算任务交给子线程处理时，主线程不再被阻塞，只需等待子线程处理完成后，主线程接收子线程返回的结果即可，其他请求不再受影响。<br>  上述代码是演示创建 worker 线程的过程和效果，实际开发中，请使用线程池来代替上述操作，因为频繁创建线程也会有资源的开销。</p><blockquote><p>线程是 CPU 调度的一个基本单位，只能同时执行一个线程的任务，同一个线程也只能被一个 CPU 调用。</p></blockquote><p>  我们再回味下，本小节开头提到的线程和 CPU 的描述，此时由于是新的线程，可以在其他 CPU 核心上执行，可以更充分的利用多核 CPU。</p><h4 id="2-4-多进程"><a class="header-anchor" href="#2-4-多进程">¶</a>2.4、多进程</h4><p>  Node.js 为了能充分利用 CPU 的多核能力，提供了 cluster 模块，cluster 可以通过一个父进程管理多个子进程的方式来实现集群的功能。</p><ul><li><a href="http://nodejs.cn/api-v14/child_process.html" target="_black">child_process 子进程</a>，衍生新的 Node.js 进程并使用建立的 IPC 通信通道调用指定的模块。</li><li><a href="http://nodejs.cn/api-v14/cluster.html" target="_black">cluster 集群</a>，可以创建共享服务器端口的子进程，工作进程使用 child_process 的 fork 方法衍生。</li></ul><p>  cluster 底层就是 child_process，master 进程做总控，启动 1 个 agent 进程和 n 个 worker 进程，agent 进程处理一些公共事务，比如日志等；worker 进程使用建立的 IPC（Inter-Process Communication）通信通道和 master 进程通信，和 master 进程共享服务端口。</p><p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/7.png" alt></p><p>  新增 fibo-10.js，模拟发送 10 次请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fibo-10.js</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">`http://127.0.0.1:9000/fibo?num=38`</span></span><br><span class="line"><span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    axios.get(url).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.data, <span class="string">`耗时: <span class="subst">$&#123; <span class="built_in">Date</span>.now() - start &#125;</span>ms`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  可以看到，只使用了一个进程，10 个请求慢慢阻塞，累计耗时 15 秒：</p><p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/8.png" alt></p><p>  接下来，将 app.js 稍微改动下，引入 cluster 模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>)</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length</span><br><span class="line"><span class="comment">// const numCPUs = 10 // worker 进程的数量一般和 CPU 核心数相同</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)()</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来测试是否被阻塞</span></span><br><span class="line">router.get(<span class="string">'/test'</span>, (ctx) =&gt; &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        pid: process.pid,</span><br><span class="line">        msg: <span class="string">'Hello World'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/fibo'</span>, (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; num = <span class="number">38</span> &#125; = ctx.query</span><br><span class="line">    <span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="comment">// 斐波那契数列</span></span><br><span class="line">    <span class="keyword">const</span> fibo = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">1</span> ? fibo(n - <span class="number">1</span>) + fibo(n - <span class="number">2</span>) : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    fibo(num)</span><br><span class="line"></span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        pid: process.pid,</span><br><span class="line">        duration: <span class="built_in">Date</span>.now() - start</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.use(router.routes())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Master <span class="subst">$&#123;process.pid&#125;</span> is running`</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 衍生 worker 进程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;</span><br><span class="line">        cluster.fork()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cluster.on(<span class="string">'exit'</span>, (worker, code, signal) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`worker <span class="subst">$&#123;worker.process.pid&#125;</span> died`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    app.listen(<span class="number">9000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Worker <span class="subst">$&#123;process.pid&#125;</span> started`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  执行<code>node app.js</code>启动服务，可以看到，cluster 帮我们创建了 1 个 master 进程和 4 个 worker 进程：</p><p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/9.png" alt><br><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/10.png" alt></p><p>  通过 fibo-10.js  模拟发送 10 次请求，可以看到，四个进程处理 10 个请求耗时近 9 秒：</p><p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/11.png" alt></p><p>  当启动 10 个 worker 进程时，看看效果：</p><p><img src="https://images-hosting.liuxianyu.cn/posts/node-process-thread/12.png" alt></p><p>  仅需不到 3 秒，不过进程的数量也不是无限的。在日常开发中，worker 进程的数量一般和 CPU 核心数相同。</p><h4 id="2-5-多进程说明"><a class="header-anchor" href="#2-5-多进程说明">¶</a>2.5、多进程说明</h4><p>  开启多进程不全是为了处理高并发，而是为了解决 Node.js 对于多核 CPU 利用率不足的问题。<br>  由父进程通过 fork 方法衍生出来的子进程拥有和父进程一样的资源，但是各自独立，互相之间资源不共享。通常根据 CPU 核心数来设置进程数量，因为系统资源是有限的。</p><h3 id="三-总结"><a class="header-anchor" href="#三-总结">¶</a>三、总结</h3><p>  1、大部分通过多线程解决 CPU 密集型计算任务的方案都可以通过多进程方案来替代；<br>  2、Node.js 虽然异步，但是不代表不会阻塞，CPU 密集型任务最好不要在主线程处理，保证主线程的畅通；<br>  3、不要一味的追求高性能和高并发，达到系统需要即可，高效、敏捷才是项目需要的，这也是 Node.js 轻量的特点。<br>  4、Node.js 中的进程和线程还有很多概念在文章中提到了但没展开细讲或没提到的，比如：Node.js 底层 I/O 的 libuv、IPC 通信通道、多进程如何守护、进程间资源不共享如何处理定时任务、agent 进程等；<br>  5、以上代码可在 <a href="https://github.com/liuxy0551/node-process-thread" target="_black">https://github.com/liuxy0551/node-process-thread</a> 查看。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  线程和进程是计算机操作系统的基础概念，在程序员中属于高频词汇，那如何理解呢？Node.js 中的进程和线程又是怎样的呢？&lt;/p&gt;
    
    </summary>
    
      <category term="node" scheme="https://liuxianyu.cn/categories/node/"/>
    
    
      <category term="node" scheme="https://liuxianyu.cn/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Apache Bench(ab) 的使用方法</title>
    <link href="https://liuxianyu.cn/article/apache-bench.html"/>
    <id>https://liuxianyu.cn/article/apache-bench.html</id>
    <published>2022-02-22T16:41:45.000Z</published>
    <updated>2022-02-22T16:41:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>  ApacheBench 是 Apache 服务器自带的一个 web 压力测试工具，简称 ab。ab 是一个命令行工具，对发起负载的本机要求很低，根据 ab 命令可以创建很多的并发访问线程，模拟多个访问者同时对某一 URL 地址进行访问，因此可以用来测试目标服务器的负载压力。总的来说 ab 工具小巧简单，可以提供需要的基本性能指标，但是没有图形化结果，不能监控。这里记录下参数含义。</p><a id="more"></a><p>  格式：ab [options] [http://]hostname[:port]/path</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -c 10 -n 10 http://baidu.com/</span><br></pre></td></tr></table></figure><p>指令解释：</p><ul><li><code>-n</code> 本次测试发起的总请求数</li><li><code>-c</code> 一次产生的请求数（或并发数）</li><li><code>-t</code> 测试所进行的最大秒数，默认没有时间限制</li><li><code>-r</code> 抛出异常继续执行测试任务</li><li><code>-p</code> 包含了需要 POST 的数据的文件，文件格式如<code>p1=1&amp;p2=2</code>，使用方法是<code>-p 111.txt</code></li><li><code>-T</code> POST 数据所使用的 Content-type 头信息，如<code>-T “application/x-www-form-urlencoded”</code>，配合<code>-p</code>使用</li><li><code>-v</code> 设置显示信息的详细程度 – 4或更大值会显示头信息， 3或更大值可以显示响应代码(404, 200等), 2或更大值可以显示警告和其他信息。 -V 显示版本号并退出</li><li><code>-c</code> <code>-C cookie-name=value</code>对请求附加一个 Cookie:行。其典型形式是<code>name=value</code>的一个参数对。此参数可以重复，用逗号分割。</li><li><code>-w</code> 以 HTML 表的格式输出结果，默认是白色背景的两列宽度的一张表。</li></ul><p>  参数很多，一般我们用<code>-c</code>和<code>-n</code>参数就可以了，<code>ab -c 并发数 -n 请求数 URL地址</code>。</p><p><code>-c</code>后面的 10 表示采用 10 个并发（模拟 10 个人同时访问），<code>-n</code>后面的 10 代表总共发出 10 个请求；后面的网址表示测试的目标 URL。</p><p><img src="https://images-hosting.liuxianyu.cn/posts/apache-bench/1.png" alt></p><ul><li>Document Path 测试页面</li><li>Document Length 页面大小</li><li>Concurrency Level 测试的并发数</li><li>Time taken for tests 整个测试持续的时间</li><li>Complete requests 完成的请求数量</li><li>Failed requests 失败的请求数量</li><li>Write errors: 0</li><li>Total transferred 整个过程中的网络传输量</li><li>HTML transferred 整个过程中的HTML内容传输量</li><li>Requests per second 最重要的指标之一，相当于LR中的每秒事务数，后面括号中的mean表示这是一个平均值</li><li>Time per request 最重要的指标之二，相当于LR中的平均事务响应时间，后面括号中的mean表示这是一个平均值</li><li>Time per request 每个连接请求实际运行时间的平均值</li><li>Transfer rate 平均每秒网络上的流量，可以帮助排除是否存在网络流量过大导致响应时间延长的问题</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  ApacheBench 是 Apache 服务器自带的一个 web 压力测试工具，简称 ab。ab 是一个命令行工具，对发起负载的本机要求很低，根据 ab 命令可以创建很多的并发访问线程，模拟多个访问者同时对某一 URL 地址进行访问，因此可以用来测试目标服务器的负载压力。总的来说 ab 工具小巧简单，可以提供需要的基本性能指标，但是没有图形化结果，不能监控。这里记录下参数含义。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://liuxianyu.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://liuxianyu.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>React 项目中同时引入 antd3.x 和 antd4.x</title>
    <link href="https://liuxianyu.cn/article/antd3-antd4-together.html"/>
    <id>https://liuxianyu.cn/article/antd3-antd4-together.html</id>
    <published>2022-02-13T11:33:16.000Z</published>
    <updated>2022-03-31T16:23:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>  公司的项目中一直使用的是<code>antd3.x</code>，最近有个需求，<code>TreeSelect</code>支持多选和模糊搜索的时候，模糊搜索后选中某个选项，不清除搜索条件，点击组件外其他地方才清除搜索条件。思路是如下：</p><ul><li>设置 autoClearSearchValue 为 false，选择选项后不清除搜索框</li><li>监听 onBlur 事件，触发时清除搜索框</li></ul><a id="more"></a><h3 id="一-使用-antd3-x"><a class="header-anchor" href="#一-使用-antd3-x">¶</a>一、使用 antd3.x</h3><p>  由于年久失修，antd3.x 有很多 api 有错误，会影响业务场景，这里就有一个坑：</p><p>  <code>antd3.x TreeSelect</code>，在第一次获得焦点时，会依次触发<code>onFocus</code>、<code>onBlur</code>、<code>onFocus</code>，此时会清除一下搜索框，第一次还没有输入搜索条件，清除也无伤大雅。</p><p><img src="https://images-hosting.liuxianyu.cn/posts/antd3-antd4-together/1.gif" alt></p><p>  输入搜索内容后，选择某个选项，此时会发现，第一次选择选项，会再次出触发<code>onBlur</code>事件，这就让人很尴尬了，这样会让开发者无法区分<code>onBlur</code>到底是搜索后第一次选择选项触发的，还是点击组件外触发的，也就不能在<code>onBlur</code>事件中清除搜索条件，否则与需求不符。</p><p><img src="https://images-hosting.liuxianyu.cn/posts/antd3-antd4-together/2.gif" alt></p><blockquote><p><strong>思考</strong><br>我们去<code>antd4.x TreeSelect</code>尝试了一下，发现没有这个问题，所以着手引入 antd4.x；<br>但是项目中目前暂时不能全部升级 antd4.x，否则改动太大；<br>最终考虑同时引入 antd3.x 和 antd4.x。</p></blockquote><h3 id="二-使用-antd4-x"><a class="header-anchor" href="#二-使用-antd4-x">¶</a>二、使用 antd4.x</h3><h4 id="2-1-安装"><a class="header-anchor" href="#2-1-安装">¶</a>2.1、安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add antd-v4@npm:antd@^4</span><br></pre></td></tr></table></figure><p>  安装完成后可以在 package.json 和 yarn.lock 中看到安装的依赖：</p><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/antd3-antd4-together/3.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/antd3-antd4-together/4.png" alt></div></div><div class="group-picture-row"></div></div></div><h4 id="2-2-配置-css-loader"><a class="header-anchor" href="#2-2-配置-css-loader">¶</a>2.2、配置 css loader</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      include: [</span><br><span class="line">        path.resolve(__dirname, <span class="string">"../../node_modules/antd-v4"</span>),</span><br><span class="line">      ],</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">'style-loader'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'css-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            importLoaders: <span class="number">1</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'less-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            javascriptEnabled: <span class="literal">true</span>,</span><br><span class="line">            modifyVars: &#123;</span><br><span class="line">              <span class="string">'@ant-prefix'</span>: <span class="string">'ant-v4'</span>,</span><br><span class="line">              <span class="string">'@primary-color'</span>: <span class="string">'#237804'</span>, <span class="comment">// 主题色</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><code>style-loader</code>将打包后的 css 代码添加到页面头部</li><li><code>css-loader</code>加载 css 文件，<code>importLoaders</code>的含义可参考：<a href="https://zhuanlan.zhihu.com/p/94706976" target="_black">css-loader中importLoaders的理解</a></li><li><code>less-loader</code>将 less 转成 css，<code>modifyVars</code>可以修改 less 中变量的值，我们再配合 antd4.x ConfigProvider 的 prefixCls 属性，搭配 ant-prefix 将样式前缀修改为<code>antd-v4</code>，故意修改下主题色，可以更显眼的看到是否成功</li></ul><p>  如果已经配置了 less loader，建议给之前的规则添加 exclude：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exclude: [</span><br><span class="line">  path.resolve(__dirname, <span class="string">"../../node_modules/antd-v4"</span>),</span><br><span class="line">],</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong><br><code>path.resolve</code> 处理的是 node_modules 中的 antd-v4，注意路径<br>修改 webpack 配置后需要重启项目</p></blockquote><h4 id="2-3-引入样式-组件"><a class="header-anchor" href="#2-3-引入样式-组件">¶</a>2.3、引入样式、组件</h4><p>  在<code>/src/components</code>下新建一个文件夹 <code>TreeSelectV4</code>，添加 index.tsx：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装 antd4.x 的 TreeSelect</span></span><br><span class="line"><span class="comment"> * 使用的地方可以直接使用 TreeSelectV4，不再需要引入各种 antd4.x 的依赖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ConfigProvider, TreeSelect &#125; <span class="keyword">from</span> <span class="string">'antd-v4'</span>;</span><br><span class="line"><span class="keyword">import</span> zhCN <span class="keyword">from</span> <span class="string">'antd-v4/es/locale/zh_CN'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'antd-v4/dist/antd.less'</span>;</span><br><span class="line"><span class="comment">// import './style.scss'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> TreeSelectV4 <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ConfigProvider locale=&#123;zhCN&#125; prefixCls=<span class="string">"ant-v4"</span>&gt;</span><br><span class="line">        &lt;TreeSelect &#123;...this.props&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/ConfigProvider&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>prefixCls 是样式前缀，这里统一写成<code>ant-v4</code>。</li></ul><p><img src="https://images-hosting.liuxianyu.cn/posts/antd3-antd4-together/5.gif" alt></p><blockquote><p><strong>注意</strong><br>建议完成以上内容后执行 lint、check-types、test 等命令<br>建议升级<code>typescript</code>等相关依赖的版本</p></blockquote><h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3><p>1、<a href="https://3x.ant.design/components/tree-select-cn/" target="_black">antd3.x 的 TreeSelect</a><br>2、<a href="https://ant.design/components/tree-select-cn/" target="_black">antd4.x 的 TreeSelect</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  公司的项目中一直使用的是&lt;code&gt;antd3.x&lt;/code&gt;，最近有个需求，&lt;code&gt;TreeSelect&lt;/code&gt;支持多选和模糊搜索的时候，模糊搜索后选中某个选项，不清除搜索条件，点击组件外其他地方才清除搜索条件。思路是如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置 autoClearSearchValue 为 false，选择选项后不清除搜索框&lt;/li&gt;
&lt;li&gt;监听 onBlur 事件，触发时清除搜索框&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="https://liuxianyu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="AntD" scheme="https://liuxianyu.cn/tags/AntD/"/>
    
  </entry>
  
  <entry>
    <title>账号簿开发（四）—— 写一个随机密码生成器</title>
    <link href="https://liuxianyu.cn/article/account-notebook-d.html"/>
    <id>https://liuxianyu.cn/article/account-notebook-d.html</id>
    <published>2021-12-14T21:39:53.000Z</published>
    <updated>2021-12-14T21:39:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>  用户在第一次注册网站时，可以使用<code>随机密码生成器</code>生成一个密码，可以控制密码长度和密码包含的内容项（大小写字母、数字、字符），不满意可以重新生成。</p><a id="more"></a><p>  这是一个系列随笔，主要记录『账号簿』微信小程序的开发过程：<br>  <a href="https://liuxianyu.cn/article/account-notebook.html" target="_black">账号簿（微信小程序）的开发过程</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-a.html" target="_black">账号簿开发（一）—— 微信小程序 AES 加密解密</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-b.html" target="_black">账号簿开发（二）—— 微信小程序检查更新及调试</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-c.html" target="_black">账号簿开发（三）—— 微信小程序的云开发</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-d.html" target="_black">账号簿开发（四）—— 写一个随机密码生成器</a></p><h3 id="一-实现效果"><a class="header-anchor" href="#一-实现效果">¶</a>一、实现效果</h3><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/6.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/7.gif" alt></div></div><div class="group-picture-row"></div></div></div><h3 id="二-需求分解"><a class="header-anchor" href="#二-需求分解">¶</a>二、需求分解</h3><ul><li>写一个方法，接收密码包含的内容项（大小写字母、数字、字符）和需要的长度</li><li>根据密码长度确定每个内容项出现几次，取余后的从所有内容项中随机取</li><li>将上述得到的密码字符串使用乱序算法打乱</li></ul><h3 id="三-代码实现"><a class="header-anchor" href="#三-代码实现">¶</a>三、代码实现</h3><h4 id="3-1-基础单元"><a class="header-anchor" href="#3-1-基础单元">¶</a>3.1、基础单元</h4><ul><li>大写字母: <code>ABCDEFGHIJKLMNPQRSTUVWXYZ</code></li><li>小写字母: <code>abcdefghijklmnopqrstuvwxyz</code></li><li>数字: <code>1234567890</code></li><li>符号: <code>~!@#$%^&amp;*()[]{}:,./?-_+=&lt;&gt;</code></li></ul><h4 id="3-2-生成分段式密码"><a class="header-anchor" href="#3-2-生成分段式密码">¶</a>3.2、生成分段式密码</h4><p>  完整代码：<a href="https://github.com/liuxy0551/account-notebook/blob/master/src/utils/password.js" target="_black">/src/utils/password.js</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成随机密码</span></span><br><span class="line"><span class="comment"> * 1、先确定 average，平均每类选多少个字符</span></span><br><span class="line"><span class="comment"> * 2、remainder 剩余的从累加字符串中随机取</span></span><br><span class="line"><span class="comment"> * 3、使用乱序算法，打乱字符串 https://blog.csdn.net/yunlliang/article/details/41084785</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>包含的项，upper 大写字母，lower 小写字母，number 数字，symbol 特殊符号  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>密码长度 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="variable">string</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getRandomPassword = <span class="function">(<span class="params">arr = [], length</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> average = <span class="built_in">Math</span>.floor(length / arr.length)</span><br><span class="line">    <span class="keyword">const</span> remainder = length % arr.length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>, allStr = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        str += getRandomStr(i, average)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> allStr += strObj[item])</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; remainder; i++) &#123;</span><br><span class="line">        str += allStr[random(allStr.length)]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shuffle(str.split(<span class="string">''</span>)).join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取固定个数的字符串</span></span><br><span class="line"><span class="keyword">const</span> getRandomStr = <span class="function">(<span class="params">key, average</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> str = strObj[key], result = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; average; i++) &#123;</span><br><span class="line">        result += str[random(str.length)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成范围内的随机整数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>max </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>min </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="variable">number</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> random = <span class="function">(<span class="params">max, min = <span class="number">0</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min)) + min</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-乱序算法"><a class="header-anchor" href="#3-3-乱序算法">¶</a>3.3、乱序算法</h4><p>  上述拿到的密码是一个分段式的密码，举个例子，我需要长度为 8 且包含大小写字母、数字的密码，那么经常上述方法，得到的会是这样一个密码：<code>Aa1Aa1Aa</code>，即按包含的项依次拿出单个字符串的密码，最后拼接在一起。<br>  显然上述得到的密码不太实用，而且不够安全，这时候可以将上述密码打乱一下顺序，即可得到最终的密码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 乱序算法</span></span><br><span class="line"><span class="keyword">const</span> shuffle = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">let</span> j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (i + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">let</span> temp = arr[i]</span><br><span class="line">        arr[i] = arr[j]</span><br><span class="line">        arr[j] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-组件调用"><a class="header-anchor" href="#3-4-组件调用">¶</a>3.4、组件调用</h4><p>  完整代码：<a href="https://github.com/liuxy0551/account-notebook/blob/master/src/pages/account/components/NewPassword/index.jsx" target="_black">/src/pages/account/components/NewPassword/index.jsx</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> checkboxList = [</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">'upper'</span>, <span class="attr">label</span>: <span class="string">'包含大写字母'</span>, <span class="attr">checked</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">'lower'</span>, <span class="attr">label</span>: <span class="string">'包含小写字母'</span>, <span class="attr">checked</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">'number'</span>, <span class="attr">label</span>: <span class="string">'包含数字'</span>, <span class="attr">checked</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">'symbol'</span>, <span class="attr">label</span>: <span class="string">'包含符号'</span>, <span class="attr">checked</span>: <span class="literal">false</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> checkboxValue = checkboxList.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.checked).map(<span class="function"><span class="params">item</span> =&gt;</span> item.value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lengthIdx = <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> lengthList = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">6</span>; i &lt;= <span class="number">30</span>; i++) &#123;</span><br><span class="line">    lengthList.push(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> password = getRandomPassword(checkboxValue, lengthList[lengthIdx])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  用户在第一次注册网站时，可以使用&lt;code&gt;随机密码生成器&lt;/code&gt;生成一个密码，可以控制密码长度和密码包含的内容项（大小写字母、数字、字符），不满意可以重新生成。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://liuxianyu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="微信小程序" scheme="https://liuxianyu.cn/categories/%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="https://liuxianyu.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Sequelize 中的一对一、一对多、多对多</title>
    <link href="https://liuxianyu.cn/article/sequelize-association.html"/>
    <id>https://liuxianyu.cn/article/sequelize-association.html</id>
    <published>2021-09-21T18:53:17.000Z</published>
    <updated>2021-09-21T18:53:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>  最近做了写公司中的基建工作，其中涉及到了 node 项目中使用 sequelize，同时有多对多的关系需要处理，便写了个关于 sequelize 处理多对多关系的练手示例，<a href="https://github.com/liuxy0551/sequelize-association" target="_black">liuxy0551/sequelize-association</a>，目前仅涉及查询，<code>create</code>和<code>update</code>暂未进行。</p><a id="more"></a><p>  sql 语句 <a href="https://github.com/liuxy0551/sequelize-association/tree/master/sql" target="_black">点此查看</a>。</p><h3 id="一-一对一"><a class="header-anchor" href="#一-一对一">¶</a>一、一对一</h3><p>  一对一的举例是：一个中国公民 (Chinese) 只有一个身份证号 (IDNumber) ，具体实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> models = initModels(sequelize)</span><br><span class="line"><span class="keyword">const</span> &#123; Chinese, IDNumber &#125; = models</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立关系</span></span><br><span class="line">Chinese.hasOne(IDNumber, &#123; <span class="attr">foreignKey</span>: <span class="string">'id'</span>, <span class="attr">sourceKey</span>: <span class="string">'IDNumberId'</span>, <span class="attr">as</span>: <span class="string">'IDNumberInfo'</span> &#125;)</span><br><span class="line">IDNumber.belongsTo(Chinese, &#123; <span class="attr">foreignKey</span>: <span class="string">'id'</span>, <span class="attr">targetKey</span>: <span class="string">'IDNumberId'</span> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service 层实现</span></span><br><span class="line"><span class="keyword">async</span> getChinese (ctx) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; offset, limit, page, pageSize &#125; = getPage(ctx.query)</span><br><span class="line">        <span class="keyword">const</span> &#123; count, rows &#125; = <span class="keyword">await</span> DB.Chinese.findAndCountAll(&#123;</span><br><span class="line">            where: getWhere(),</span><br><span class="line">            attributes: &#123;</span><br><span class="line">                exclude: getExclude(),</span><br><span class="line">            &#125;,</span><br><span class="line">            include: [</span><br><span class="line">                &#123;</span><br><span class="line">                    model: DB.IDNumber,</span><br><span class="line">                    <span class="keyword">as</span>: <span class="string">"IDNumberInfo"</span>,</span><br><span class="line">                    required: <span class="literal">false</span>,</span><br><span class="line">                    where: getWhere(),</span><br><span class="line">                    attributes: &#123;</span><br><span class="line">                        exclude: getExclude(),</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            ],</span><br><span class="line">            offset,</span><br><span class="line">            limit,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> setCtxBody(<span class="number">200</span>, rows, <span class="string">'成功'</span>, &#123; <span class="attr">total</span>: count, page, pageSize &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> setCtxBody(<span class="number">500</span>, error, <span class="string">'系统错误'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  接口返回的结果如下：<br><img src="https://images-hosting.liuxianyu.cn/posts/sequelize-association/1.png" alt></p><p>  sequelize 自动生成的 sql 语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="string">`Chinese`</span>.<span class="string">`id`</span>,</span><br><span class="line"><span class="string">`Chinese`</span>.<span class="string">`IDNumberId`</span>,</span><br><span class="line"><span class="string">`Chinese`</span>.<span class="string">`name`</span>,</span><br><span class="line"><span class="string">`Chinese`</span>.<span class="string">`createdAt`</span>,</span><br><span class="line"><span class="string">`Chinese`</span>.<span class="string">`updatedAt`</span>,</span><br><span class="line"><span class="string">`IDNumberInfo`</span>.<span class="string">`id`</span> <span class="keyword">AS</span> <span class="string">`IDNumberInfo.id`</span>,</span><br><span class="line"><span class="string">`IDNumberInfo`</span>.<span class="string">`number`</span> <span class="keyword">AS</span> <span class="string">`IDNumberInfo.number`</span>,</span><br><span class="line"><span class="string">`IDNumberInfo`</span>.<span class="string">`address`</span> <span class="keyword">AS</span> <span class="string">`IDNumberInfo.address`</span>,</span><br><span class="line"><span class="string">`IDNumberInfo`</span>.<span class="string">`createdAt`</span> <span class="keyword">AS</span> <span class="string">`IDNumberInfo.createdAt`</span>,</span><br><span class="line"><span class="string">`IDNumberInfo`</span>.<span class="string">`updatedAt`</span> <span class="keyword">AS</span> <span class="string">`IDNumberInfo.updatedAt`</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">`Chinese`</span> <span class="keyword">AS</span> <span class="string">`Chinese`</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="string">`IDNumber`</span> <span class="keyword">AS</span> <span class="string">`IDNumberInfo`</span> <span class="keyword">ON</span> <span class="string">`Chinese`</span>.<span class="string">`IDNumberId`</span> = <span class="string">`IDNumberInfo`</span>.<span class="string">`id`</span> </span><br><span class="line"><span class="keyword">AND</span> <span class="string">`IDNumberInfo`</span>.<span class="string">`isDeleted`</span> = <span class="number">0</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="string">`Chinese`</span>.<span class="string">`isDeleted`</span> = <span class="number">0</span> </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,</span><br><span class="line"><span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="二-一对多"><a class="header-anchor" href="#二-一对多">¶</a>二、一对多</h3><p>  一对多的举例是：一个省份 (Province) 有多个市 (City)，具体实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> models = initModels(sequelize)</span><br><span class="line"><span class="keyword">const</span> &#123; Province, City &#125; = models</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立关系</span></span><br><span class="line">Province.hasMany(City, &#123; <span class="attr">as</span>: <span class="string">'cityList'</span> &#125;)</span><br><span class="line">City.belongsTo(Province, &#123; <span class="attr">foreignKey</span>: <span class="string">'id'</span> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service 层实现</span></span><br><span class="line"><span class="keyword">async</span> getProvinceList (ctx) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; offset, limit, page, pageSize &#125; = getPage(ctx.query)</span><br><span class="line">        <span class="keyword">const</span> &#123; count, rows &#125; = <span class="keyword">await</span> DB.Province.findAndCountAll(&#123;</span><br><span class="line">            where: getWhere(),</span><br><span class="line">            attributes: &#123;</span><br><span class="line">                exclude: getExclude(),</span><br><span class="line">            &#125;,</span><br><span class="line">            include: [</span><br><span class="line">                &#123;</span><br><span class="line">                    model: DB.City,</span><br><span class="line">                    <span class="keyword">as</span>: <span class="string">'cityList'</span>,</span><br><span class="line">                    required: <span class="literal">false</span>,</span><br><span class="line">                    where: getWhere(),</span><br><span class="line">                    attributes: &#123;</span><br><span class="line">                        exclude: getExclude([<span class="string">'ProvinceId'</span>]),</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            offset,</span><br><span class="line">            limit,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> setCtxBody(<span class="number">200</span>, rows, <span class="string">'成功'</span>, &#123; <span class="attr">total</span>: count, page, pageSize &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> setCtxBody(<span class="number">500</span>, error, <span class="string">'系统错误'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  接口返回的结果如下：<br><img src="https://images-hosting.liuxianyu.cn/posts/sequelize-association/2.png" alt></p><p>  sequelize 自动生成的 sql 语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="string">`Province`</span>.*,</span><br><span class="line"><span class="string">`cityList`</span>.<span class="string">`id`</span> <span class="keyword">AS</span> <span class="string">`cityList.id`</span>,</span><br><span class="line"><span class="string">`cityList`</span>.<span class="string">`provinceId`</span> <span class="keyword">AS</span> <span class="string">`cityList.provinceId`</span>,</span><br><span class="line"><span class="string">`cityList`</span>.<span class="string">`name`</span> <span class="keyword">AS</span> <span class="string">`cityList.name`</span>,</span><br><span class="line"><span class="string">`cityList`</span>.<span class="string">`createdAt`</span> <span class="keyword">AS</span> <span class="string">`cityList.createdAt`</span>,</span><br><span class="line"><span class="string">`cityList`</span>.<span class="string">`updatedAt`</span> <span class="keyword">AS</span> <span class="string">`cityList.updatedAt`</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="string">`Province`</span>.<span class="string">`id`</span>,</span><br><span class="line"><span class="string">`Province`</span>.<span class="string">`name`</span>,</span><br><span class="line"><span class="string">`Province`</span>.<span class="string">`createdAt`</span>,</span><br><span class="line"><span class="string">`Province`</span>.<span class="string">`updatedAt`</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">`Province`</span> <span class="keyword">AS</span> <span class="string">`Province`</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="string">`Province`</span>.<span class="string">`isDeleted`</span> = <span class="number">0</span> </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,</span><br><span class="line"><span class="number">10</span> </span><br><span class="line">) <span class="keyword">AS</span> <span class="string">`Province`</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="string">`City`</span> <span class="keyword">AS</span> <span class="string">`cityList`</span> <span class="keyword">ON</span> <span class="string">`Province`</span>.<span class="string">`id`</span> = <span class="string">`cityList`</span>.<span class="string">`ProvinceId`</span> </span><br><span class="line"><span class="keyword">AND</span> <span class="string">`cityList`</span>.<span class="string">`isDeleted`</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="三-多对多"><a class="header-anchor" href="#三-多对多">¶</a>三、多对多</h3><p>  多对多的举例是：一部电影 (Movie) 有多个演员 (Actor), 一个演员 (Actor) 参演多部电影 (Movie)，具体实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> models = initModels(sequelize)</span><br><span class="line"><span class="keyword">const</span> &#123; Movie, Actor, MovieActor &#125; = models</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立关系</span></span><br><span class="line">Movie.belongsToMany(Actor, &#123; <span class="attr">through</span>: MovieActor, <span class="attr">as</span>: <span class="string">'actorList'</span> &#125;)</span><br><span class="line">Actor.belongsToMany(Movie, &#123; <span class="attr">through</span>: MovieActor, <span class="attr">as</span>: <span class="string">'movieList'</span> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service 层实现</span></span><br><span class="line"><span class="keyword">async</span> getMovieListWithActors (ctx) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; offset, limit, page, pageSize &#125; = getPage(ctx.query)</span><br><span class="line">        <span class="keyword">const</span> &#123; count, rows &#125; = <span class="keyword">await</span> DB.Movie.findAndCountAll(&#123;</span><br><span class="line">            where: getWhere(),</span><br><span class="line">            attributes: &#123;</span><br><span class="line">                exclude: getExclude()</span><br><span class="line">            &#125;,</span><br><span class="line">            include: [</span><br><span class="line">                &#123;</span><br><span class="line">                    model: DB.Actor,</span><br><span class="line">                    <span class="keyword">as</span>: <span class="string">'actorList'</span>,</span><br><span class="line">                    required: <span class="literal">false</span>,</span><br><span class="line">                    where: getWhere(),</span><br><span class="line">                    attributes: &#123;</span><br><span class="line">                        exclude: getExclude(),</span><br><span class="line">                    &#125;,</span><br><span class="line">                    through: &#123; <span class="attr">attributes</span>: [] &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            offset,</span><br><span class="line">            limit,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> setCtxBody(<span class="number">200</span>, rows, <span class="string">'成功'</span>, &#123; <span class="attr">total</span>: count, page, pageSize &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> setCtxBody(<span class="number">500</span>, error, <span class="string">'系统错误'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> getActorListWithMovies (ctx) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; offset, limit, page, pageSize &#125; = getPage(ctx.query)</span><br><span class="line">        <span class="keyword">const</span> &#123; count, rows &#125; = <span class="keyword">await</span> DB.Actor.findAndCountAll(&#123;</span><br><span class="line">            where: getWhere(),</span><br><span class="line">            attributes: &#123;</span><br><span class="line">                exclude: getExclude()</span><br><span class="line">            &#125;,</span><br><span class="line">            include: [</span><br><span class="line">                &#123;</span><br><span class="line">                    model: DB.Movie,</span><br><span class="line">                    <span class="keyword">as</span>: <span class="string">'movieList'</span>,</span><br><span class="line">                    required: <span class="literal">false</span>,</span><br><span class="line">                    where: getWhere(),</span><br><span class="line">                    attributes: &#123;</span><br><span class="line">                        exclude: getExclude([<span class="string">'MovieActor'</span>]),</span><br><span class="line">                    &#125;,</span><br><span class="line">                    through: &#123; <span class="attr">attributes</span>: [] &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            offset,</span><br><span class="line">            limit,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> setCtxBody(<span class="number">200</span>, rows, <span class="string">'成功'</span>, &#123; <span class="attr">total</span>: count, page, pageSize &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> setCtxBody(<span class="number">500</span>, error, <span class="string">'系统错误'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  接口返回的结果如下：<br><img src="https://images-hosting.liuxianyu.cn/posts/sequelize-association/3.png" alt><br><img src="https://images-hosting.liuxianyu.cn/posts/sequelize-association/4.png" alt></p><p>  sequelize 自动生成的 sql 语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多对多 getActorListWithMovies</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="string">`Actor`</span>.*,</span><br><span class="line"><span class="string">`movieList`</span>.<span class="string">`id`</span> <span class="keyword">AS</span> <span class="string">`movieList.id`</span>,</span><br><span class="line"><span class="string">`movieList`</span>.<span class="string">`name`</span> <span class="keyword">AS</span> <span class="string">`movieList.name`</span>,</span><br><span class="line"><span class="string">`movieList`</span>.<span class="string">`createdAt`</span> <span class="keyword">AS</span> <span class="string">`movieList.createdAt`</span>,</span><br><span class="line"><span class="string">`movieList`</span>.<span class="string">`updatedAt`</span> <span class="keyword">AS</span> <span class="string">`movieList.updatedAt`</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="string">`Actor`</span>.<span class="string">`id`</span>,</span><br><span class="line"><span class="string">`Actor`</span>.<span class="string">`name`</span>,</span><br><span class="line"><span class="string">`Actor`</span>.<span class="string">`createdAt`</span>,</span><br><span class="line"><span class="string">`Actor`</span>.<span class="string">`updatedAt`</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">`Actor`</span> <span class="keyword">AS</span> <span class="string">`Actor`</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="string">`Actor`</span>.<span class="string">`isDeleted`</span> = <span class="number">0</span> </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,</span><br><span class="line"><span class="number">10</span> </span><br><span class="line">) <span class="keyword">AS</span> <span class="string">`Actor`</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> (</span><br><span class="line"><span class="string">`MovieActor`</span> <span class="keyword">AS</span> <span class="string">`movieList-&gt;MovieActor`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`Movie`</span> <span class="keyword">AS</span> <span class="string">`movieList`</span> <span class="keyword">ON</span> <span class="string">`movieList`</span>.<span class="string">`id`</span> = <span class="string">`movieList-&gt;MovieActor`</span>.<span class="string">`MovieId`</span> </span><br><span class="line">) <span class="keyword">ON</span> <span class="string">`Actor`</span>.<span class="string">`id`</span> = <span class="string">`movieList-&gt;MovieActor`</span>.<span class="string">`ActorId`</span> </span><br><span class="line"><span class="keyword">AND</span> <span class="string">`movieList`</span>.<span class="string">`isDeleted`</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多对多 getMovieListWithActors</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="string">`Movie`</span>.*,</span><br><span class="line"><span class="string">`actorList`</span>.<span class="string">`id`</span> <span class="keyword">AS</span> <span class="string">`actorList.id`</span>,</span><br><span class="line"><span class="string">`actorList`</span>.<span class="string">`name`</span> <span class="keyword">AS</span> <span class="string">`actorList.name`</span>,</span><br><span class="line"><span class="string">`actorList`</span>.<span class="string">`createdAt`</span> <span class="keyword">AS</span> <span class="string">`actorList.createdAt`</span>,</span><br><span class="line"><span class="string">`actorList`</span>.<span class="string">`updatedAt`</span> <span class="keyword">AS</span> <span class="string">`actorList.updatedAt`</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="string">`Movie`</span>.<span class="string">`id`</span>,</span><br><span class="line"><span class="string">`Movie`</span>.<span class="string">`name`</span>,</span><br><span class="line"><span class="string">`Movie`</span>.<span class="string">`createdAt`</span>,</span><br><span class="line"><span class="string">`Movie`</span>.<span class="string">`updatedAt`</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">`Movie`</span> <span class="keyword">AS</span> <span class="string">`Movie`</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="string">`Movie`</span>.<span class="string">`isDeleted`</span> = <span class="number">0</span> </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,</span><br><span class="line"><span class="number">10</span> </span><br><span class="line">) <span class="keyword">AS</span> <span class="string">`Movie`</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> (</span><br><span class="line"><span class="string">`MovieActor`</span> <span class="keyword">AS</span> <span class="string">`actorList-&gt;MovieActor`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`Actor`</span> <span class="keyword">AS</span> <span class="string">`actorList`</span> <span class="keyword">ON</span> <span class="string">`actorList`</span>.<span class="string">`id`</span> = <span class="string">`actorList-&gt;MovieActor`</span>.<span class="string">`ActorId`</span> </span><br><span class="line">) <span class="keyword">ON</span> <span class="string">`Movie`</span>.<span class="string">`id`</span> = <span class="string">`actorList-&gt;MovieActor`</span>.<span class="string">`MovieId`</span> </span><br><span class="line"><span class="keyword">AND</span> <span class="string">`actorList`</span>.<span class="string">`isDeleted`</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="四-注意事项"><a class="header-anchor" href="#四-注意事项">¶</a>四、注意事项</h3><p>  1、在使用关联关系进行查询时，请求参数中不要使用<code>raw: true</code>，<code>raw</code>默认为 false，此时 sequelize 会自动拼接一些参数，设为 true 的话，会丢失参数导致数据结构错乱，如下图：<br><img src="https://images-hosting.liuxianyu.cn/posts/sequelize-association/5.png" alt><br>  2、一对多时会出现返回的结果包含了大驼峰写法的关联 id 及值，可通过<code>include attributes exclude</code>将该字段过滤；<br>  3、多对多时，一般不需要展示关联表的字段，可通过<code>include through attributes</code>将关联表字段过滤，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; count, rows &#125; = <span class="keyword">await</span> DB.Actor.findAndCountAll(&#123;</span><br><span class="line">    ...</span><br><span class="line">    include: [</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">            through: &#123; <span class="attr">attributes</span>: [] &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://images-hosting.liuxianyu.cn/posts/sequelize-association/6.png" alt><br>  4、建立关联关系时，可在<code>app/utils/mysql/db.js</code>中进行，引入的 initModels 中导出了所有 model 层，可参考：<a href="https://github.com/liuxy0551/sequelize-association/blob/master/app/utils/mysql/db.js" target="_black">app/utils/mysql/db.js</a>。<br>  5、多对多的关联查询可以分解为以下四条 sql 进行，在数据量大的时候能减少查询时间，也是简化 sql 语句的方法：</p><ul><li>查询电影表的总数量 total</li><li>查询电影表前十条数据</li><li>拿着上述十条数据去关联表查询关联数据，对关联的演员信息进行去重</li><li>拿着上述去重后的演员信息在演员表中查询，由代码拼装数据再从接口返回</li></ul><h3 id="五-占坑文章"><a class="header-anchor" href="#五-占坑文章">¶</a>五、占坑文章</h3><p>  1、预先加载，参考 <a href="https://www.sequelize.com.cn/advanced-association-concepts/eager-loading" target="_black">Sequelize 中文文档 - 预先加载</a></p><h3 id="六-参考文章"><a class="header-anchor" href="#六-参考文章">¶</a>六、参考文章</h3><p>  练习过程中较多的参考了以下文章中提到的内容，在此感谢：</p><p>[1] <a href="https://www.sequelize.com.cn/core-concepts/assocs" target="_black">Sequelize 中文文档 - 关联</a><br>[2] <a href="https://sequelize.org/master/manual/assocs.html#many-to-many-relationships" target="_black">Sequelize 英文官网 Many-To-Many relationships</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近做了写公司中的基建工作，其中涉及到了 node 项目中使用 sequelize，同时有多对多的关系需要处理，便写了个关于 sequelize 处理多对多关系的练手示例，&lt;a href=&quot;https://github.com/liuxy0551/sequelize-association&quot; target=&quot;_black&quot;&gt;liuxy0551/sequelize-association&lt;/a&gt;，目前仅涉及查询，&lt;code&gt;create&lt;/code&gt;和&lt;code&gt;update&lt;/code&gt;暂未进行。&lt;/p&gt;
    
    </summary>
    
      <category term="node" scheme="https://liuxianyu.cn/categories/node/"/>
    
      <category term="Sequelize" scheme="https://liuxianyu.cn/categories/node/Sequelize/"/>
    
    
      <category term="node" scheme="https://liuxianyu.cn/tags/node/"/>
    
      <category term="Sequelize" scheme="https://liuxianyu.cn/tags/Sequelize/"/>
    
  </entry>
  
  <entry>
    <title>账号簿开发（三）—— 微信小程序的云开发和云函数</title>
    <link href="https://liuxianyu.cn/article/account-notebook-c.html"/>
    <id>https://liuxianyu.cn/article/account-notebook-c.html</id>
    <published>2021-08-08T17:49:53.000Z</published>
    <updated>2021-08-08T17:49:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>  微信小程序的云开发是腾讯云为小程序提供的开发能力，可以省去后端的工作，也可以节省很多运维的工作，有些类似于 Serverless 和之前学习的<code>函数计算</code>，官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html" target="_black">微信云开发</a>。云开发的初始入门可以看看哔站上的视频，入门够用了，推荐一个：<a href="https://www.bilibili.com/video/BV1pE411C7Ca" target="_black">认识云开发</a>。</p><a id="more"></a><p>  这是一个系列随笔，主要记录『账号簿』微信小程序的开发过程：<br>  <a href="https://liuxianyu.cn/article/account-notebook.html" target="_black">账号簿（微信小程序）的开发过程</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-a.html" target="_black">账号簿开发（一）—— 微信小程序 AES 加密解密</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-b.html" target="_black">账号簿开发（二）—— 微信小程序检查更新及调试</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-c.html" target="_black">账号簿开发（三）—— 微信小程序的云开发</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-d.html" target="_black">账号簿开发（四）—— 写一个随机密码生成器</a></p><h3 id="一-云能力初始化"><a class="header-anchor" href="#一-云能力初始化">¶</a>一、云能力初始化</h3><p>  小程序端使用云能力前需要先完成初始化，<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/init.html" target="_black">小程序端初始化</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line">onLoad() &#123;</span><br><span class="line">  wx.cloud.init(&#123;</span><br><span class="line">    env: <span class="string">'prod-32r233wer424as22fq'</span>,</span><br><span class="line">    traceUser: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-数据库"><a class="header-anchor" href="#二-数据库">¶</a>二、数据库</h3><p>  使用数据库前先获取数据库的引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DB = wx.cloud.database()</span><br></pre></td></tr></table></figure><h4 id="2-1-增"><a class="header-anchor" href="#2-1-增">¶</a>2.1、增</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DB.collection(<span class="string">'user'</span>).add(&#123;</span><br><span class="line">  name: <span class="string">'Tom'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-2-改"><a class="header-anchor" href="#2-2-改">¶</a>2.2、改</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DB.collection(<span class="string">'user'</span>).where(&#123;</span><br><span class="line">  name: <span class="string">'Tom'</span></span><br><span class="line">&#125;).update(&#123;</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-3-查"><a class="header-anchor" href="#2-3-查">¶</a>2.3、查</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> DB.collection(<span class="string">'user'</span>).where(&#123;</span><br><span class="line">  name: <span class="string">'Tom'</span></span><br><span class="line">&#125;).get()</span><br><span class="line"><span class="built_in">console</span>.log(user) <span class="comment">// &#123; name: 'Tom', age: 20 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="三-云函数"><a class="header-anchor" href="#三-云函数">¶</a>三、云函数</h3><p>  云函数的优点有很多，比如在小程序端进行数据库插入时，会有条数限制，云函数则没有；天然鉴权，请求自带 openId 等等优势，和 Serverless 及之前学习的<code>函数计算</code>一致，官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions.html" target="_black">云函数</a>。<br>  推荐哔站的一个云函数入门视频：<a href="https://www.bilibili.com/video/BV1pE411C7Ca?p=12" target="_black">开发者工具中新建云函数</a>。</p><p>  代码参考：<a href="https://github.com/liuxy0551/account-notebook/tree/master/cloud" target="_black">获取用户 openId</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  微信小程序的云开发是腾讯云为小程序提供的开发能力，可以省去后端的工作，也可以节省很多运维的工作，有些类似于 Serverless 和之前学习的&lt;code&gt;函数计算&lt;/code&gt;，官方文档：&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html&quot; target=&quot;_black&quot;&gt;微信云开发&lt;/a&gt;。云开发的初始入门可以看看哔站上的视频，入门够用了，推荐一个：&lt;a href=&quot;https://www.bilibili.com/video/BV1pE411C7Ca&quot; target=&quot;_black&quot;&gt;认识云开发&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://liuxianyu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="微信小程序" scheme="https://liuxianyu.cn/categories/%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="https://liuxianyu.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>账号簿开发（二）—— 微信小程序检查更新及调试</title>
    <link href="https://liuxianyu.cn/article/account-notebook-b.html"/>
    <id>https://liuxianyu.cn/article/account-notebook-b.html</id>
    <published>2021-08-08T17:13:03.000Z</published>
    <updated>2021-08-08T17:13:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>  微信小程序发布上线后，对其进行迭代也需要微信官方审核代码，之后才可以发布新版本，对于已经使用过该小程序的用户来说，会因为缓存的关系，在小程序发布后不能及时更新到新版本。对于某些 bug 修复的版本，开发者总是希望能立即生效的，类似于 H5 的热更新，这时可以使用到微信提供的 <code>wx.getUpdateManager()</code>。官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/update/wx.getUpdateManager.html" target="_black">wx.getUpdateManager()</a></p><a id="more"></a><p>  这是一个系列随笔，主要记录『账号簿』微信小程序的开发过程：<br>  <a href="https://liuxianyu.cn/article/account-notebook.html" target="_black">账号簿（微信小程序）的开发过程</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-a.html" target="_black">账号簿开发（一）—— 微信小程序 AES 加密解密</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-b.html" target="_black">账号簿开发（二）—— 微信小程序检查更新及调试</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-c.html" target="_black">账号簿开发（三）—— 微信小程序的云开发</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-d.html" target="_black">账号簿开发（四）—— 写一个随机密码生成器</a></p><h3 id="一-代码封装"><a class="header-anchor" href="#一-代码封装">¶</a>一、代码封装</h3><p>  可以新建目录 <code>/src/utils/wechat</code>，在 wechat 目录下新建文件 <code>update.js</code>，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测小程序更新</span></span><br><span class="line"><span class="keyword">const</span> getUpdateInfo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!wx.canIUse(<span class="string">'getUpdateManager'</span>)) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">const</span> updateManager = wx.getUpdateManager()</span><br><span class="line">  updateManager.onCheckForUpdate(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.hasUpdate) &#123;</span><br><span class="line">      updateManager.onUpdateReady(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        wx.showModal(&#123;</span><br><span class="line">          title: <span class="string">'更新提示'</span>,</span><br><span class="line">          content: <span class="string">'新版本已经准备好了，是否立即重启小程序？'</span>,</span><br><span class="line">          success: <span class="function">(<span class="params">&#123; confirm &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 新版本已经下载好，调用 applyUpdate 应用新版本并重启</span></span><br><span class="line">            confirm &amp;&amp; updateManager.applyUpdate()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      updateManager.onUpdateFailed(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 新版本下载失败</span></span><br><span class="line">        wx.showModal(&#123;</span><br><span class="line">          title: <span class="string">'已经有新版本了哟~'</span>,</span><br><span class="line">          content: <span class="string">'新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  getUpdateInfo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-使用"><a class="header-anchor" href="#二-使用">¶</a>二、使用</h3><p>  可以在小程序入口文件 <code>app.js</code> 中的 onLoad 方法中使用封装的 getUpdateInfo 方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getUpdateInfo &#125; <span class="keyword">from</span> <span class="string">'@/utils/wechat/update'</span></span><br><span class="line"></span><br><span class="line">onLoad() &#123;</span><br><span class="line">  getUpdateInfo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-微信开发者工具调试"><a class="header-anchor" href="#三-微信开发者工具调试">¶</a>三、微信开发者工具调试</h3><blockquote><p><strong>注意</strong><br><strong>小程序 开发版/体验版 没有「版本」概念，所以无法在 开发版/体验版 上测试版本更新情况</strong></p></blockquote><p>  勾选<code>编译模式</code>下的<code>下次编译模拟更新</code>，并选择成功状态或失败状态，确认后点击<code>编译</code>按钮稍候片刻即可查看模拟效果：</p><p><img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/4.png" alt><br><img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/5.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  微信小程序发布上线后，对其进行迭代也需要微信官方审核代码，之后才可以发布新版本，对于已经使用过该小程序的用户来说，会因为缓存的关系，在小程序发布后不能及时更新到新版本。对于某些 bug 修复的版本，开发者总是希望能立即生效的，类似于 H5 的热更新，这时可以使用到微信提供的 &lt;code&gt;wx.getUpdateManager()&lt;/code&gt;。官方文档：&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/api/base/update/wx.getUpdateManager.html&quot; target=&quot;_black&quot;&gt;wx.getUpdateManager()&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://liuxianyu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="微信小程序" scheme="https://liuxianyu.cn/categories/%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="https://liuxianyu.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>账号簿开发（一）—— 微信小程序 AES 加密解密</title>
    <link href="https://liuxianyu.cn/article/account-notebook-a.html"/>
    <id>https://liuxianyu.cn/article/account-notebook-a.html</id>
    <published>2021-08-08T16:42:00.000Z</published>
    <updated>2021-08-08T16:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>  『账号簿』作为一款记录账号密码的微信小程序而言，安全自然是很重要的，基于此放弃了自行搭建数据库的打算，使用了腾讯云为微信小程序提供的云开发功能，同时也提供数据库的功能，是一个对象型的数据库，安全性比自己在 Docker 中搭建的数据库要高且有更多保障。但是即便如此，上传到数据库的账号密码也使用了业内普遍认可的 AES 对称加密算法进行加密再经 BASE64 编码。这里记录一下 AES 加密后再经 BASE64 编码的过程。</p><a id="more"></a><p>  这是一个系列随笔，主要记录『账号簿』微信小程序的开发过程：<br>  <a href="https://liuxianyu.cn/article/account-notebook.html" target="_black">账号簿（微信小程序）的开发过程</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-a.html" target="_black">账号簿开发（一）—— 微信小程序 AES 加密解密</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-b.html" target="_black">账号簿开发（二）—— 微信小程序检查更新及调试</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-c.html" target="_black">账号簿开发（三）—— 微信小程序的云开发</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-d.html" target="_black">账号簿开发（四）—— 写一个随机密码生成器</a></p><h3 id="一-cryptojs"><a class="header-anchor" href="#一-cryptojs">¶</a>一、CryptoJS</h3><p>  依赖 CryptoJS 进行加密，可以新建目录 <code>/src/utils/lib</code>，在 lib 目录下新建文件 <code>CryptoJS.js</code>，具体代码见：<a href="https://github.com/liuxy0551/account-notebook/blob/master/src/utils/cloudSync/lib/CryptoJS.js#L1" target="_black">CryptoJS.js</a>，然后在 utils 目录下新建文件 <code>crypto.js</code>，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密过程：先对账号和密码进行 AES 加密，再进行 BASE64 编码</span></span><br><span class="line"><span class="comment"> * 解密过程：与加密过程相反</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> CryptoJS <span class="keyword">from</span> <span class="string">'./lib/CryptoJS'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key = CryptoJS.enc.Utf8.parse(<span class="string">'0102030405060807'</span>) <span class="comment">// 十六位十六进制数作为秘钥</span></span><br><span class="line"><span class="keyword">const</span> iv = CryptoJS.enc.Utf8.parse(<span class="string">'0102030405060807'</span>) <span class="comment">// 十六位十六进制数作为秘钥偏移量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// aes 加密</span></span><br><span class="line"><span class="keyword">const</span> aesEncrypt = <span class="function">(<span class="params">word</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> srcs = CryptoJS.enc.Utf8.parse(word)</span><br><span class="line">    <span class="keyword">let</span> encrypted = CryptoJS.AES.encrypt(srcs, key, &#123;</span><br><span class="line">        iv,</span><br><span class="line">        mode: CryptoJS.mode.CBC,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> Base64Encode(encrypted.ciphertext.toString().toUpperCase())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// aes 解密</span></span><br><span class="line"><span class="keyword">const</span> aesDecrypt = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> word = Base64Decode(val)</span><br><span class="line">    <span class="keyword">let</span> encryptedHexStr = CryptoJS.enc.Hex.parse(word)</span><br><span class="line">    <span class="keyword">let</span> srcs = CryptoJS.enc.Base64.stringify(encryptedHexStr)</span><br><span class="line">    <span class="keyword">let</span> decrypt = CryptoJS.AES.decrypt(srcs, key, &#123;</span><br><span class="line">        iv,</span><br><span class="line">        mode: CryptoJS.mode.CBC,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> decryptedStr = decrypt.toString(CryptoJS.enc.Utf8)</span><br><span class="line">    <span class="keyword">return</span> decryptedStr.toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// base64 加密</span></span><br><span class="line"><span class="keyword">const</span> Base64Encode = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> str = CryptoJS.enc.Utf8.parse(val)</span><br><span class="line">    <span class="keyword">let</span> base64 = CryptoJS.enc.Base64.stringify(str)</span><br><span class="line">    <span class="keyword">return</span> base64</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// base64 解密</span></span><br><span class="line"><span class="keyword">const</span> Base64Decode = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> words = CryptoJS.enc.Base64.parse(val)</span><br><span class="line">    <span class="keyword">return</span> words.toString(CryptoJS.enc.Utf8)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    aesEncrypt,</span><br><span class="line">    aesDecrypt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-使用"><a class="header-anchor" href="#二-使用">¶</a>二、使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; aesEncrypt, aesDecrypt &#125; <span class="keyword">from</span> <span class="string">'@/utils/crypto'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> password = <span class="string">'Aa@.-123456'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'原密码：'</span>, password) <span class="comment">// Aa@.-123456</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'加密后：'</span>, aesEncrypt(password)) <span class="comment">// MTgzRDhEQTA1ODUzQzMwMDU0NkQyQ0FGQTg4RDI3NjQ</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'解密后：'</span>, aesDecrypt(aesEncrypt(password))) <span class="comment">// Aa@.-123456</span></span><br></pre></td></tr></table></figure><p><img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/3.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  『账号簿』作为一款记录账号密码的微信小程序而言，安全自然是很重要的，基于此放弃了自行搭建数据库的打算，使用了腾讯云为微信小程序提供的云开发功能，同时也提供数据库的功能，是一个对象型的数据库，安全性比自己在 Docker 中搭建的数据库要高且有更多保障。但是即便如此，上传到数据库的账号密码也使用了业内普遍认可的 AES 对称加密算法进行加密再经 BASE64 编码。这里记录一下 AES 加密后再经 BASE64 编码的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://liuxianyu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="微信小程序" scheme="https://liuxianyu.cn/categories/%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="加密解密" scheme="https://liuxianyu.cn/tags/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
      <category term="微信小程序" scheme="https://liuxianyu.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>账号簿（微信小程序）的开发过程</title>
    <link href="https://liuxianyu.cn/article/account-notebook.html"/>
    <id>https://liuxianyu.cn/article/account-notebook.html</id>
    <published>2021-08-08T16:07:42.000Z</published>
    <updated>2021-08-08T16:07:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>  最近公司的业务比较繁忙，几乎停止了随笔的更新，反省下自己。</p><p>  但还是利用两个周末开发了一个之前一直想做的小程序，idea 来自一位朋友，他想自己做一个记录账号密码的微信小程序给自己使用，他是位后端，即便学习了 Vue 的知识，但还是没开始这项工作，那就由我来完成吧。</p><a id="more"></a><p>  会围绕这个小程序的开发过程写几篇系列随笔，主要是为了在以后开发小程序的过程中可以有所参考和改进。<a href="https://github.com/liuxy0551/account-notebook" target="_black">Github 代码</a>，欢迎 star。</p><h3 id="一-相关随笔"><a class="header-anchor" href="#一-相关随笔">¶</a>一、相关随笔</h3><p>  <a href="https://liuxianyu.cn/article/account-notebook.html" target="_black">账号簿（微信小程序）的开发过程</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-a.html" target="_black">账号簿开发（一）—— 微信小程序 AES 加密解密</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-b.html" target="_black">账号簿开发（二）—— 微信小程序检查更新及调试</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-c.html" target="_black">账号簿开发（三）—— 微信小程序的云开发</a><br>  <a href="https://liuxianyu.cn/article/account-notebook-d.html" target="_black">账号簿开发（四）—— 写一个随机密码生成器</a></p><h3 id="二-实现效果"><a class="header-anchor" href="#二-实现效果">¶</a>二、实现效果</h3><h4 id="2-1-微信扫码体验"><a class="header-anchor" href="#2-1-微信扫码体验">¶</a>2.1、微信扫码体验</h4><p><img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/share.jpg" alt></p><h4 id="2-2-小程序截图"><a class="header-anchor" href="#2-2-小程序截图">¶</a>2.2、小程序截图</h4><p><img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/1.png" alt></p><h4 id="2-3-云端数据截图"><a class="header-anchor" href="#2-3-云端数据截图">¶</a>2.3、云端数据截图</h4><p>   账号密码均为加密后的密文，无法查看明文</p><p><img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/2.png" alt></p><h3 id="三-相关说明"><a class="header-anchor" href="#三-相关说明">¶</a>三、相关说明</h3><h4 id="3-1-功能点"><a class="header-anchor" href="#3-1-功能点">¶</a>3.1、功能点</h4><ul><li>[x] 标签管理</li><li>[x] 账号管理</li><li>[x] 安全密码</li><li>[x] 检查更新</li><li>[x] 指纹解锁</li><li>[x] 云同步及权限管理</li><li>[x] 分享、友情链接</li><li>[x] 代码开源</li><li>[x] 系列文章</li><li>[x] 账号密码自动同步</li><li>[x] 账号列表顶部模糊搜索框</li><li>[x] 随机密码生成器</li><li>[ ] 云同步记录</li></ul><h4 id="3-2-使用说明"><a class="header-anchor" href="#3-2-使用说明">¶</a>3.2、使用说明</h4><ul><li>开发者承诺不会自动上传账号密码到云端，仅在用户主动点击备份时才会**加密（AES 加密后再经过 BASE64 编码）**账号密码后上传到云端，数据库为腾讯云专门为微信小程序提供的云数据库，任何人无法查看账号密码的明文，均为加密后的密文。用户账号密码保存在手机本地数据中。</li><li>清除微信数据或微信缓存以及删除小程序都会丢失本地数据，建议进行这些操作前使用<strong>云同步</strong>功能备份账号密码。</li><li>开发『账号簿』的目的是方便个人密码的保存和查看，是为了保存个人账号密码而开发的，分享给有需要的人使用。</li><li>如遇到问题或想二次开发的，请联系开发者。邮箱：<a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=MFxZRUhJAAUFAXBBQR5TX10" target="_black">liuxy0551@qq.com</a></li><li>开发者尽最大可能保障数据安全，但不承担任何责任。</li></ul><h4 id="3-3-用途说明"><a class="header-anchor" href="#3-3-用途说明">¶</a>3.3、用途说明</h4><p>  『账号簿』用来记录个人的账号密码，数据保存在本地，清除微信数据或微信缓存以及删除小程序都会丢失本地数据。提供了云同步的功能，可以在更换手机前将数据加密（AES 加密后再经过 BASE64 编码）后备份到云端，更换手机后下载备份即可恢复。因云同步功能会使用云数据库读写次数，可以在支持开发者后联系开发者开通此功能。</p><p>  <strong>如果对安全不放心，可以联系开发者进行私有化部署，让你拥有一个属于自己的账号管理小程序！</strong></p><p><img src="https://images-hosting.liuxianyu.cn/posts/account-notebook/wechat-qrcode.png" alt></p><h4 id="3-4-技术说明"><a class="header-anchor" href="#3-4-技术说明">¶</a>3.4、技术说明</h4><ul><li><a href="https://docs.taro.zone/docs/README" target="_black">Taro 3.x</a></li><li>React 17.x</li><li><a href="https://taro-ui.taro.zone/#/" target="_black">taro-ui 最新版</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html" target="_black">微信小程序 - 云开发</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/capabilities.html#%E4%BA%91%E5%87%BD%E6%95%B0" target="_black">微信小程序 - 云函数</a></li></ul><p>  基于 Taro 3.x 使用 React 语法和 Taro UI 的部分组件开发了“账号簿”微信小程序，使用到了微信小程序的云开发和云函数，免费版数据库读写次数有限。</p><h4 id="3-5-代码结构"><a class="header-anchor" href="#3-5-代码结构">¶</a>3.5、代码结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">account-notebook</span><br><span class="line">├─package.json</span><br><span class="line">├─src</span><br><span class="line">|  ├─app.config.js  公用配置项</span><br><span class="line">|  ├─app.js  全局入口</span><br><span class="line">|  ├─app.scss  全局样式</span><br><span class="line">|  ├─index.html</span><br><span class="line">|  ├─utils  工具方法</span><br><span class="line">|  ├─pages</span><br><span class="line">|  |   ├─tag</span><br><span class="line">|  |   |  ├─list  标签列表页面</span><br><span class="line">|  |   |  └─form  标签表单页面</span><br><span class="line">|  |   ├─personal</span><br><span class="line">|  |   |    ├─unlock  输入安全密码页面</span><br><span class="line">|  |   |    ├─password  设置安全密码页面</span><br><span class="line">|  |   |    ├─grid  个人页面</span><br><span class="line">|  |   |    ├─cloudSync  云同步页面</span><br><span class="line">|  |   |    └─about  关于页面</span><br><span class="line">|  |   ├─home  首页</span><br><span class="line">|  |   └─account</span><br><span class="line">|  |        └─form  账号表单页面</span><br><span class="line">|  ├─components</span><br><span class="line">|  |     ├─TopBar  自定义状态栏组件</span><br><span class="line">|  |     ├─Empty  空数据组件</span><br><span class="line">|  |     └─ChangeLog  更新日志浮框</span><br><span class="line">|  ├─assets</span><br><span class="line">|  |   ├─style  样式文件</span><br><span class="line">|  |   └─images  图片资源</span><br><span class="line">├─config  配置文件</span><br><span class="line">└─cloud  云开发</span><br><span class="line">   └─getOpenId  云函数</span><br></pre></td></tr></table></figure><h3 id="四-开发"><a class="header-anchor" href="#四-开发">¶</a>四、开发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/liuxy0551/account-notebook.git</span><br><span class="line">cd account-notebook</span><br><span class="line">yarn</span><br><span class="line">yarn dev:weapp</span><br></pre></td></tr></table></figure><p>  在微信开发者工具导入项目即可查看效果。</p><h3 id="五-管理"><a class="header-anchor" href="#五-管理">¶</a>五、管理</h3><h4 id="5-1-云同步"><a class="header-anchor" href="#5-1-云同步">¶</a>5.1、云同步</h4><p>  在微信开发者工具 -&gt; 云开发 -&gt; 数据库 -&gt; userList 中选择指定用户，添加字段<code>isPay</code>，<code>boolean</code>型，值为<code>true</code>即可为该用户开启云同步功能。</p><h4 id="5-2-账号记录自动同步"><a class="header-anchor" href="#5-2-账号记录自动同步">¶</a>5.2、账号记录自动同步</h4><p>  在微信开发者工具 -&gt; 云开发 -&gt; 数据库 -&gt; userList 中选择指定用户，确认<code>isPay</code>字段为<code>true</code>后，添加字段<code>autoSync</code>，<code>boolean</code>型，值为<code>true</code>即可为该用户开启账号记录自动同步功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近公司的业务比较繁忙，几乎停止了随笔的更新，反省下自己。&lt;/p&gt;
&lt;p&gt;  但还是利用两个周末开发了一个之前一直想做的小程序，idea 来自一位朋友，他想自己做一个记录账号密码的微信小程序给自己使用，他是位后端，即便学习了 Vue 的知识，但还是没开始这项工作，那就由我来完成吧。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://liuxianyu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="微信小程序" scheme="https://liuxianyu.cn/categories/%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="https://liuxianyu.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>利用 canvas 实现简单图片滤镜</title>
    <link href="https://liuxianyu.cn/article/canvas-image-filter.html"/>
    <id>https://liuxianyu.cn/article/canvas-image-filter.html</id>
    <published>2021-07-16T10:37:40.000Z</published>
    <updated>2021-07-16T10:37:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>  最近会做一次周分享，主题是 canvas 图片滤镜，记录下为此写的 demo。在线访问：<a href="https://liuxy0551.github.io/canvas-image-filter/index.html" target="_black">https://liuxy0551.github.io/canvas-image-filter/index.html</a></p><a id="more"></a><p><img src="https://images-hosting.liuxianyu.cn/posts/canvas-image-filter/normal.png" alt></p><h3 id="一-什么是-canvas"><a class="header-anchor" href="#一-什么是-canvas">¶</a>一、什么是 canvas</h3><p>  <code>canvas</code>是一个 HTML 元素，也叫 canvas 画布。Canvas API 主要绘制 2D 图形，而同样使用<code>canvas</code>元素的 WebGL API 一般用于绘制硬件加速的 2D 和 3D 图形。</p><h3 id="二-常用图像-api-接口"><a class="header-anchor" href="#二-常用图像-api-接口">¶</a>二、常用图像 API 接口</h3><p>  关于图像处理的 API，主要有 4 个：</p><h4 id="2-1-绘制图片"><a class="header-anchor" href="#2-1-绘制图片">¶</a>2.1、绘制图片</h4><p>  <code>drawImage(image, x, y, dwidth, dheight)</code></p><p>  其中<code>image</code>是 image 或 canvas 对象，x 和 y 是其在目标 canvas 里的起始坐标，<code>dwidth</code>和<code>dheight</code>是生成图像的宽高。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image() <span class="comment">// 声明新的Image对象</span></span><br><span class="line">img.src = <span class="string">"./img/photo.png"</span></span><br><span class="line"><span class="comment">// 图片加载后</span></span><br><span class="line">img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  canvas = <span class="built_in">document</span>.querySelector(<span class="string">"#my-canvas"</span>)</span><br><span class="line">  ctx = canvas.getContext(<span class="string">"2d"</span>)</span><br><span class="line">  <span class="comment">// 根据image大小，指定canvas大小</span></span><br><span class="line">  canvas.width = img.width</span><br><span class="line">  canvas.height = img.height</span><br><span class="line">  <span class="comment">// 绘制图像</span></span><br><span class="line">  ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-获取图像数据"><a class="header-anchor" href="#2-2-获取图像数据">¶</a>2.2、获取图像数据</h4><p>  <code>getImageData(x, y, width, height)</code></p><p>  其中<code>x</code>和<code>y</code>是将要被提取图像区域的左上角坐标，<code>width</code>和<code>height</code>是将要被提取图像区域的宽高。返回一个<code>ImageData</code>对象，包含 canvas 给定矩形区域的图像数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> imageData = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br></pre></td></tr></table></figure><h4 id="2-3-重写图像数据"><a class="header-anchor" href="#2-3-重写图像数据">¶</a>2.3、重写图像数据</h4><p>  <code>putImageData(imageData, x, y)</code></p><p>  其中<code>imageData</code>是<code>getImageData</code>方法返回的<code>ImageData</code>对象，<code>x</code>和<code>y</code>分别是源图像数据在目标画布中 x 轴 和 y 轴的偏移量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.putImageData(imageData, <span class="number">0</span>, <span class="number">0</span>) <span class="comment">// 重绘图像</span></span><br></pre></td></tr></table></figure><h4 id="2-4-导出图像"><a class="header-anchor" href="#2-4-导出图像">¶</a>2.4、导出图像</h4><p>  <code>toDataURL([type, encoderOptions])</code></p><p>  其中<code>type</code>代表图片格式，默认为 image/png，<code>encoderOptions</code>是指在<code>type</code>设置为 image/jpeg 或 image/webp 时，可以从 0 到 1 设置图片的质量，默认 0.92。</p><p>更详细的 API 和参数说明请参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D" target="_black">MDN CanvasRenderingContext2D</a></p><h3 id="三-常见滤镜效果"><a class="header-anchor" href="#三-常见滤镜效果">¶</a>三、常见滤镜效果</h3><p>  实现滤镜主要借用<code>getImageData</code>方法，返回每个像素的 RGBA 值，操作像素进行不同的运算即可得到不同的滤镜效果。</p><h4 id="3-1-去色效果"><a class="header-anchor" href="#3-1-去色效果">¶</a>3.1、去色效果</h4><p>  相当于黑白照片，定义以下公式：<code>gray = red * 0.3 + green * 0.59 + blue * 0.11</code></p><p><img src="https://images-hosting.liuxianyu.cn/posts/canvas-image-filter/1.png" alt></p><h4 id="3-2-底片效果"><a class="header-anchor" href="#3-2-底片效果">¶</a>3.2、底片效果</h4><p>  底片效果就是 RGB 最大值减去当前值，即 255 - 当前值：</p><p><img src="https://images-hosting.liuxianyu.cn/posts/canvas-image-filter/2.png" alt></p><h4 id="3-3-单色效果"><a class="header-anchor" href="#3-3-单色效果">¶</a>3.3、单色效果</h4><p>  单色效果是将当前像素的其他色值去除，比如显示红色时将 green、blue 可以设置为 0：</p><p><img src="https://images-hosting.liuxianyu.cn/posts/canvas-image-filter/3.png" alt></p><h4 id="3-4-黑白效果"><a class="header-anchor" href="#3-4-黑白效果">¶</a>3.4、黑白效果</h4><p>  通过判断当前像素的色值是否超过某一个标定值，大于则显示黑色，否则显示白色，即可达到效果。这个标定值可以设定为 RGB 最大值的一半，也就是 128：</p><p><img src="https://images-hosting.liuxianyu.cn/posts/canvas-image-filter/4.png" alt></p><h4 id="3-5-荧光效果"><a class="header-anchor" href="#3-5-荧光效果">¶</a>3.5、荧光效果</h4><p><img src="https://images-hosting.liuxianyu.cn/posts/canvas-image-filter/5.png" alt></p><h3 id="四-代码"><a class="header-anchor" href="#四-代码">¶</a>四、代码</h3><p>[1] <a href="https://github.com/liuxy0551/canvas-image-filter" target="_black">https://github.com/liuxy0551/canvas-image-filter</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近会做一次周分享，主题是 canvas 图片滤镜，记录下为此写的 demo。在线访问：&lt;a href=&quot;https://liuxy0551.github.io/canvas-image-filter/index.html&quot; target=&quot;_black&quot;&gt;https://liuxy0551.github.io/canvas-image-filter/index.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://liuxianyu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="canvas" scheme="https://liuxianyu.cn/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>egg 设置 keepAliveTimeout 超时时间</title>
    <link href="https://liuxianyu.cn/article/egg-keepAlive-timeout.html"/>
    <id>https://liuxianyu.cn/article/egg-keepAlive-timeout.html</id>
    <published>2021-06-25T23:19:19.000Z</published>
    <updated>2021-06-25T23:19:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>  最近在阿里云函数计算中，Post 接口经常在紧密相邻的第二次调用时报错，<code>{ errorMessage: 'Process exited unexpectedly before completing request (duration: 1ms, maxMemoryUsage: 200.52MB) }</code>，这个错误经过测试是偶发必现的，比较影响体验，记录下解决方法。</p><a id="more"></a><h3 id="一-出现错误"><a class="header-anchor" href="#一-出现错误">¶</a>一、出现错误</h3><p>  这个项目在函数计算的部署环境是<code>Custom Runtime</code>，选用了<code>egg</code>框架。调用一个 Post 接口的时候，发现经常性的没有反应，查看日志后发现偶发遇到<code>502 bad gateway</code>的错误。查看函数计算的文档后发现有以下要求：</p><blockquote><p><strong>HTTP Server 配置要求</strong><br>Connection 需要设置为 Keep-Alive，Server 端请求超时时间需设置在15分钟及以上。示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如Node.js使用express时</span></span><br><span class="line"><span class="keyword">var</span> server = app.listen(PORT, HOST)</span><br><span class="line">server.timeout = <span class="number">0</span> <span class="comment">// never timeout</span></span><br><span class="line">server.keepAliveTimeout = <span class="number">0</span> <span class="comment">// keepalive, never timeout</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="二-解决方法"><a class="header-anchor" href="#二-解决方法">¶</a>二、解决方法</h3><p>  从网上找到三种解决方法，下述前两种尝试后发现没有效果，错误依旧可复现。</p><h4 id="2-1-config-httpclient-无效"><a class="header-anchor" href="#2-1-config-httpclient-无效">¶</a>2.1 config.httpclient <code>无效</code></h4><p>  修改<code>/config/config.default.js</code>文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">config.httpclient = &#123;</span><br><span class="line">  request: &#123;</span><br><span class="line">    <span class="comment">// 默认 request 超时时间</span></span><br><span class="line">    timeout: <span class="number">60000</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  httpAgent: &#123;</span><br><span class="line">    <span class="comment">// 默认开启 http KeepAlive 功能</span></span><br><span class="line">    keepAlive: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 空闲的 KeepAlive socket 最长可以存活 4 秒</span></span><br><span class="line">    freeSocketTimeout: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 当 socket 超过 30 秒都没有任何活动，就会被当作超时处理掉</span></span><br><span class="line">    timeout: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 允许创建的最大 socket 数</span></span><br><span class="line">    maxSockets: <span class="built_in">Number</span>.MAX_SAFE_INTEGER,</span><br><span class="line">    <span class="comment">// 最大空闲 socket 数</span></span><br><span class="line">    maxFreeSockets: <span class="number">256</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  httpsAgent: &#123;</span><br><span class="line">    keepAlive: <span class="literal">true</span>,</span><br><span class="line">    freeSocketTimeout: <span class="number">0</span>,</span><br><span class="line">    timeout: <span class="number">0</span>,</span><br><span class="line">    maxSockets: <span class="built_in">Number</span>.MAX_SAFE_INTEGER,</span><br><span class="line">    maxFreeSockets: <span class="number">256</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  可在 <a href="https://eggjs.org/zh-cn/core/httpclient.html#httpclient-%E9%BB%98%E8%AE%A4%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE" target="_blank">HttpClient 默认全局配置</a>、<a href="https://github.com/eggjs/egg/blob/master/config/config.default.js#L270" target="_blank">github -&gt; config.default.js -&gt; httpclient</a> 中查看文档。</p><blockquote><p><strong>注意</strong><br>HttpClient 是发送 HTTP 请求的，而 timeout 和 keepAliveTimeout 是要设置到 egg 启动的 http server 上。</p></blockquote><h4 id="2-2-config-clusterclient-无效"><a class="header-anchor" href="#2-2-config-clusterclient-无效">¶</a>2.2 config.clusterClient <code>无效</code></h4><p>  修改<code>/config/config.default.js</code>文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config.clusterClient = &#123;</span><br><span class="line">  maxWaitTime: <span class="number">60000</span>,</span><br><span class="line">  responseTimeout: <span class="number">60000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  可在 <a href="https://eggjs.org/zh-cn/advanced/cluster-client.html#%E5%9C%A8%E6%A1%86%E6%9E%B6%E9%87%8C%E9%9D%A2-cluster-client-%E7%9B%B8%E5%85%B3%E7%9A%84%E9%85%8D%E7%BD%AE%E9%A1%B9" target="_blank">在框架里面 cluster-client 相关的配置项</a>、<a href="https://github.com/eggjs/egg/blob/master/config/config.default.js#L366" target="_blank">github -&gt; config.default.js -&gt; clusterClient</a> 中查看文档。</p><h4 id="2-3-app-server-推荐"><a class="header-anchor" href="#2-3-app-server-推荐">¶</a>2.3 app.server <code>推荐</code></h4><p>  APP 的生命周期函数中提供了<code>serverDidReady</code>方法，此时可以从<code>app.server</code>拿到 server 的实例。文档：<a href="https://eggjs.org/zh-cn/basics/app-start.html" target="_blank">启动自定义</a>。拿到 server 实例我们就可以设置 timeout 和 keepAliveTimeout。</p><p>  根目录增加<code>app.js</code>文件，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppBootHook</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(app) &#123;</span><br><span class="line">      <span class="keyword">this</span>.app = app</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> serverDidReady() &#123;</span><br><span class="line">      <span class="comment">// http / https server 已启动，开始接受外部请求</span></span><br><span class="line">      <span class="comment">// 此时可以从 app.server 拿到 server 的实例</span></span><br><span class="line">      <span class="keyword">this</span>.app.server.timeout = <span class="number">0</span></span><br><span class="line">      <span class="keyword">this</span>.app.server.keepAliveTimeout = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = AppBootHook</span><br></pre></td></tr></table></figure><h4 id="参考文章"><a class="header-anchor" href="#参考文章">¶</a>参考文章</h4><p>[1] <a href="https://github.com/eggjs/egg/issues/4541" target="_black">egg Issue #4541 - egg 如此设置 keepAliveTimeout 超时时间不不起作用？</a><br>[2] <a href="https://github.com/eggjs/egg/issues/4411" target="_black">egg Issue #4411 - egg 迁移到阿里云函数计算，使用post方式发送请求，第一个请求正常，相隔10秒后发第二个请求，egg崩溃</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近在阿里云函数计算中，Post 接口经常在紧密相邻的第二次调用时报错，&lt;code&gt;{ errorMessage: &#39;Process exited unexpectedly before completing request (duration: 1ms, maxMemoryUsage: 200.52MB) }&lt;/code&gt;，这个错误经过测试是偶发必现的，比较影响体验，记录下解决方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Serverless" scheme="https://liuxianyu.cn/categories/Serverless/"/>
    
    
      <category term="函数计算" scheme="https://liuxianyu.cn/tags/%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Serverless" scheme="https://liuxianyu.cn/tags/Serverless/"/>
    
  </entry>
  
</feed>
